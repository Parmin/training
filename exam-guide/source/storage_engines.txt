Storage Engines
---------------

By the end of this module, students will know:

- The locking level or concurrency protocols for each storage engine
- The compression algorithms available for WiredTiger
- For MMAPv1, the causes & effects of document movement
- The effects of these features on the performance of MongoDB

Storage Engine Subtopics
------------------------

- Introduction to Storage Engines
- Summary of Major Differences between MMAPv1 and WiredTiger
- MMAPv1
  - Collection Level Locking
  - Data Files
  - Document Growth
  - Document Movement
  - Power of Two Sizes Allocation Strategy
    - No Padding Option
  - Updating indexes on document movement
- WiredTiger
  - Block Compression
    - Compression Algorithms
  - Index Prefix Compression
  - Concurrency Protocols
- Concurrency in MongoDB 3.0
- Data Files
  - Data file sizes in MMAPv1

Introduction to Storage Engines
-------------------------------

MongoDB's storage engine is its method of taking BSON, storing it in memory, and writing it to disk. Pluggable storage engines were introduced with MongoDB 3.0; prior to that, the "classic" storage engine for MongoDB was MMAPv1.

Docs:
  - Storage FAQ_
  - Storage for Write Operations_
Videos:
  - Storage Engines Introduction_

.. _Storage FAQ: https://docs.mongodb.org/v3.0/core/storage/
.. _Storage Engines Introduction: http://youtu.be/yV8qgeXvAyI
.. _Storage for Write Operations: https://docs.mongodb.org/manual/core/storage/


Summary of Major Differences between MMAPv1 and WiredTiger
----------------------------------------------------------

- Locks/Concurrency
  - MMAPv1 uses collection level locking in MongoDB 3.0
  - WT has document-level concurrency
- Journaling
  - MMAPv1 requires it to prevent data corruption during process failure
  - WT does not require it to prevent data corruption
  - Makes writes to disk more timely in both, but also requires extra disk writing.
- Data Compression
  - 2 options are available in WiredTiger, none in MMAPv1.
- Other Considerations
  - MMAPv1 is written out directly in data files that contain BSON documents. If a BSON document outgrows its allotted space, it will have to be moved. Indexes that point to this document point to its file offset, and will need to be updated, which can make writes more exmensive. It also leaves behind "holes" in the data files.
    - To minimize these occurrences, we use the Power of Two Sizes Allocation strategy, allocating a "record space" to each document that is larger than the document. If the document outgrows its record space, the record space remains behind when the document moves, and that record space can be re-used by another document.
- Sharding and Replication
  - There are no differences between the storage engines with respect to Sharding or Replication to be on the exam.


MMAPv1
------

An upgrade to the "classic" MongoDB storage engine, this involved an early design decision to rely on the mmap system call to memory map the data files (where the BSON documents were written out) onto the disk, and simply treat them as if they were in memory while the operating system handled the storage layer.

Docs:
  - Storage FAQ MMAPv1 Section_
  - Power of 2 Sizes Allocations_
  - No Padding_
Videos:
  - MMAPv1_
  - MMAPv1 Documents and Data Files_

.. _Storage FAQ MMAPv1 Section: http://docs.mongodb.org/master/faq/storage/#mmapv1-storage-engine
.. _MMAPv1: http://youtu.be/PZCdLVB4lw4
.. _MMAPv1 Documents and Data Files: http://youtu.be/9nYFnlM4vYw
.. _Power of 2 Sided Allocations: https://docs.mongodb.org/manual/core/storage/#power-of-2-allocation
.. _No Padding: https://docs.mongodb.org/manual/core/storage/#no-padding-allocation-strategy


WiredTiger
----------

Docs:
  - Storage FAQ WiredTiger Section_
  - Index Prefix Compression_
  - Compression Options:
    - Snappy_
    - Zlib_
Videos:
  - WiredTiger_  

.. _WiredTiger: http://youtu.be/O9TGqK3FBX8
.. _Storage FAQ WiredTiger Section: http://docs.mongodb.org/master/faq/storage/#wiredtiger-storage-engine
.. _Index Prefix Compression: https://docs.mongodb.org/manual/reference/glossary/#term-prefix-compression
.. _Snappy: https://docs.mongodb.org/manual/reference/glossary/#term-snappy
.. _Zlib: https://docs.mongodb.org/manual/reference/glossary/#term-zlib


Concurrency
-----------

Docs:
  - Concurrency FAQ_

.. _Concurrency FAQ: http://docs.mongodb.org/master/faq/concurrency/

Data Files
----------

Be sure to look at your data directory and be able to recognize the difference between a WiredTiger data directory and an MMAPv1 one.

Here is an MMAPv1 directory:

.. code:: bash

$ ls -la
total 13332496
-rw-r--r--   1 will  staff    69B Sep 16 15:50 storage.bson
-rw-------   1 will  staff    16M Sep 16 16:02 partners.ns
-rw-------   1 will  staff    64M Sep 16 16:02 partners.0
-rwxr-xr-x   1 will  staff     6B Sep 16 15:50 mongod.lock*
-rw-------   1 will  staff    16M Sep 16 16:02 local.ns
-rw-------   1 will  staff   256M Sep 16 16:02 local.1
-rw-------   1 will  staff    64M Sep 16 15:51 local.0
drwxr-xr-x   5 will  staff   170B Sep 16 16:00 journal/
-rw-------   1 will  staff    16M Sep 16 16:01 customers.ns
-rw-------   1 will  staff   2.0G Sep 16 16:01 customers.6
-rw-------   1 will  staff   2.0G Sep 16 16:01 customers.5
-rw-------   1 will  staff   1.0G Sep 16 15:58 customers.4
-rw-------   1 will  staff   512M Sep 16 15:56 customers.3
-rw-------   1 will  staff   256M Sep 16 15:54 customers.2
-rw-------   1 will  staff   128M Sep 16 15:54 customers.1
-rw-------   1 will  staff    64M Sep 16 16:01 customers.0
drwxr-xr-x   2 will  staff    68B Sep 16 16:01 _tmp/
drwxr-xr-x   4 will  staff   136B Sep 16 15:50 ../
drwxr-xr-x  19 will  staff   646B Sep 16 16:01 ./

Notice that the directory has namespace files for each database, plus data files named after the db as well.

Notice also that the smallest data file size is 64 MB, then 128, then 256, and so on until it maxes out at 2 GB. They are created sequentially.

And here is a WiredTiger directory:

.. code:: bash

$ ls -la
total 360
-rw-r--r--   1 will  staff    95B Sep 16 15:43 storage.bson
-rw-r--r--   1 will  staff    16K Sep 16 15:43 sizeStorer.wt
-rwxr-xr-x   1 will  staff     6B Sep 16 15:43 mongod.lock*
drwxr-xr-x   5 will  staff   170B Sep 16 15:43 journal/
-rw-r--r--   1 will  staff    16K Sep 16 15:43 index-5-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 index-3-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 index-1-5307542050812875631.wt
drwxr-xr-x   4 will  staff   136B Sep 16 15:43 diagnostic.data/
-rw-r--r--   1 will  staff   4.0K Sep 16 15:43 collection-6-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-4-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-2-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-0-5307542050812875631.wt
-rw-r--r--   1 will  staff    16K Sep 16 15:43 _mdb_catalog.wt
-rw-r--r--   1 will  staff   4.0K Sep 16 15:43 WiredTigerLAS.wt
-rw-r--r--   1 will  staff    24K Sep 16 15:43 WiredTiger.wt
-rw-r--r--   1 will  staff   907B Sep 16 15:43 WiredTiger.turtle
-rw-r--r--   1 will  staff    21B Sep 16 15:43 WiredTiger.lock
-rw-r--r--   1 will  staff    45B Sep 16 15:43 WiredTiger
drwxr-xr-x   4 will  staff   136B Sep 16 15:43 ../
drwxr-xr-x  20 will  staff   680B Sep 16 15:43 ./

Notice that the data files are associated with a collection, and that the indexes are stored in separate directories. There is no obvious indication in the data file which collection (or index) a file is associated with. 
