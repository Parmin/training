===============
Storage Engines
===============

For the exam, we will verify that you know:

- Concurrency levels for MMAPv1 and WiredTiger
- The compression algorithms available for WiredTiger
- For MMAPv1, the causes and effects of document movement
- The effects of these features on the performance of MongoDB

Introduction
------------

A database storage engine is the underlying software component that a database management system uses to create, read, update, and delete data from a database. In the case of MongoDB, the storage engine organizes BSON data in memory and on disk to support read and write operations. Pluggable storage engines were introduced with MongoDB 3.0. Prior to that, MongoDB's storage engine was what we now call MMAPv1.

- Docs:

  - :manual:`MMAPv1 </v3.0/core/mmapv1/>`
  - :manual:`WiredTiger </v3.0/core/wiredtiger/>`

- Videos:

  - `Storage Engines Introduction <https://university.mongodb.com/videos/y/yV8qgeXvAyI>`_


Summary of Major Differences between MMAPv1 and WiredTiger
----------------------------------------------------------

- Locks/Concurrency

  - MMAPv1 uses collection level locking in MongoDB 3.0
  - WiredTiger supports document-level concurrency

- Journaling

  - MMAPv1 requires journaling to prevent data corruption during process failure
  - WiredTiger does not require journaling to prevent data corruption
  - Journaling causes data to be flushed to disk more often, but at a performance cost

- Data Compression

  - WiredTiger supports both the snappy and zlib compression algorithms
  - MMAPv1 does not support data compression

- Other Considerations

  - Due to the way MMAPv1 organizes data, if a BSON document outgrows its allotted space, it must be moved. Indexes that point to this document point to its file offset and will need to be updated. As a consequence, writes that force a document to move on disk come at a relatively high performance cost. Document movement also leads to fragmentation.

  - To minimize document movement, MMAPv1 uses a power-of-two size allocation strategy, allocating a "record space" to each document that is larger than the document. If the document outgrows its record space, the newly allocated space for the document will be twice as large as the previous allocation. Power-of-two sizing also enables the storage engine to more easily reuse space vacated by a moved document, because all document allocations will be a size that is a power of two.


MMAPv1
------

For the exam, you should know:

- The mechanics of memory mapping in the MMAPv1 storage engine
- That MMAPv1 supports collection-level concurrency (locking)
- Why Power-of-two allocation is used in MMAPv1

  - Why it is usually a good idea
  - How to turn it off

- Docs:

  - :manual:`Concurrency FAQ </faq/concurrency/>`
  - :manual:`Power of 2 Sized Allocations </core/storage/#power-of-2-allocation>`
  - :manual:`No Padding </core/storage/#no-padding-allocation-strategy>`

- Videos:

  - `MMAPv1 <https://university.mongodb.com/videos/y/PZCdLVB4lw4>`_
  - `MMAPv1 Documents and Data Files <https://university.mongodb.com/videos/y/9nYFnlM4vYw>`_


WiredTiger
----------

For the exam, you should know:

- Compression options in WiredTiger
- That WiredTiger supports document-level concurrency (locking)

  - Default settings

- How the WiredTiger cache works

- Docs:

  - :manual:`Concurrency FAQ </faq/concurrency/>`
  - `Storage FAQ WiredTiger Section <http://docs.mongodb.org/master/faq/storage/#wiredtiger-storage-engine>`_
  - :manual:`Index Prefix Compression </reference/glossary/#term-prefix-compression>`
  - Compression Options:

    - :manual:`snappy </reference/glossary/#term-snappy>`
    - :manual:`zlib </reference/glossary/#term-zlib>`

- Videos:

  - `WiredTiger <https://university.mongodb.com/videos/y/O9TGqK3FBX8>`_


Data Files
----------

For the exam, you should know:

- Whether a dbpath directory is for MMAPv1 or WiredTiger based on the files present
- For MMAPv1, the maximum size of database files and when MMAPv1 will create new database files


Following is an example of an MMAPv1 data directory:

.. code:: bash

  $ ls -la
  total 1179664
  -rw-------   1 will  staff    16M Sep 14 08:56 test.ns
  -rw-------   1 will  staff    64M Sep 14 08:56 test.0
  -rw-r--r--   1 will  staff    69B Sep 10 15:52 storage.bson
  -rwxr-xr-x   1 will  staff     5B Sep 10 15:52 mongod.lock*
  -rw-------   1 will  staff    16M Sep 16 00:38 local.ns
  -rw-------   1 will  staff   256M Sep 16 00:38 local.1
  -rw-------   1 will  staff    64M Sep 10 15:54 local.0
  drwxr-xr-x   4 will  staff   136B Sep 14 08:55 journal/
  -rw-------   1 will  staff    16M Sep 16 00:38 foo.ns
  -rw-------   1 will  staff    64M Sep 16 00:38 foo.0
  drwxr-xr-x   2 will  staff    68B Sep 16 00:34 _tmp/
  drwxr-xr-x   4 will  staff   136B Sep 10 15:52 ../
  drwxr-xr-x  15 will  staff   510B Sep 16 00:34 ./

and here is an example of WiredTiger data directory:

.. code:: bash

  $ ls -la
  total 360
  -rw-r--r--   1 will  staff    95B Sep 16 15:43 storage.bson
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 sizeStorer.wt
  -rwxr-xr-x   1 will  staff     6B Sep 16 15:43 mongod.lock*
  drwxr-xr-x   5 will  staff   170B Sep 16 15:43 journal/
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 index-5-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 index-3-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 index-1-5307542050812875631.wt
  drwxr-xr-x   4 will  staff   136B Sep 16 15:43 diagnostic.data/
  -rw-r--r--   1 will  staff   4.0K Sep 16 15:43 collection-6-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-4-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-2-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 collection-0-5307542050812875631.wt
  -rw-r--r--   1 will  staff    16K Sep 16 15:43 _mdb_catalog.wt
  -rw-r--r--   1 will  staff   4.0K Sep 16 15:43 WiredTigerLAS.wt
  -rw-r--r--   1 will  staff    24K Sep 16 15:43 WiredTiger.wt
  -rw-r--r--   1 will  staff   907B Sep 16 15:43 WiredTiger.turtle
  -rw-r--r--   1 will  staff    21B Sep 16 15:43 WiredTiger.lock
  -rw-r--r--   1 will  staff    45B Sep 16 15:43 WiredTiger
  drwxr-xr-x   4 will  staff   136B Sep 16 15:43 ../
  drwxr-xr-x  20 will  staff   680B Sep 16 15:43 ./

Exercises for the Reader
------------------------

- Use mongostat and mongotop to compare the throughput of inserts, updates, and reads for WiredTiger and MMAPv1. Do so for a variety of loads and different types of read an write operations.
- Perform many inserts for both WiredTiger and MMAPv1. Compare the size of the data files. Repeat with each compression option for WiredTiger.
- Set up a replica set with different storage engines for different nodes in that replica sets.
