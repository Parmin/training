====================
General IT Knowledge
====================

After reading this and exploring the links, students should be able to:

- Define Fundamental Database Concepts
- Write Simple Javascript routines
- Know the basic topics of System Programming.

Subtopics
---------

- Introduction
- Fundamental Database Concepts
- Fundamentals of System Programming
- Basics of Javascript Programming


Introduction
------------

This section will describe the knowledge upon which most other MongoDB knowledge is built

This section will cover concepts that you should understand before taking the exam, but which will not be explicitly covered by the exam (though you may find some questions that implicitly expect you to know this information).


Fundamental Database Concepts
-----------------------------

It is expected that you will understand the basics of the database industry: what constitutes a relational (or a non-relational) database. You should also understand how joins and transactions work in a general way, though we won't ask you to perform them.

- From mongodb.com:

  - `NoSQL Database Explained <https://www.mongodb.com/nosql-explained>`_



Fundamentals of System Programming
----------------------------------

You should be able to define:

- Physical Memoary
- Virtual Memory
- Memory Mapping
- Hex (base-16) Representations of Data

You can find resources around the web to help you with this. Most likely, however, this isn't new to you.


Basics of Javascript Programming
--------------------------------

Specifically, you should know enough to navigate the MongoDB administrative shell. Everything on the exam will have to do with that administrative shell, so that's all we'll focus on. We won't, for example, require you to write Java or Python.

Here are some basic exercises in the Mongo shell:

To assign a value to a variable, you use the '=' sign. Let's assign the value of 5 to the 'x' variable:

.. code-block:: javascript
  
  > var x = 5;
  > print(x)
  5

The variable assignment can also be done implicitly, and the semicolons are often optional, so this can also work:

.. code-block:: javascript
  
  > x = 5
  5
  > print(x)
  5

There are some objects and functions provided that you can use for some common use cases:

.. code-block:: javascript

  > Math.floor(3.5)
  3
  > Math.PI
  3.141592653589793
  > ISODate()
  ISODate("2015-07-22T19:04:34.219Z")
  > print("hello")
  hello
  >

You can also create loops using the shell:

.. code-block:: javascript

  > var x = 0
  > while ( x < 5 ) { x++; print(x) }
  1
  2
  3
  4
  5
  > for (i=0; i<=3; i++) { print(i) }
  0
  1
  2
  3
  > x = { a : 4, b : 3, c : 2 }
  { "a" : 4, "b" : 3, "c" : 2 }
  > for (key in x) { print(key + ': ' + x[key]) }
  a: 4
  b: 3
  c: 2
  >

In MongoDB, you will often be working with database or collection objects:

.. code-block:: javascript

  > db
  test
  > db.currentOP()
  { "inprog" : [ ] }
  > db.people.find()
  { "_id" : ObjectId("55afeb6a6daadd6baf25c63b"), "name" : "Dwight", "title" : "Chair of the Board" }
  { "_id" : ObjectId("55afeb7b6daadd6baf25c63c"), "name" : "Andrew", "title" : "VP of Developer Experience" }
       
We'll be going through relevant functions during the review session, but definitely be aware of how they're invoked in the shell.


Exercises to Complete
---------------------

- Write a for loop that inserts one million documents in the mongo shell.
- Create a collection with a field that contains the _id of documents in another collection.

  - Use the _id reference to manually "join" the two collections.
