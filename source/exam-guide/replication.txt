===========
Replication
===========

On the certification exam, we will attempt to verify that you:

- Understand the benefits of replication
- Understand tradeoffs between speed and durability
- Know the basics of how the oplog works, including concepts like idempotence and statement-based replication
- Know what happens when a node (primary or not) fails

Replication Subtopics
---------------------

- Introduction
- Nodes: Primary, Secondary, Arbiter, Delayed Secondaries, Hidden Secondaries
- Initiating a Replica Set

  - Initial Sync

- Elections: Votes, Criteria for Winning an Election
- Failover

  - Rollback (DBA only)

- rs.status()
- Replica set reconfiguration
- Oplog: Statement-based replication, Idempotence (DBA Only), Capped Collection (DBA only)
- Read Preference: Primary, Secondary, PrimaryPreferred, SecondaryPreferred, Nearest
- Write Concern: The w parameter, The j parameter


Introduction
------------

Replication is about availability and durability. It is, generally speaking, not for scaling. That would be the purpose of Sharding.

- Videos: 

  - `Replication Concepts <https://university.mongodb.com/videos/y/AYBOd-tpdKo>`_
  - `Replication Overview <https://university.mongodb.com/videos/y/eNFWxRFIbcI>`_
  - `Asynchronous Replication <https://university.mongodb.com/videos/y/3p30vjb-Rx8>`_

- Docs:

  - :manual:`Replication Introduction</core/replication-introduction/>`


Nodes
-----

- Docs: 

  - :manual:`Replica Set Members</core/replica-set-members/>`
  - :manual:`Delayed Members</core/replica-set-delayed-member/>`
  - :manual:`Hidden Members</core/replica-set-hidden-member/>`
  - :manual:`Non-Voting Members</tutorial/configure-a-non-voting-replica-set-member/>`

- Videos:

  - `Arbiters <https://university.mongodb.com/videos/y/4W0GO2CAu2w>`_
  - `Hidden and Slave Delay <https://university.mongodb.com/videos/y/X1hCBT2UTuo>`_


Initiating a Replica Set
------------------------

You should be familiar with the rs.initiate() function.

- Video:

  - `Initiating a Replica Set <https://university.mongodb.com/videos/y/EaGhuXPZZbk>`_

- Docs:

  - :manual:`rs.initiate()</reference/method/rs.initiate/#rs.initiate>`


Initial Sync
------------

An initial sync occurs when a data-bearing member connects to a replica set and begins pulling data. There is an initial sync, followed by walking the oplog.

- Docs:

  - :manual:`Initial Sync</core/replica-set-sync/#initial-sync>`


Elections
---------

Elections determine which of the data bearing members will become primary. You should be aware of the mechanics of elections, and which member should win the election (or members, if there are multiple members that are equally eligible).

- Docs: 

  - :manual:`Elections</core/replica-set-elections/>`
  - :manual:`Non-voting members</tutorial/configure-a-non-voting-replica-set-member/>`


Failover
--------

Failover is the process of replica set recovery when the primary goes down. A secondary steps up and takes over.

- Video:

  - `Automatic Failover <https://university.mongodb.com/videos/y/VsnI8uCTG60>`_
  - `Failover Example <https://university.mongodb.com/videos/y/MGoHhWbMDaU>`_

- Docs:

  - :manual:`Replica Set High Availability</core/replica-set-high-availability/>`


Rollback
--------

This is only a concern for DBA's. You should know what happens if:

- First, you take a write on your Primary that does not make it to other replica set members
- Second, your primary loses its status as primary (perhaps due to a server failure or a network partition) while keeping the write
- Third, a new primary is elected
- Fourth, your old primary reconnects to the rest of the replica set

Video:

  - `Recovery <https://university.mongodb.com/videos/y/TGsnu9RBjzA>`_

Docs: 

  - :manual:`Rollbacks</core/replica-set-rollbacks/>`


rs.status()
-----------

rs.status() is a good way to determine the state of a replica set. You should be familiar with the output of this call, and be able to interpret it.

- Video:

  - `Replica Set Status <https://university.mongodb.com/videos/y/QspOQbOShSY>`_

- Docs:

  - :manual:`rs.status() Example</reference/command/replSetGetStatus/#example>`


Replica Set Reconfiguration
---------------------------

You may need to add a member or remove a member, so you should be familiar with how to do this. You should also know what constraints might interfere with this process (not having a majority of members available, for example).

- Docs: 

  - :manual:`Reconfigure a Replica Set</tutorial/reconfigure-replica-set-with-unavailable-members/>`


Oplog
-----

The oplog is the implementation of MongoDB's statement based replication. You'll need to be familiar with it.

- Video:

  - `Statement Based vs Binary Replication <https://university.mongodb.com/videos/y/yutpUgJMkk4>`_

- Docs

  - :manual:`Replica Set Oplog</core/replica-set-oplog/>`
  - :manual:`Capped Collections</core/capped-collections/>`
  - :manual:`Idempotent (glossary)</reference/glossary/#term-idempotent>`



Read Preference
---------------

Read preference is about deciding where you want to draw your data from. The default is Primary, so that you can capture writes as they happen; reading from a secondary will result in an "eventual consistency" model.

- Docs:

  - :manual:`Read Preference Reference</reference/read-preference/>`

- Videos:

  - `Introduction to Read Preference <https://university.mongodb.com/videos/y/I62q4cyeSyc>`_
  - `Read Preference Options <https://university.mongodb.com/videos/y/jCEZvexlpj4>`_


Write Concern
-------------

- Videos: 

  - `Write Concern Principles <https://university.mongodb.com/videos/y/73Jl2woKhNo>`_
  - `Examining the 'w' parameter <https://university.mongodb.com/videos/y/K3N6psPZCD0>`_
  - `Write Concern Use Cases and Patterns <https://university.mongodb.com/videos/y/sSkFhx1jKSs>`_

- Docs:

  - :manual:`Write Concern</core/write-concern/>`
  - :manual:`Write Concern Reference</reference/write-concern/>`


Sample Problems
---------------

1. Given a replica set with five data-bearing members, suppose the primary goes down with operations in its oplog that have been copied from the primary to only one secondary. Assuming no other problems occur, which of the following describes what is most likely to happen?

a. The primary may roll back the operations once it recovers.
b. The secondary with the most current oplog will be elected primary.
c. Missing operations will need to be manually re-performed.
d. The most current secondary will roll back the operations following the election.
e. Reads will be stale until the primary comes back up.

2. Which of the following is true of the mechanics of replication in MongoDB? Check all that apply.

a. Operations on the primary are recorded in a capped collection called the oplog.
b. Members of a replica set may replicate data from any other data-bearing member of the set by default.
c. Clients read from the nearest member of a replica set by default.

3. What read preference should your application use if you want to read from the primary under normal circumstances but allow reads from secondaries when a primary is unavailable?

a. Nearest
b. primary
c. primaryPreferred
d. secondaryPreferred
e. Secondary

4. Using an arbiter allows one to easily ensure an odd number of voters in replica sets. Why is this important? 

a. To add greater redundancy
b. For more efficient backup operations
c. To help in disaster recovery
d. To protect against network partitions
e. To enable certain read preference settings


Answers to Sample Problems
--------------------------

1. b
2. a, b
3. c
4. d
