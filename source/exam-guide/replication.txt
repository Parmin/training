===========
Replication
===========

On the certification exam, we will attempt to verify that you:

- Understand the benefits of replication
- Understand tradeoffs between speed and durability
- Know the basics of how the oplog works, including concepts like idempotence and statement-based replication
- Know what happens when a node (primary or not) fails

Replication Subtopics
---------------------

- Introduction
- Nodes: Primary, Secondary, Arbiter, Delayed Secondaries, Hidden Secondaries
- Initiating a Replica Set

  - Initial Sync

- Elections: Votes, Criteria for Winning an Election
- Failover

  - Rollback (DBA only)

- rs.status()
- Replica set reconfiguration
- Oplog: Statement-based replication, Idempotence (DBA Only), Capped Collection (DBA only)
- Read Preference: Primary, Secondary, PrimaryPreferred, SecondaryPreferred, Nearest
- Write Concern: The w parameter, The j parameter


Introduction
------------

Replication is about availability and durability. It is, generally speaking, not for scaling. That would be the purpose of Sharding.

- Videos: 

  - `Replication Concepts <https://university.mongodb.com/videos/y/AYBOd-tpdKo>`_
  - `Replication Overview <https://university.mongodb.com/videos/y/eNFWxRFIbcI>`_
  - `Asynchronous Replication <https://university.mongodb.com/videos/y/3p30vjb-Rx8>`_

- Docs:

  - :manual:`Replication Introduction</core/replication-introduction/>`


Nodes
-----

In the exam, you will be expected to know:

- The options to use when creating a node, such as:
 
  - Arbiter
  - Delayed
  - votes
  - priority

Resources:

- Docs: 

  - :manual:`Replica Set Members</core/replica-set-members/>`
  - :manual:`Delayed Members</core/replica-set-delayed-member/>`
  - :manual:`Hidden Members</core/replica-set-hidden-member/>`
  - :manual:`Non-Voting Members</tutorial/configure-a-non-voting-replica-set-member/>`

- Videos:

  - `Arbiters <https://university.mongodb.com/videos/y/4W0GO2CAu2w>`_
  - `Hidden and Slave Delay <https://university.mongodb.com/videos/y/X1hCBT2UTuo>`_


Initiating a Replica Set
------------------------

For the exam, you should be familiar with:

- How to initiate a replica set (or initiate a single server and add members)
- The initial sync of a secondary

- Video:

  - `Initiating a Replica Set <https://university.mongodb.com/videos/y/EaGhuXPZZbk>`_

- Docs:

  - :manual:`rs.initiate()</reference/method/rs.initiate/#rs.initiate>`
  - :manual:`Initial Sync</core/replica-set-sync/#initial-sync>`


Elections
---------

For the exam, you will need to know:

- Everything that can trigger an election
- How priority, votes, optime, and unreachable servers in the set will affect the election
- Which server will win the election

Resources:

- Docs: 

  - :manual:`Elections</core/replica-set-elections/>`
  - :manual:`Non-voting members</tutorial/configure-a-non-voting-replica-set-member/>`


Failover
--------

For the exam, you will need to know:

- What triggers failover
- That failover triggers an election

Resources:

- Video:

  - `Automatic Failover <https://university.mongodb.com/videos/y/VsnI8uCTG60>`_
  - `Failover Example <https://university.mongodb.com/videos/y/MGoHhWbMDaU>`_

- Docs:

  - :manual:`Replica Set High Availability</core/replica-set-high-availability/>`


Rollback
--------

For the exam, you will need to know:

- What series of events will or won't trigger rollback
- What happens to data that gets rolled back

Resources:

- Video:

  - `Recovery <https://university.mongodb.com/videos/y/TGsnu9RBjzA>`_

- Docs: 

  - :manual:`Rollbacks</core/replica-set-rollbacks/>`


rs.status()
-----------

For the certification exam, you should be able to:

- Read the output of rs.status()
- Know what data is in rs.status()

Resources:

- Video:

  - `Replica Set Status <https://university.mongodb.com/videos/y/QspOQbOShSY>`_

- Docs:

  - :manual:`rs.status() Example</reference/command/replSetGetStatus/#example>`


Replica Set Reconfiguration
---------------------------

For the certification exam, you will need to be able to:

- Add and remove replica set members
- Reconfigure a replica set

Resources:

- Docs: 

  - :manual:`rs.add()</reference/method/rs.add/>`
  - :manual:`rs.remove()</reference/method/rs.remove/>`
  - :manual:`rs.reconfig()</reference/method/rs.reconfig/>`
  - :manual:`Reconfigure a Replica Set</tutorial/reconfigure-replica-set-with-unavailable-members/>`


Oplog
-----

For the certification exam, you will need to:

- Understand the nature of MongoDB's statement-based replication
- Understand why the oplog operations must be idempotent
- Know what operations will be stored in the oplog
- Know that the oplog stores the _id of the document for writes
- Calculate how many oplog entries there may be for a particular write operation (one per document affected)

Resources:

- Video:

  - `Statement Based vs Binary Replication <https://university.mongodb.com/videos/y/yutpUgJMkk4>`_

- Docs

  - :manual:`Replica Set Oplog</core/replica-set-oplog/>`
  - :manual:`Capped Collections</core/capped-collections/>`
  - :manual:`Idempotent (glossary)</reference/glossary/#term-idempotent>`


Read Preference
---------------

For the exam, you should know:

- Which server (or servers) could be queried for every possible read concern (depending on the state of your servers, as well)
- When your read preference allows you to read stale data

Resources:

- Docs:

  - :manual:`Read Preference Reference</reference/read-preference/>`

- Videos:

  - `Introduction to Read Preference <https://university.mongodb.com/videos/y/I62q4cyeSyc>`_
  - `Read Preference Options <https://university.mongodb.com/videos/y/jCEZvexlpj4>`_


Write Concern
-------------

For the exam, you should know:

- The default write concern
- How to set write concern to majority or a fixed number of servers
- How many servers will have copies of the data for a given write concern
- How to ensure writes get to the journal before acknowledgment
- How to amortize write concern on insert using a bulk insert

- Videos: 

  - `Write Concern Principles <https://university.mongodb.com/videos/y/73Jl2woKhNo>`_
  - `Examining the 'w' parameter <https://university.mongodb.com/videos/y/K3N6psPZCD0>`_
  - `Write Concern Use Cases and Patterns <https://university.mongodb.com/videos/y/sSkFhx1jKSs>`_

- Docs:

  - :manual:`Write Concern</core/write-concern/>`
  - :manual:`Write Concern Reference</reference/write-concern/>`


Sample Problems
---------------

1. Given a replica set with five data-bearing members, suppose the primary goes down with operations in its oplog that have been copied from the primary to only one secondary. Assuming no other problems occur, which of the following describes what is most likely to happen?

a. The primary may roll back the operations once it recovers.
b. The secondary with the most current oplog will be elected primary.
c. Missing operations will need to be manually re-performed.
d. The most current secondary will roll back the operations following the election.
e. Reads will be stale until the primary comes back up.

2. Which of the following is true of the mechanics of replication in MongoDB? Check all that apply.

a. Operations on the primary are recorded in a capped collection called the oplog.
b. Members of a replica set may replicate data from any other data-bearing member of the set by default.
c. Clients read from the nearest member of a replica set by default.

3. What read preference should your application use if you want to read from the primary under normal circumstances but allow reads from secondaries when a primary is unavailable?

a. Nearest
b. primary
c. primaryPreferred
d. secondaryPreferred
e. Secondary

4. Using an arbiter allows one to easily ensure an odd number of voters in replica sets. Why is this important? 

a. To add greater redundancy
b. For more efficient backup operations
c. To help in disaster recovery
d. To protect against network partitions
e. To enable certain read preference settings


Answers to Sample Problems
--------------------------

1. b
2. a, b
3. c
4. d

Exercises
---------

- Set up a replica set on your laptop.
- Write data to the primary and see it propagate to the secondary.
- Connect to the mongod on your server with a driver, and look at how throughput changes as you increase your write concern.
- Compare standard vs. bulk insert speed for w = 1, 2, or 3
- Step down your primary
- Create rollback using a primary, a secondary, and an arbiter
