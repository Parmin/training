===========
Aggregation
===========

On the exam, students should be able to:

- Make an analogy between the aggregation pipeline and UNIX pipes
- Specify appropriate Aggregation stages for an aggregation query
- Know the usage of all aggregation operators

Topics
------

- Introduction
- Pipeline behavior
- Stages

  - Top-level operators
  - Query and accumulation operators

- Aggregation Mechanics

  - Pipeline size (in documents)

    - How some stages affect this number

  - Memory limits in the aggregation pipeline
  - allowDiskUse flag

- Explaining aggregation queries


Introduction
------------

The Aggregation Pipeline is MongoDB's answer to SQL's GROUP BY statements. It allows you to combine data from multiple documents in a collection, and perform some basic arithmetic and statistical operations on them.

The Pipeline is in analogy with UNIX pipes. Each stage takes inputs and outputs, but for the Aggregation pipeline, these are documents. You begin with a collection, and filter, transform, and combine documents as you go along. When you are done, you can either view your results, or output them to another collection.

The Aggregation section is emphasized much more heavily in Dev exams than in DBA exams, but you should be familiar with the basic concepts and format of aggregation queries even for the DBA exam.

- Videos:

  - `The Aggregation Pipeline <https://university.mongodb.com/videos/y/AuO8CEkTG6Y>`_

- Docs:

  - :manual:`Aggregation Introduction</core/aggregation-introduction/>`
  - :manual:`Aggregation Pipeline</core/aggregation-pipeline/>`



Aggregation Stages
------------------

For the exam, you will need to know:

- All top-level Aggregation operators (and the stage they correspond to)
- What those stages do
- Whether the stage increases the number of documents you have, decreases them, or leaves them the same

Resources:

- Videos:

  - `Using a document for _id <https://university.mongodb.com/videos/y/zoN4cj_XQzY>`_
  - `Aggregation Expressions <https://university.mongodb.com/videos/y/L4G14MTfTgQ>`_
  - `Using $project <https://university.mongodb.com/videos/y/TbQ2PI5Fib0>`_
  - `Using $match <https://university.mongodb.com/videos/y/7RtHG90Hrbw>`_
  - `Using $text <https://university.mongodb.com/videos/y/LpDSge_GbpI>`_
  - `Using $sort <https://university.mongodb.com/videos/y/HUEtV7omSb8>`_
  - `Using $limit and $skip <https://university.mongodb.com/videos/y/o5hzYKXUyrU>`_
  - `Using $unwind <https://university.mongodb.com/videos/y/E4aYOQPeQvI>`_
  - `Using $out <https://university.mongodb.com/videos/y/b1dfUSrTPto>`_

- Docs:

  - :manual:`Aggregation Pipeline Quick Reference</meta/aggregation-quick-reference/>`


Aggregation Operators
---------------------

For the exam, you will need to know:

- All operators that are used by each stage

  - Note that $match operators are by and large those used for querying ($lt, $in, etc.)
  - Other stages may have unique operators

- How to use $project to change your document schema and rename keys
- Which operators to use to perform typical tasks with the aggregation pipeline

Resources:

- Videos:

  - `Using $sum <https://university.mongodb.com/videos/y/93MSz3uDC1A>`_
  - `Using $avg <https://university.mongodb.com/videos/y/baIDZ-M5j7w>`_
  - `Using $addToSet <https://university.mongodb.com/videos/y/YzURaZnKI9s>`_
  - `Using $push <https://university.mongodb.com/videos/y/LQcBM-g0ACY>`_
  - `Using $max and $min <https://university.mongodb.com/videos/y/BYoNX4trjOQ>`_
  - `Double $group Stages <https://university.mongodb.com/videos/y/EIWF9Oxeb8M>`_
  - `Revisiting $first and $last <https://university.mongodb.com/videos/y/JOdAnxVAMwc>`_

- Docs:

  - :manual:`$match</reference/operator/aggregation/match/#pipe._S_match>`
  - :manual:`$group</reference/operator/aggregation/group/#pipe._S_group>`
  - :manual:`$project</reference/operator/aggregation/project/>`
  - :manual:`Aggregation Pipeline Operators</reference/operator/aggregation/>`



Aggregation Mechanics
---------------------

For the exam, you will need to know:

- Memory limits imposed on the aggregation pipeline's data, and for use in sorting
- Optimizations that are applied to the aggregation pipeline
- When you are able to use indexes for aggregation

Resources:

- Video:

  - `Aggregation Limits <https://university.mongodb.com/videos/y/U_gRSxEq3c0>`_

- Docs:

  - :manual:`Optimizing the Aggregation Pipeline</core/aggregation-pipeline-optimization/>`
  - :manual:`Aggregation Limits</core/aggregation-pipeline-limits/>`
  - :manual:`</core/aggregation-pipeline/#aggregation-pipeline-operators-and-performance>`


Aggregation Options
-------------------

For the exam, you will need to know:

- The aggregation options available
- What the effect of these options will be

Resources:

- Docs:

  - :manual:`db.collection.aggregate()</reference/method/db.collection.aggregate/>`

- Video:

  - `Aggregation Options <https://university.mongodb.com/videos/y/0CGNVacCrY8>`_


Aggregation Examples
--------------------

More than any other section, Aggregation is about practice. Here are some examples to give you some ideas and help you to get started.

For the exam, you will need to know:

- How to construct an aggregation query that will perform the operations you require
- How to use multiple $group and $unwind stages to accomplish more than you could without them

Resources:

- Videos:

  - `Simple Aggregation Example <https://university.mongodb.com/videos/y/DQBXCsjeO5c>`_
  - `Simple Aggregation Expanded <https://university.mongodb.com/videos/y/3lEpnMcfpCs>`_
  - `$unwind Example <https://university.mongodb.com/videos/y/U_4Enh2TTp4>`_
  - `Compound Grouping <https://university.mongodb.com/videos/y/qTbtax_cKcc>`_
  - `Double Unwind <https://university.mongodb.com/videos/y/YXGL27217B8>`_

- Docs: 

  - :manual:`Single Purpose Aggregation Operations</core/single-purpose-aggregation/>`
  - :manual:`Aggregation with Zip Code Data</tutorial/aggregation-zip-code-data-set/>`
  - :manual:`Aggregation with User Preference Data</tutorial/aggregation-with-user-preference-data/>`


Sample Aggregation Problems
---------------------------

1. Which of the following statements are true about the $match pipeline operator? Check all that apply.
a. You should use it as early as possible in the pipeline.
b. It can be used as many times as needed.
c. It has a syntax similar to find() commands.

2. Suppose you have the following collection with only 2 documents:

.. code-block:: javascript

  > db.people.find()
  { "_id" : "apples", "traits" : [ "sweet" , "crispy" ] }
  { "_id" : "oranges", "traits" : [ "sweet" , "orange" , "juicy" ] }

You run an aggregation query and begin with { $unwind : "$traits" }.
How many documents will you have in the pipeline after the $unwind stage?
a. 1
b. 2
c. 3
d. 4
e. 5

Answers
-------

1. a, b, c
2. e

Exercises
---------

- Find or build a data set. Perform an aggregation to see how many documents contain a field within a given range.
- Count all of the elements in an array field, summed accross all documents in the collection.
- Count only the elements in an array field above a certain value.
- Count only the elements in an array field where another field has a certain value.
