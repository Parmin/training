Indexes
-------

On the certification exam, we will attempt to verify that you:

- Understand the types of indexes available in MongoDB
- Know how to determine the efficiency of a query
- Can model queries and indexes for maximum efficiency
- Recognize the implications of specialized index types

  - sparse
  - unique

Indexes Subtopics
-----------------

- Introduction
- Creating Indexes
- Single Field Indexes
- Collection Scans
- Compound Indexes (including using index prefixes)
- Multikey Indexes
- Sorting with Indexes
- The .explain() method (for a cursor & for a collection)
- Selecting an Index
- Covered Queries
- Indexing Strategies
- Effect of Indexes on Read and Write Performance
- Unique Indexes
- Sparse Indexes
- TTL (Time-to-live) Indexes
- Background Index Creation (DBA Only)
- Regex on String Fields and Indexes
- Text Indexes
- 2d and 2dSphere Indexes

Introduction
------------

Good use of indexes is the single greatest determinant of performance on a database -- not just in MongoDB, but in any database. The vast majority of performance-related support tickets at MongoDB are solved with improved use of indexes. Both developers and DBA's need to be aware of what options are available, how to use them, and how to assess their effect on performance.


- Videos:

  - `Introduction to Indexes <https://university.mongodb.com/videos/y/U3iWPF5jP-g>`_

- Docs:

  - :manual:`Index Concepts</core/indexes/>`



Creating Indexes
----------------

Indexes are created either on collection creation (for the unique _id index), or using the db.collection.createIndex() command. The former preferred command was db.collection.ensureIndex, which has been deprecated.

- Videos:

  - `createIndex, getIndexes, dropIndex <https://university.mongodb.com/videos/y/JvXfCHPYKzw>`_
  - `Creating Indexes <https://university.mongodb.com/videos/y/xi2gtzZez6Q>`_

- Docs:

  - :manual:`db.collection.createIndex</reference/method/db.collection.createIndex/>`
  - :manual:`Create an Index</tutorial/create-an-index/>`


Single Field Indexes
--------------------

This can include top-level fields, embedded fields, or embedded documents.

- Docs: 

  - :manual:`Single Field Indexes</core/index-single/>`
  - :manual:`Embedded Fields</core/index-single/#indexes-on-embedded-fields>`
  - :manual:`Embedded Documents</core/index-single/#indexes-on-embedded-documents>`


Collection Scans
----------------

A collection scan occurs when you can't use an index for a query, so you end up scanning the entire collection, one document at a time. This is terribly inefficient for large collections.

- Videos:

  - `Collection scans <https://university.mongodb.com/videos/y/qB6435EGS6w>`_


Compound Indexes
----------------

A compound index is an index on two or more ordered fields. Order (and direction) are important for whether or not an index can be used, whether or not it can be used to sort, and how efficiently it gets used for a particular query.

- Docs:

  - :manual:`Compound Indexes</core/index-compound/>`


Multikey Indexes
----------------

A multikey index is an index on an array. You will have one index entry per array element.

- Docs:

  - :manual:`Multikey Indexes</core/index-multikey/>`

Videos:

  - `Multikey Indexes (video) <https://university.mongodb.com/videos/y/_NGwn_X82Dw>`_
  - `Dot Notation and Multikey <https://university.mongodb.com/videos/y/wT0_ktAZbBg>`_


Sorting with Indexes
--------------------

You'll notice that the index creation document looks a lot like a sorting document. This isn't an accident. The index is ordered just like the sort result query, and if you've built your index correctly, you can use it to avoid sorting the result set of a query.

Docs:

  - :manual:`Use Indexes to Sort Query Results</tutorial/sort-results-with-indexes/>`


The .explain() Methods
----------------------

The .explain() method can be run on a cursor, or on a collection, to show the user index usage and performance for that query. There are several verbosities to choose from, depending on use case.

- Videos:

  - `Explain Plans <https://university.mongodb.com/videos/y/rRsYWCO3ndY>`_
  - `Using Explain <https://university.mongodb.com/videos/y/liXIn8CnJaI>`_
  - `Explain Verbosity <https://university.mongodb.com/videos/y/WxXVun6bZ20>`_

- Docs:

  - :manual:`cursor.explain()</reference/method/cursor.explain/>`
  - :manual:`db.collection.explain()</reference/method/db.collection.explain/>`
  - :manual:`Explain Results</reference/explain-results/>`


Selecting an Index
------------------

MongoDB chooses its indexes using its Query Optimizer, which infrequently runs the query against all candidate indexes to determine which is fastest.

- Videos:

  - `Choosing an Index <https://university.mongodb.com/videos/y/JyQlxDc549c>`_
  - `Efficiency of Index Use <https://university.mongodb.com/videos/y/JJmIf0pn100>`_

- Docs:

  - :manual:`Query Plans</core/query-plans/>`


Covered Queries
---------------

- Video: 

  - `Covered Queries <https://university.mongodb.com/videos/y/npFBnPAkDUk>`_

- Docs:

  - :manual:`Covered Query</core/query-optimization/#covered-query>`


Indexing Strategies
-------------------

There are right ways to use indexes, and wrong ways. Here, we talk about some best practices.

- Docs: 

  - :manual:`Indexing Strategies</applications/indexes/>`
  - :manual:`Optimize Query Performance</tutorial/optimize-query-performance-with-indexes-and-projections/>`
  - :manual:`Indexes FAQ</faq/indexes/>`
  - :manual:`Query Optimization</core/query-optimization/>`

- Videos:

  - `Efficiency of Index Use 2 <https://university.mongodb.com/videos/y/g032EW67SRA >`_
  - `Index Notes <https://university.mongodb.com/videos/y/OyXFYhLXTGk>`_


Effect of Indexes on Write Performance
--------------------------------------

Indexes generally speed up read performance, but can slow down write performance. Find queries are almost always faster, and inserts are almost always slower, but hybrid actions (with a find & a write) such as update and remove, may depend on the use case (though they usually are faster with indexes). Be aware of the advantages and drawbacks.

- Docs:

  - :manual:`Write Operation Performance</core/write-performance/#indexes>`

- Video:

  - `Read & Write Impact of Indexes <https://university.mongodb.com/videos/y/wcprB2adSe0>`_


Unique Indexes
--------------

Unique indexes cause the database to enforce uniqueness on a collection level.

- Video:

  - `Index Creation Options, Unique <https://university.mongodb.com/videos/y/D-Ra5TEaaL4>`_

- Docs:

  - :manual:`Creating a Unique Index</tutorial/create-a-unique-index/>`
  - :manual:`Unique Indexes</core/index-unique/>`


Sparse Indexes
--------------

Sparse indexes lack entries when a document lacks the indexed fields. They're smaller, and have fewer entries, but they can sometimes be ignored by the system, as they may lead to incorrect results in some cases.

- Video:

  - `Sparse Indexes Video <https://university.mongodb.com/videos/y/ZznHByqtTMA>`_

- Docs:

  - :manual:`Sparse Indexes</core/index-sparse/>`

TTL Indexes
-----------

TTL (Time-to-Live) indexes expire after a certain time has passed, and are auto-deleted by the server.

- Video:

  - `TTL Indexes <https://university.mongodb.com/videos/y/hu0gsu5O0Rs>`_

- Docs:

  - :manual:`Indexes, TTL</core/index-ttl/>`


Background Index Creation
-------------------------

Background index creation turns index creation into a non-blocking operation, but also slows down index creation.

- Video: 

  - `Background Index Creation <https://university.mongodb.com/videos/y/rI2Hnqp8BN4>`_

- Docs:

  - :manual:`Build Indexes in the Background</tutorial/build-indexes-in-the-background/>`


Regex on String Fields and Indexes
----------------------------------

- Docs: Index Use in Regex_

.. _Index Use in Regex: http://docs.mongodb.org/manual/reference/operator/query/regex/#index-use

Text Indexes
------------

- Video:

  - `Text Indexes in MongoDB <https://university.mongodb.com/videos/y/UlleLqZQYVo>`_

- Docs: 

  - :manual:`Text Indexes</core/index-text/>`
  - :manual:`Create a Text Index</tutorial/create-text-index-on-multiple-fields/>`
  - :manual:`Text Search Tutorials</administration/indexes-text/>`


2d and 2dSphere Indexes
-----------------------

2D Indexes are for flat geometries, like you might create in a video game, or in a small area. For locations on the earth, use a 2dSphere index.

- Video:

  - `Geospatial Indexes <https://university.mongodb.com/videos/y/zoGcMsjGMo4>`_

- Docs:

  - :manual:`Geospatial Indexes and Queries</applications/geospatial-indexes/>`
  - :manual:`2d Indexes</core/2d/>`
  - :manual:`Create a 2d Index</tutorial/build-a-2d-index/>`
  - :manual:`Query a 2d Index</tutorial/query-a-2d-index/>`
  - :manual:`2dsphere Indexes</core/2dsphere/>`
  - :manual:`Create a 2dsphere Index</tutorial/build-a-2dsphere-index/>`
  - :manual:`Query a 2dsphere Index</tutorial/query-a-2dsphere-index/>`
  - :manual:`Calculate Distance using Spherical Geometry</tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes/>`


Sample Problems
---------------

1. Given the following example document:

{
      "_id": ObjectId("5360c0a0a655a60674680bbe"),
        "user": {
                "login": "ir0n",
                    "description": "Made of steel"
                        "date": ISODate("2014-04-30T09:16:45.836Z"),
                          }
}
with the following index creation command:

db.users.createIndex( { "user.login": 1, "user.date": -1 }, "myIndex" )
When performing the following query:

db.users.find( { "user.login": /^ir.*/ }, { "user":1, "_id":0 } ).sort( { "user.date":1 } )
Which of the following statements correctly describe how MongoDB will handle the query? Check all that apply.

a. As a covered query using "myIndex" because we are filtering out "_id" and only returning "user.login"
b. As an indexed query using "myIndex" because field "user.login" is indexed
c. As an optimized sort query (scanAndOrder = false) using "myIndex" because we are sorting on an indexed field
d. MongoDB will need to do a table/collection scan to find matching documents
e. None of the above

2. You perform the following query on the sayings collection, which has the index { quote : â€œtextâ€ }:

db.sayings.find( { $text : { $search : "fact find" } } )
Assuming the following documents are in the collection, which ones will the query return? Check all that apply.

a. { _id : 1, quote : “That’s a fact, Jack.” } 
b. { _id : 2, quote : “Find out if that fact is correct.” }
c. { _id : 3, quote : “Nobody will ever catch me.” }

3. You have the following index on the toys collection:

{ 
   "manufacturer" : 1,
   "name" : 1,
   "date" : -1
}

Which of the following is able to use the index for the query? Check all that apply.

a. db.toys.find( { manufacturer : "Matteo", name : "Barbara", date : "2014-07-02" } )
b. db.toys.find( { name : "Big Rig Truck", date : "2013-02-01", manufacturer : "Tanko" } )
c. db.toys.find( { date : "2015-03-01", manufacturer : "Loggo", name : "Brick Set" } )

4. Adding an index on { a : 1 } can potentially decrease the speed of which of the following operations? Check all that apply.

a. db.collection.find( { a : 232 } )
b. db.collection.update( { b : 456 }, { $inc : { a : 1 } } )
c. db.collection.insert( { a : 341 } )

5. 
You have the following indexes on the things collection:

[
  {
    "v" : 1,
    "key" : {
      "_id" : 1
    },
    "name" : "_id_",
    "ns" : "test.things"
  },
  {
    "v" : 1,
    "key" : {
      "a" : 1
    },
    "name" : "a_1",
    "ns" : "test.things"
  },
  {
    "v" : 1,
    "key" : {
      "c" : 1,
      "b" : 1,
      "a" : 1
    },
    "name" : "c_1_b_1_a_1",
    "ns" : "test.things"
  }
]

Which of the following queries will require that you load every document into RAM in order to fulfill the query? Assume that no data is being written during the query. Check all that apply.

a. db.things.find( { b : 1 } ).sort( { c : 1, a : 1 } )
b. db.things.find( { c : 1 } ).sort( { a : 1, b : 1 } )
c. db.things.find( { a : 1 } ).sort( { b : 1, c : 1 } )


Answers to Sample Problems
--------------------------
1. b
2. a, b
3. a, b, c
4. b, c
5. a
