Indexes
-------

On the certification exam, we will verify that you:

- Understand the types of indexes available in MongoDB

  - Single Field Indexes
  - Compound Indexes
  - Multikey Indexes
  - Special Indexes

    - Geo Indexes
    - Text Indexes

- Know the options you can have for an index

  - TTL
  - Sparse
  - Unique

- Know how to improve the efficiency of a query using indexes
- Understand the write performance costs of indexes


Introduction
------------

The following provide a basic introduction to indexes.

- Videos:

  - `Introduction to Indexes <https://university.mongodb.com/videos/y/U3iWPF5jP-g>`_

- Docs:

  - :manual:`Index Concepts</core/indexes/>`


Creating Indexes
----------------

On the exam, we will ensure that you:

- Know how to create an index
- Know that the _id field is created implicitly if you do not supply one

- Videos:

  - `createIndex, getIndexes, dropIndex <https://university.mongodb.com/videos/y/JvXfCHPYKzw>`_
  - `Creating Indexes <https://university.mongodb.com/videos/y/xi2gtzZez6Q>`_

- Docs:

  - :manual:`db.collection.createIndex</reference/method/db.collection.createIndex/>`
  - :manual:`Create an Index</tutorial/create-an-index/>`


Single Field Indexes
--------------------

For the exam, you should be able to:

- Recognize single-field indexes
- Know when a single-field index is used (and when it is not)

  - for .find() queries
  - for .update() queries
  - for .remove() queries

- Know how to create a single-field index on a field in a subdocument

Here are some resources to help:

- Docs:

  - :manual:`Single Field Indexes</core/index-single/>`
  - :manual:`Embedded Fields</core/index-single/#indexes-on-embedded-fields>`
  - :manual:`Embedded Documents</core/index-single/#indexes-on-embedded-documents>`


Collection Scans
----------------

For the exam, you should know:

- That a "collection scan" happens when every document in the collection must be checked in order to determine the result set of a query
- Whether a collection scan will occur, given a query and list of available indexes
- Why a collection scan is undesirable

- Videos:

  - `Collection scans <https://university.mongodb.com/videos/y/qB6435EGS6w>`_


Compound Indexes
----------------

On the exam, you should know:

- What a compound index is
- How to use a prefix of a compound index to satisfy queries

- Docs:

  - :manual:`Compound Indexes</core/index-compound/>`


Multikey Indexes
----------------

On the exam, you should know:

- How to distinguish multikey indexes from other index types
- Restrictions on multikey indexes
- How many index keys will be created for a particular document in a multikey index

A multikey index is an index on an array field. The index will contain one key per array element.

- Docs:

  - :manual:`Multikey Indexes</core/index-multikey/>`

Videos:

  - `Multikey Indexes (video) <https://university.mongodb.com/videos/y/_NGwn_X82Dw>`_
  - `Dot Notation and Multikey <https://university.mongodb.com/videos/y/wT0_ktAZbBg>`_


Sorting with Indexes
--------------------

For the exam, you will need to know:

- How to sort with an index
- How to use a compound index to both filter and sort
- How to perform a compound sort using a compound index
- When an index will or will not work for a compound sort

Docs:

  - :manual:`Use Indexes to Sort Query Results</tutorial/sort-results-with-indexes/>`


The .explain() Methods
----------------------

For the exam, you should know:

- How to create an Explainable object with db.collection.explain() and use it to explain a cursor
- How to explain a cursor with cursor.explain()
- The three verbosity settings of explain plans, and what they offer.
- How to read each type of explain plan to determine things such as:

  - How many documents were returned by the query
  - How many documents were read by the query
  - How many index entries were viewed by the query
  - Which index was used by the query
  - When a collection scan occurs
  - How many index entries were viewed during the query
  - Which shards were involved in the query for a sharded collection
  - How to recognize that a query is covered
  - Whether or not an index was used to sort the query
  - How long the query took (or was estimated to take)
  - Which types of queries can use an index (.find(), .update(), .remove())

Here are some resources:

- Videos:

  - `Explain Plans <https://university.mongodb.com/videos/y/rRsYWCO3ndY>`_
  - `Using Explain <https://university.mongodb.com/videos/y/liXIn8CnJaI>`_
  - `Explain Verbosity <https://university.mongodb.com/videos/y/WxXVun6bZ20>`_

- Docs:

  - :manual:`cursor.explain()</reference/method/cursor.explain/>`
  - :manual:`db.collection.explain()</reference/method/db.collection.explain/>`
  - :manual:`Explain Results</reference/explain-results/>`


Selecting an Index
------------------

For the exam, you should know:

- How an index is chosen when multiple indexes may work
- When the query optimizer is re-run
- How to force a particular index to be used for a query

  - Dangers of hinting an index

- Videos:

  - `Choosing an Index <https://university.mongodb.com/videos/y/JyQlxDc549c>`_
  - `Efficiency of Index Use <https://university.mongodb.com/videos/y/JJmIf0pn100>`_

- Docs:

  - :manual:`Query Plans</core/query-plans/>`
  - :manual:`.hint()</reference/method/cursor.hint/>`


Covered Queries
---------------

For the exam, you will need to understand:

- Covered queries
- Why covered queries are good for performance
- How to recognize that a covered query has happened in an explain plan

- Video:

  - `Covered Queries <https://university.mongodb.com/videos/y/npFBnPAkDUk>`_

- Docs:

  - :manual:`Covered Query</core/query-optimization/#covered-query>`


Indexing Strategies
-------------------

For the exam, you should know:

- How to create an index that supports a query that sorts on one field, queries for an exact match on a second field, and does a range query on a third field
- When an index can be used to sort for a particular query
- How selective queries are and how much they are likely to benefit from an index

Resources:

- Docs:

  - :manual:`Indexing Strategies</applications/indexes/>`
  - :manual:`Optimize Query Performance</tutorial/optimize-query-performance-with-indexes-and-projections/>`
  - :manual:`Indexes FAQ</faq/indexes/>`
  - :manual:`Query Optimization</core/query-optimization/>`

- Videos:

  - `Efficiency of Index Use 2 <https://university.mongodb.com/videos/y/g032EW67SRA>`_
  - `Index Notes <https://university.mongodb.com/videos/y/OyXFYhLXTGk>`_


Effect of Indexes on Write Performance
--------------------------------------

Indexes generally speed up read performance, but can slow down write performance. Hybrid actions (e.g., with a find and a write) such as update and remove, may depend on the use case (though they usually are faster with indexes).

For the exam, you will want to know:

- Why indexes can slow down write operations
- Why document growth is a problem in MMAPv1 for indexes
- Why update and delete operations can either benefit or suffer in performance due to indexes (but usually benefit)

Resources:

- Docs:

  - :manual:`Write Operation Performance</core/write-performance/#indexes>`

- Video:

  - `Read & Write Impact of Indexes <https://university.mongodb.com/videos/y/wcprB2adSe0>`_


Unique Indexes
--------------

For the exam, you should know:

- How to create a unique index
- How to recognize a unique index from the db.collection.getIndexes() command
- What happens when you try to insert a document with a value that matches an existing document for a unique indexed field
- How unique compound indexes work
- What happens if you try to create a unique index on a collection that already contains documents with non-unique values for the unique field(s)

Resources:

- Video:

  - `Index Creation Options, Unique <https://university.mongodb.com/videos/y/D-Ra5TEaaL4>`_

- Docs:

  - :manual:`Creating a Unique Index</tutorial/create-a-unique-index/>`
  - :manual:`Unique Indexes</core/index-unique/>`


Sparse Indexes
--------------

For the exam, you should know:

- How to create a sparse index
- How many index keys you will have for a sparse index on a small collection
- When a sparse index would not automatically be used (ie, for sorting)
- Dangers of using .hint() with a sparse index

Resources:

- Video:

  - `Sparse Indexes Video <https://university.mongodb.com/videos/y/ZznHByqtTMA>`_

- Docs:

  - :manual:`Sparse Indexes</core/index-sparse/>`


TTL Indexes
-----------

For the exam, you should know:

- How to create a TTL index
- How to recognize a TTL index in the output of db.collection.getIndexes()

  - And recognize the time before deletion occurs

- Know when deletion of documents will definitely not occur, and when it may occur

Resources:

- Video:

  - `TTL Indexes <https://university.mongodb.com/videos/y/hu0gsu5O0Rs>`_

- Docs:

  - :manual:`Indexes, TTL</core/index-ttl/>`


Background Index Creation
-------------------------

For the exam, you will need to know:

- How to create background indexes
- What operations can occur if an index is created in the background rather than foreground
- How the time required to build a background index differs from the time required to build an index in the foreground
- How using a background index will differ from using an index built in the foreground (hint: you use them the same way)

Resources:

- Video:

  - `Background Index Creation <https://university.mongodb.com/videos/y/rI2Hnqp8BN4>`_

- Docs:

  - :manual:`Build Indexes in the Background</tutorial/build-indexes-in-the-background/>`
  - :manual:`Background Index Creation</core/index-creation/#index-creation-background>`


Regex on String Fields and Indexes
----------------------------------

For the exam, you will need to know:

- How standard indexes behave with strings fields (as compared to text indexes)
- How to use indexes most efficiently by anchoring the regex on the left

Resources:

- :manual:`Index Use in Regex</reference/operator/query/regex/#index-use>`


Text Indexes
------------

For the exam, you will need to know:

- How to build a text index
- How to use a text index to query
- How to sort results by text score

Resources:

- Video:

  - `Text Indexes in MongoDB <https://university.mongodb.com/videos/y/UlleLqZQYVo>`_

- Docs:

  - :manual:`Text Indexes</core/index-text/>`
  - :manual:`Create a Text Index</tutorial/create-text-index-on-multiple-fields/>`
  - :manual:`Text Search Tutorials</administration/indexes-text/>`


2d and 2dSphere Indexes
-----------------------

For the exam, you will need to know:

- How to create 2dsphere indexes
- How to create geoJSON points for a 2dsphere indexed field in MongoDB
- How to query for geoJSON points:

  - Within a circle
  - Near a point
  - Within a polygon

Resources:

- Video:

  - `Geospatial Indexes <https://university.mongodb.com/videos/y/zoGcMsjGMo4>`_

- Docs:

  - :manual:`Geospatial Indexes and Queries</applications/geospatial-indexes/>`
  - :manual:`2d Indexes</core/2d/>`
  - :manual:`Create a 2d Index</tutorial/build-a-2d-index/>`
  - :manual:`Query a 2d Index</tutorial/query-a-2d-index/>`
  - :manual:`2dsphere Indexes</core/2dsphere/>`
  - :manual:`Create a 2dsphere Index</tutorial/build-a-2dsphere-index/>`
  - :manual:`Query a 2dsphere Index</tutorial/query-a-2dsphere-index/>`
  - :manual:`Calculate Distance using Spherical Geometry</tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes/>`


Sample Problems
---------------

1. Consider the following example document:

   .. code-block:: javascript

      {
        "_id": ObjectId("5360c0a0a655a60674680bbe"),
        "user": {
                  "login": "ir0n",
                  "description": "Made of steel"
                  "date": ISODate("2014-04-30T09:16:45.836Z"),
                }
      }

   and index creation command:

   .. code-block:: javascript

      db.users.createIndex( { "user.login": 1, "user.date": -1 }, "myIndex" )

   When performing the following query:

   .. code-block:: javascript

      db.users.find( { "user.login": /^ir.*/ },
                     { "user":1, "_id":0 } ).sort( { "user.date":1 } )

   which of the following statements correctly describe how MongoDB will handle the query? Check all that apply.

   a. As a covered query using "myIndex" because we are filtering out "_id" and only returning "user.login"
   b. As an indexed query using "myIndex" because field "user.login" is indexed
   c. As an optimized sort query (scanAndOrder = false) using "myIndex" because we are sorting on an indexed field
   d. MongoDB will need to do a table/collection scan to find matching documents
   e. None of the above


2. You perform the following query on the sayings collection, which has the index

   .. code-block:: javascript

      { quote : "text" }:

   Assuming the documents below are in the collection, which ones will the following query return? Check all that apply.

   .. code-block:: javascript

      db.sayings.find( { $text : { $search : "fact find" } } )


   a. { _id : 1, quote : “That’s a fact, Jack.” }
   b. { _id : 2, quote : “Find out if that fact is correct.” }
   c. { _id : 3, quote : “Nobody will ever catch me.” }


3. You have the following index on the toys collection:

   .. code-block:: javascript

      {
        "manufacturer" : 1,
        "name" : 1,
        "date" : -1
      }

   Which of the following is able to use the index for the query? Check all that apply.

   a. db.toys.find( { manufacturer : "Matteo", name : "Barbara", date : "2014-07-02" } )
   b. db.toys.find( { name : "Big Rig Truck", date : "2013-02-01", manufacturer : "Tanko" } )
   c. db.toys.find( { date : "2015-03-01", manufacturer : "Loggo", name : "Brick Set" } )


4. Adding the index { a : 1 } can potentially decrease the speed of which of the following operations? Check all that apply.

   a. db.collection.find( { a : 232 } )
   b. db.collection.update( { b : 456 }, { $inc : { a : 1 } } )
   c. db.collection.insert( { a : 341 } )


5. You have the following indexes on the things collection:

   .. code-block:: javascript

       [
         {
           "v" : 1,
           "key" : {
             "_id" : 1
           },
           "name" : "_id_",
           "ns" : "test.things"
         },
         {
           "v" : 1,
           "key" : {
             "a" : 1
           },
           "name" : "a_1",
           "ns" : "test.things"
         },
         {
           "v" : 1,
           "key" : {
             "c" : 1,
             "b" : 1,
             "a" : 1
           },
           "name" : "c_1_b_1_a_1",
           "ns" : "test.things"
         }
       ]

   Which of the following queries will require that you load every document into RAM in order to fulfill the query? Assume that no data is being written during the query. Check all that apply.

   a. db.things.find( { b : 1 } ).sort( { c : 1, a : 1 } )
   b. db.things.find( { c : 1 } ).sort( { a : 1, b : 1 } )
   c. db.things.find( { a : 1 } ).sort( { b : 1, c : 1 } )


Answers to Sample Problems
--------------------------

1. b
2. a, b
3. a, b, c
4. b, c
5. a


Exercises
---------

On your own, do the following:

- Create:

  - A single-field index
  - A compound index
  - A text index
  - A single-field index on a string field
  - A 2dsphere index
  - A ttl index
  - A unique index
  - A background index

- For each of the above, notice how they are distinguished in db.collection.getIndexes() output.
- Insert some data for the indexes you created. Perform queries for each of the indexes.
- For a TTL index, write a script to insert 1 document per second. Look at when documents get deleted.
- Get explain plans for these queries. Use all 3 verbosities.
- Explain a covered query & verify that it's working (you'll see 0 documents viewed, though some index entries will be viewed).
- Perform some geospatial queries and look at the results.
