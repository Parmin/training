====
CRUD
====

On the certification exam, we will attempt to verify that you:

- Understand all CRUD operations for manipulating documents
- Know all CRUD operators and how to use them
- Understand the properties of the _id field and its implications for CRUD operations
- Can use regex to find string documents

CRUD Subtopics
--------------

- Create
- Read: matching, regex, projecting, sorting, operators, cursors
- Update: Standard update, Multi update, upsert, save
- Delete

Overview
--------

For the exam, we won't expect you to have operators memorized, but you should be able to recognize the correct operator for the job when you see it, either in the question portion, or the answer portion. 

You should also be able to recognize correct query format, to know which parameters are necessary and which are optional, and how to use the optional parameters.

Be aware of what will happen if you don't sort, and know the difference between sorting forwards and backwards.

Create
------

Create covers the creation of documents.

For the exam, you should be able to:

  - Properly use the insert, save, update, and findAndModify queries to create new documents
  - Match an insertion query with a description of what it does
  - Understand the _id field and the implications this has for insertion operations

Document creation can occur through a few commands:

- db.collection.insert()

  - :manual:`Documentation</reference/method/db.collection.insert/>`
  - Written tutorial_
  - `Lesson video <https://university.mongodb.com/videos/y/qqfVxGLIrLg>`_

.. _Documentation: http://docs.mongodb.org/manual/reference/method/db.collection.insert/
.. _Written tutorial: http://docs.mongodb.org/manual/tutorial/insert-documents/
.. _Lesson video: https://university.mongodb.com/videos/y/qqfVxGLIrLg

- db.collection.save()
  - This can insert if the _id is not included, or the _id doesn't match any documents.
  - Documentation_.
  - Lesson video_.

.. _Documentation: http://docs.mongodb.org/manual/reference/method/db.collection.save/
.. _Lesson video: https://university.mongodb.com/videos/y/fWLiwAC-Q20

- db.collection.update()
  - can insert if it's an "upsert" that doesn't match the query.
  - Documentation_ (only an insert if upsert: true is set)
  - Upsert lesson video_ 

.. _Documentation: http://docs.mongodb.org/manual/reference/method/db.collection.update/
.. _Upsert lesson video: https://university.mongodb.com/videos/y/Dy2p8k3EZs4

- db.collection.findAndModify
  - only if updating, and upsert : true is set
  - Documentation here_

.. _Documentation here: http://docs.mongodb.org/manual/reference/method/db.collection.findAndModify/

Most questions about document creation will involve insert, and it won't be a large part of the exam, because insertion is generally quite straightforward: you give a document that you want, and it gets inserted.

Things can be a bit more complicated for an upsert, however. Here, the "find" document can contribute fields to the document that gets created.

Here's an example:

.. code-block:: javascript

  > db.foo.update( { a : 5, b : { $lte : 7 } }, { $set : { c : 8 } }, { upsert : true } )
  WriteResult({
      "nMatched" : 0,
      "nUpserted" : 1,
      "nModified" : 0,
      "_id" : ObjectId("55b0200e5ef34083de46367e")
  })
  > db.foo.find()
  { "_id" : ObjectId("55b0200e5ef34083de46367e"), "a" : 5, "c" : 8 }

The value, c : 8, was set because the upsert instructed that it be set. The a : 5 was also set, because it was part of the query. The value of b couldn't be determined from the query, so it was not set. Finally, an ObjectId was assigned to the _id field.

You should also be familiar with the special properties of the _id field:

- Documentation here_
- Lesson video on using documents for _id here_

.. _Documentation here: http://docs.mongodb.org/manual/core/document/#the-id-field
.. _Lesson video on using documents for _id here: https://university.mongodb.com/videos/y/zoN4cj_XQzY

Read
----

In mongodb, documents are read using either the db.collection.find() method, or the db.collection.findAndModify() method. You should be familiar with both, but the .find() method is emphasized (partly because findAndModify returns at most one document).

For the exam, you should be able to:

- Understand how to use the optional matching, projection, and options documents
- Be able to sort
- Demonstrate an understanding of all match and projection operators
- Be able to read and interpret regex
- Understand how find() queries work with arrays

In MongoDB, reading data is carried out with the following methods:

db.collection.find()

- Documentation_
- Lessons:
  - introduction_
  - query by matching_
  - operators:
    - $lt and $gt_
    - string inequalities_
    - regex, $exists, $type_
    - $or_
    - $and_
  - arrays:
    - querying inside arrays_
    - $in and $all_
    - dot notation_

- Tutorial_

.. _Documentation here: http://docs.mongodb.org/manual/reference/method/db.collection.find/
.. _introduction: https://university.mongodb.com/videos/y/8kKfFK6a0Ak
.. _query by matching: https://university.mongodb.com/videos/y/UIg86QjSoyY
.. _$lt and $gt: https://university.mongodb.com/videos/y/FHLrz4VGzkg
.. _string inequalities: https://university.mongodb.com/videos/y/imCCKOevU3c
.. _regex, $exists, $type: https://university.mongodb.com/videos/y/lI-jhqYf1JY
.. _$or: https://university.mongodb.com/videos/y/BW5ElNCRZps
.. _$and: https://university.mongodb.com/videos/y/hYk7pjgjjzc
.. _querying inside arrays: https://university.mongodb.com/videos/y/jvEqwW75Bus
.. _$in and $all: https://university.mongodb.com/videos/y/QU2NrkviORE
.. _dot notation: https://university.mongodb.com/videos/y/NrjFECIfwqk
.. _Tutorial: http://docs.mongodb.org/manual/tutorial/query-documents/

Keep in mind, a find() query will return a cursor:

- Cursor documentation_
- Cursor tutorial_
- Cursor lesson_

.. _Cursor documentation: http://docs.mongodb.org/manual/core/cursors/
.. _Cursor lesson: https://university.mongodb.com/videos/y/3jA6iFSEJOI
.. _Cursor tutorial: http://docs.mongodb.org/manual/tutorial/iterate-a-cursor/

- There are other collection read methods that will not return cursors, but which should be considered:
- db.collection.count()
  - count documentation_
  - count lesson_
- db.collection.distinct()
  - distinct documentation_

.. _count documentation: http://docs.mongodb.org/manual/reference/method/db.collection.count/
.. _count lesson: https://university.mongodb.com/videos/y/eKD5bVmNQMI
.. _distinct documentation: http://docs.mongodb.org/manual/reference/method/db.collection.distinct/

There are other methods that can be applied to cursors themselves. These can return a number (like count), or they can modify the result set you're going to get back (such as sort, skip, and limit). You may also be expected to know how to manually iterate a cursor.

- List of cursor methods_ 
- cursor.count()
  - Works like collection.count()
  - Count documentation_
  - Count lesson_
- cursor.sort()
  - Sort documentation_
  - Lesson on sort, skip, and limit_
  - Second lesson on sorting_
- cursor.skip()
  - Skip documentation_
  - Lesson on sort, skip, and limit_
- cursor.limit()
  - Limit documentation_
  - Lesson on sort, skip, and limit_
- cursor.next()
  - Next documentation_
  - The lesson on cursors, above, reproduced here_, also shows how to do this

.. _List of cursor methods: http://docs.mongodb.org/manual/reference/method/js-cursor/
.. _Count lesson: https://university.mongodb.com/videos/y/eKD5bVmNQMI
.. _Count documentation: http://docs.mongodb.org/manual/reference/method/cursor.count/
.. _Sort documentation: http://docs.mongodb.org/manual/reference/method/cursor.sort/
.. _Lesson on sort, skip, and limit: https://university.mongodb.com/videos/y/BsmQ4SNCikc
.. _Second lesson on sorting: https://university.mongodb.com/videos/y/hwUg8r7a-d8
.. _Skip documentation: http://docs.mongodb.org/manual/reference/method/cursor.skip/
.. _Limit documentation: http://docs.mongodb.org/manual/reference/method/cursor.limit/
.. _Next documentation: http://docs.mongodb.org/manual/tutorial/iterate-a-cursor/
.. _reproduced here: https://university.mongodb.com/videos/y/3jA6iFSEJOI

You can also project your results in order to limit the fields you get back.

- projection
  - Documentation_
  - from .find() documentation_
  - Lesson_

.. _Documentation: http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/
.. _from .find() documentation: http://docs.mongodb.org/manual/reference/method/db.collection.find/
.. _Lesson: https://university.mongodb.com/videos/y/8zlMXX70KEw

Update
------

Updates modify existing documents.

For the exam, you should be able to:

  - Properly use the save, update, and findAndModify queries to mutate existing documents
  - Understand which parameter finds the documents to change and which mutates them, and how
  - Understand the behavior of all update operators

Updates can occur with a few collection methods, some of which were in the insert section:

- db.collection.save()
  - This will update if the _id is specified and it matches an existing document.
  - Documentation_.
  - Lesson video_.

.. _Documentation: http://docs.mongodb.org/manual/reference/method/db.collection.save/
.. _Lesson video: https://university.mongodb.com/videos/y/fWLiwAC-Q20

- db.collection.findAndModify
  - unless updating, and upsert : true is set
  - Documentation here_

.. _Documentation here: http://docs.mongodb.org/manual/reference/method/db.collection.findAndModify/

- db.collection.update()
  - This will update unless upsert: true is specified and the query matches no documents.
  - Documentation_
  - Update tutorial_
  - With no operators specified in the update parameter, there will be a wholesale update
    - Wholesale update lesson video_
  - Operators
    - $set (modify a field)
      - $set lesson video_
      - $set documentation_
    - $unset (remove a field)
      - $unset lesson video_
      - $unset documentation_
    - $rename
      - $rename documentation_
    - $setOnInsert
      - $setOnInsert documentation_
    - $inc
      - $inc documentation_
    - $mul
      - $mul documentation_
    - $min and $max
      - $min documentation_
      - $max documentation_
    - Array operators
      - Array operators lesson video_
      - Positional $ documentation_
      - $addToSet documentation_
      - $pop documentation_
      - $pull documentation_
      - $pullAll documentation_
      - $push documentation_
        - There are additional modifiers if you use $push (and sometimes $addToSet)
        - $each documentation_
        - $slice documentation_
        - $sort documentation_
        - $position documentation_
  - Upserts
    - Upsert lesson video_
  - Multi updates
    - Multi update lesson video_


.. _Documentation: http://docs.mongodb.org/manual/reference/method/db.collection.update/
.. _Update tutorial: http://docs.mongodb.org/manual/tutorial/modify-documents/
.. _Wholesale update lesson video: https://university.mongodb.com/videos/y/g7Fi1xXsuvU
.. _$set lesson video: https://university.mongodb.com/videos/y/XyhNjs2pNVc
.. _$set documentation: http://docs.mongodb.org/manual/reference/operator/update/set/#up._S_set
.. _$unset lesson video: https://university.mongodb.com/videos/y/LpErz8jLW0I
.. _$unset documentation: http://docs.mongodb.org/manual/reference/operator/update/unset/#up._S_unset
.. _$rename documentation: http://docs.mongodb.org/manual/reference/operator/update/rename/#up._S_rename
.. _$setOnInsert documentation: http://docs.mongodb.org/manual/reference/operator/update/setOnInsert/#up._S_setOnInsert
.. _$inc documentation: http://docs.mongodb.org/manual/reference/operator/update/inc/#up._S_inc
.. _$mul documentation: http://docs.mongodb.org/manual/reference/operator/update/mul/#up._S_mul
.. _$min documentation: http://docs.mongodb.org/manual/reference/operator/update/min/#up._S_min
.. _$max documentation: http://docs.mongodb.org/manual/reference/operator/update/max/#up._S_max
.. _Array operators lesson video: https://university.mongodb.com/videos/y/GOn0EWKDQoY
.. _Positional $ documentation: http://docs.mongodb.org/manual/reference/operator/update/positional/#up._S_
.. _$addToSet documentation: http://docs.mongodb.org/manual/reference/operator/update/addToSet/#up._S_addToSet
.. _$each documentation: http://docs.mongodb.org/manual/reference/operator/update/each/#up._S_each
.. _$slice documentation: http://docs.mongodb.org/manual/reference/operator/update/slice/#up._S_slice
.. _$pop documentation: http://docs.mongodb.org/manual/reference/operator/update/pop/#up._S_pop
.. _$pull documentation: http://docs.mongodb.org/manual/reference/operator/update/pull/#up._S_pull
.. _$pullAll documentation: http://docs.mongodb.org/manual/reference/operator/update/pullAll/#up._S_pullAll
.. _$push documentation: http://docs.mongodb.org/manual/reference/operator/update/push/#up._S_push
.. _$sort documentation: http://docs.mongodb.org/manual/reference/operator/update/sort/#up._S_sort
.. _$position documentation: http://docs.mongodb.org/manual/reference/operator/update/position/#up._S_position
.. _$pushAll documentation: http://docs.mongodb.org/manual/reference/operator/update/pushAll/#up._S_pushAll
.. _Upsert lesson video: https://university.mongodb.com/videos/y/Dy2p8k3EZs4
.. _Multi update lesson video: https://university.mongodb.com/videos/y/2GNNdUmDL-4

Delete
------

Deletion is about removing documents from the database.

For the exam, you should be able to:
  - Drop a collection
  - Build a query that deletes only the documents you want it to

- Lesson on deletion_
- Documentation on dropping a collection_
- Documentation on db.collection.remove()_


.. _Lesson on deletion: https://university.mongodb.com/videos/y/5K0t1dU8IJY
.. _Documentation on dropping a collection: http://docs.mongodb.org/manual/reference/method/db.collection.drop/
.. _Documentation on db.collection.remove()



Sample Problems
---------------

1. Consider the following documents:

{ "_id" : 1, "a" : 1, "b" : 1 }
{ "_id" : 2, "a" : 2, "b" : 3 }
{ "_id" : 3, "a" : 3, "b" : 6 }
{ "_id" : 4, "a" : 4, "b" : 10 }
{ "_id" : 5, "a" : 5, "b" : 15 }
You perform the following query:

db.stuff.update( { b : { $gte : 10 } }, { $set : { b : 15 } }, { multi : true, upsert : true } )
How many documents will be updated by the query?

a. 0
b. 1
c. 2
d. 3
e. 5

2. Which of the following queries on the "c" collection will return only the first five elements of the array in the "b" field?

Example document (as it exists in the collection):

> db.c.find()
{ "_id" : 12, b : [ 3, 5, 7, 2, 1, -4, 3, 12 ] }
Document you want returned by your query:

{ "_id" : 12, "b" : [ 3, 5, 7, 2, 1 ] }

a. db.c.find( { } , { b : [ 0, 1, 2, 3, 4, 5 ] } )
b. db.c.find( { } , { b : [ 0 , 5 ] } )
c. db.c.find( { } , { b : { $slice : [ 0 , 5 ] } } ) 
d. db.c.find( { } , { b : { $substr[ 0 , 5 ] } } )
e. db.c.find( { b : [ 0 , 5 ] } )


3. Consider the following example document from the sample collection. All documents in this collection have the same schema.
{
        "_id" : 3, 
            "a" : 7,
                "b" : 4
}
Which of the following queries will replace this with the document,
{
        "_id" : 7, 
            "c" : 4

a. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 } )
b. db.sample.update( { "_id" : 3 } , { "$set" : { "_id" : 7 , "c" : 4 } } )
c. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 , { "$unset" : [ "a" , "b" ] } } )
d. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 } , { "justOne" : true } )
e. This operation cannot be done with a single query.

4. Which of the documents below will be retrieved by the following query? Assume the documents are stored in a collection called "sample". Check all that apply.

db.sample.find( { "$or" : [ { "a" : { "$in" : [ 3, 10] } }, { "b" : { "$lt" : 2 } } ] } )

a. { "_id" : 1, "a" : 0, "c" : 0, "b" : 2 }
b. { "_id" : 2, "a" : 2, "c" : 0, "b" : 1 }
c. { "_id" : 3, "a" : 4, "c" : 0, "b" : 14 }
d. { "_id" : 4, "a" : 5, "c" : 0, "b" : 17 }
e. { "_id" : 5, "a" : 3, "c" : 0, "b" : 12 }
f. { "_id" : 6, "a" : 1, "c" : 1, "b" : 5 }
g. { "_id" : 7, "a" : 8, "c" : 1, "b" : 7 }
h. { "_id" : 8, "a" : 11, "c" : 1, "b" : 0 }
i. { "_id" : 9, "a" : 17, "c" : 1, "b" : 1 }
j. { "_id" : 10, "a" : 3, "c" : 1, "b" : 1 }


5. You perform the following operation in the shell:

db.foo.insert( { } );
What gets inserted?

a. An empty document
b. A document with an _id assigned to be an ObjectId
c. A document that matches the collection's existing schema, but with null fields
d. No document will be inserted; an error will be raised
e. A document will be inserted with the same _id as the last document inserted


Answers to Sample Problems
--------------------------

1. b
2. c
3. e
4. b, e, h, i, j
5. b
