====
CRUD
====

In the CRUD section of the certification exam, we will verify that you:

- Understand all create, read, update, and delete (CRUD) operations in the MongoDB query language
- Are famliar with commonly used CRUD operators and how to use them
- Know what data types MongoDB supports

In this section, we are not testing that you have the MongoDB query language syntax memorized. However, you should be able to distinguish correctly written queries from those that are not. You should also know which query parameters are necessary versus those that are optional and how to use query parameters. We will not expect you to have query operators memorized, but you should be able to recognize the correct operator for a task from a set of choices. 


Create
------

For the exam, you should be able to:

- Properly use the insert, save, update, and findAndModify commands to create new documents
- Match insert commands with descriptions of what they do
- Know how to perform bulk inserts
- Understand the uniqueness constraint of _id fields and its implications for CRUD operations
- Understand how ObjectIds are created and used in MongoDB

See the :manual:`ObjectId documentation</reference/object-id/>` for details on these values and their use in MongoDB.

Document creation can occur through a few commands:

- db.collection.insert()

  - Docs:

    - :manual:`db.collection.insert()</reference/method/db.collection.insert/>`
    - :manual:`Inserting Documents Tutorial</tutorial/insert-documents/>`

  - Video:

    - `Inserting Documents <https://university.mongodb.com/videos/y/qqfVxGLIrLg>`_


- db.collection.save() will cause a document to be inserted if the _id is not included, or the _id doesn't match any documents.

  - Docs:

    - :manual:`db.collection.save()</reference/method/db.collection.save/>`

  - Video:

    - `The Save Command <https://university.mongodb.com/videos/y/fWLiwAC-Q20>`_


- db.collection.update() will insert documents in some circumstances ("upserts").

  - Docs:

    - :manual:`Upsert</reference/method/db.collection.update/>` (only an insert if upsert: true is set)

  - Video:

    - `Upsert lesson video <https://university.mongodb.com/videos/y/Dy2p8k3EZs4>`_ 

- db.collection.findAndModify() can result in an insert if updating and "upsert" is set to true. 

  - Docs: 
  
    - :manual:`db.collection.findAndModify() </reference/method/db.collection.findAndModify/>`


Most questions about document creation will involve the db.collection.insert() command. Inserts are typically straightforward.

Upserts can be more complicated. In the example below, assume the foo collection does not already contain a document with a=5 and b<=7. 

.. code-block:: javascript

  > db.foo.update( { a : 5, b : { $lte : 7 } }, { $set : { c : 8 } }, { upsert : true } )
  WriteResult({
      "nMatched" : 0,
      "nUpserted" : 1,
      "nModified" : 0,
      "_id" : ObjectId("55b0200e5ef34083de46367e")
  })
  > db.foo.find()
  { "_id" : ObjectId("55b0200e5ef34083de46367e"), "a" : 5, "c" : 8 }

In cases such as this, a new document is inserted. In this specific case, the new document contains the value, c : 8, because the upsert instructed that it be set. The query document also contributes fields to the document that gets created. In this case, a : 5 was also be set. The value of b could not be determined from the query, so it will not be set. Finally, an ObjectId was assigned to the _id field.

You should also be familiar with the special properties of the _id field:

- Docs:
  
  - :manual:`The _id Field</core/document/#the-id-field>`
  - :manual:`The _id Field</reference/method/db.collection.insert/#id-field>`

- Video: 

  - `Compound _id's <https://university.mongodb.com/videos/y/zoN4cj_XQzY>`_


Read
----

In MongoDB, you read documents using either the db.collection.find() method, or the db.collection.findAndModify() method. You should be familiar with both commands, but the .find() method will receive greater coverage on the exam.

For the exam, you should be able to:

- Correctly use the query, projection, and options parameters
- Sort query results
- Demonstrate an understanding of all match and projection operators
- Read and interpret regular expressions as used in MongoDB queries
- Demonstrate an understanding of how find() queries work with arrays

In MongoDB, reading data is carried out with the following methods:

db.collection.find()

- Docs:
 
  - :manual:`db.collection.find()</reference/method/db.collection.find/>`
  - :manual:`Find Tutorial</tutorial/query-documents/>`

- Videos:

  - `Introduction to find() <https://university.mongodb.com/videos/y/8kKfFK6a0Ak>`_
  - `Query by Matching <https://university.mongodb.com/videos/y/UIg86QjSoyY>`_
  - Operators for db.collection.find():

    - `$lt and $gt <https://university.mongodb.com/videos/y/FHLrz4VGzkg>`_
    - `string inequalities <https://university.mongodb.com/videos/y/imCCKOevU3c>`_
    - `$regex, $exists, $type <https://university.mongodb.com/videos/y/lI-jhqYf1JY>`_
    - `$or <https://university.mongodb.com/videos/y/BW5ElNCRZps>`_
    - `$and <https://university.mongodb.com/videos/y/hYk7pjgjjzc>`_

  - Array Operators:

    - `Querying Inside Arrays <https://university.mongodb.com/videos/y/jvEqwW75Bus>`_
    - `$in and $all <https://university.mongodb.com/videos/y/QU2NrkviORE>`_
    - `Dot Notation <https://university.mongodb.com/videos/y/NrjFECIfwqk>`_


Keep in mind, a find() query will return a cursor:

- Docs: 

  - :manual:`Cursors</core/cursors/>`
  - :manual:`Cursor tutorial</tutorial/iterate-a-cursor/>`

- Videos:

  - `Cursor lesson <https://university.mongodb.com/videos/y/3jA6iFSEJOI>`_


There are other collection read methods that will not return cursors, but with which you should be familiar.

- db.collection.count()

  - Docs:

    - :manual:`Count</reference/method/db.collection.count/>`

  - Videos:

    - `Count <https://university.mongodb.com/videos/y/eKD5bVmNQMI>`_

- db.collection.distinct()

  - Docs:

    - :manual:`Distinct</method/db.collection.distinct/>`


There are other methods that can be applied to cursors themselves. These can return a number (e.g., count), or they can modify the result set (i.e., sort, skip, and limit). You may also be expected to know how to manually iterate a cursor.

- Docs:

  - :manual:`List of cursor methods</reference/method/js-cursor/>`

- cursor.count()

  - Works like collection.count()
  - Docs:

    - :manual:`Count<http://docs.mongodb.org/manual/reference/method/cursor.count/>`

  - Videos:

    - `Count <https://university.mongodb.com/videos/y/eKD5bVmNQMI>`_

- cursor.sort()

  - :manual:`Sort documentation</reference/method/cursor.sort/>`
  - `Lesson on sort, skip, and limit <https://university.mongodb.com/videos/y/BsmQ4SNCikc>`_
  - `Second lesson on sorting <https://university.mongodb.com/videos/y/hwUg8r7a-d8>`_

- cursor.skip()

  - :manual:`Skip documentation</reference/method/cursor.skip/>`
  - `Lesson on sort, skip, and limit <https://university.mongodb.com/videos/y/BsmQ4SNCikc>`_

- cursor.limit()

  - :manual:`Limit documentation</reference/method/cursor.limit/>`
  - `Lesson on sort, skip, and limit <https://university.mongodb.com/videos/y/BsmQ4SNCikc>`_

- cursor.next()

  - :manual:`Next documentation</tutorial/iterate-a-cursor/>`
  - The lesson on cursors, above, `reproduced here <https://university.mongodb.com/videos/y/3jA6iFSEJOI>`_, also shows how to do this


You can also project your results in order to limit the fields you get back.

- projection

  - :manual:`Documentation</tutorial/project-fields-from-query-results/>`
  - :manual:`from .find() documentation</reference/method/db.collection.find/>`
  - `Lesson <https://university.mongodb.com/videos/y/8zlMXX70KEw>`_

Finally, you can bulk insert by passing an array to db.collection.insert(). You should know the difference between ordered and unordered bulk inserts.

Docs:

- :manual:`Insert Multiple Documents</reference/method/db.collection.insert/#insert-multiple-documents>`


Update
------

Updates modify existing documents. For the exam, you should be able to:

- Properly use the save, update, and findAndModify commands to mutate existing documents
- Distinguish which parameter finds the documents to change, which mutates them
- Explain the behavior of any update operator with which you are presented
- Recognize when upserts and db.collection.save() will insert documents

Updates can occur with a few collection methods, some of which were in the insert section:

- db.collection.save()

  - This will update if the _id is specified and it matches an existing document.
  - :manual:`Documentation</reference/method/db.collection.save/>`
  - `Lesson video <https://university.mongodb.com/videos/y/fWLiwAC-Q20>`_


- db.collection.findAndModify

  - :manual:`Documentation here</reference/method/db.collection.findAndModify/>`

- db.collection.update()

  - This will update unless upsert: true is specified and the query matches no documents.
  - :manual:`Documentation</reference/method/db.collection.update/>`
  - :manual:`Tutorial</tutorial/modify-documents/>`
  - With no operators specified in the update parameter, there will be a wholesale update

    - `Wholesale update lesson video <https://university.mongodb.com/videos/y/g7Fi1xXsuvU>`_

  - Operators

    - $set (modify a field)

      - `$set lesson video <https://university.mongodb.com/videos/y/XyhNjs2pNVc>`_
      - :manual:`$set documentation</reference/operator/update/set/#up._S_set>`

    - $unset (remove a field)

      - `$unset lesson video <https://university.mongodb.com/videos/y/LpErz8jLW0I>`_
      - :manual:`$unset documentation</reference/operator/update/unset/#up._S_unset>`

    - $rename

      - :manual:`$rename documentation</reference/operator/update/rename/#up._S_rename>`

    - $setOnInsert

      - :manual:`$setOnInsert documentation</reference/operator/update/setOnInsert/#up._S_setOnInsert>`

    - $inc

      - :manual:`$inc documentation</reference/operator/update/inc/#up._S_inc>`

    - $mul

      - :manual:`$mul documentation</reference/operator/update/mul/#up._S_mul>`

    - $min and $max

      - :manual:`$min documentation</reference/operator/update/min/#up._S_min>`
      - :manual:`$max documentation</reference/operator/update/max/#up._S_max>`

    - Array operators

      - `Array operators lesson video <https://university.mongodb.com/videos/y/GOn0EWKDQoY>`_
      - :manual:`Positional $ documentation</reference/operator/update/positional/#up._S_>`
      - :manual:`$addToSet documentation</reference/operator/update/addToSet/#up._S_addToSet>`
      - :manual:`$pop documentation</reference/operator/update/pop/#up._S_pop>`
      - :manual:`$pull documentation</reference/operator/update/pull/#up._S_pull>`
      - :manual:`$pullAll documentation</reference/operator/update/pullAll/#up._S_pullAll>`
      - :manual:`$push documentation</reference/operator/update/push/#up._S_push>`

        - There are additional modifiers if you use $push (and sometimes $addToSet)
        - :manual:`$each documentation</reference/operator/update/each/#up._S_each>`
        - :manual:`$slice documentation</reference/operator/update/slice/#up._S_slice>`
        - :manual:`$sort documentation</reference/operator/update/sort/#up._S_sort>`
        - :manual:`$position documentation</reference/operator/update/position/#up._S_position>`

  - Upserts

    - `Upsert lesson video <https://university.mongodb.com/videos/y/Dy2p8k3EZs4>`_

  - Multi updates

    - `Multi update lesson video <https://university.mongodb.com/videos/y/2GNNdUmDL-4>`_


.. _$pushAll documentation: http://docs.mongodb.org/manual/reference/operator/update/pushAll/#up._S_pushAll


Delete
------

For the exam, you should be able to:

- Drop a collection
- Build a query that deletes only the documents you want it to

Docs:

- :manual:`Documentation on dropping a collection</reference/method/db.collection.drop/>`
- :manual:`Documentation on db.collection.remove()</reference/method/db.collection.remove/>`

Video:

- `Lesson on deletion <https://university.mongodb.com/videos/y/5K0t1dU8IJY>`_





Sample Problems
---------------

1. Consider the following documents:

   .. code-block:: javascript

      { "_id" : 1, "a" : 1, "b" : 1 }
      { "_id" : 2, "a" : 2, "b" : 3 }
      { "_id" : 3, "a" : 3, "b" : 6 }
      { "_id" : 4, "a" : 4, "b" : 10 }
      { "_id" : 5, "a" : 5, "b" : 15 }

   You perform the following query:

   .. code-block:: javascript

      db.stuff.update( { b : { $gte : 10 } },
                       { $set : { b : 15 } },
                       { multi : true, upsert : true } )

   How many documents will be updated by the query?

   a. 0
   b. 1
   c. 2
   d. 3
   e. 5


2. Consider the following document:

   .. code-block:: javascript

     > db.c.find()
     { "_id" : 12, b : [ 3, 5, 7, 2, 1, -4, 3, 12 ] }

   Which of the following queries on the "c" collection will return only the first five elements of the array in the "b" field? E.g., 

   Document you want returned by your query:

   .. code-block:: javascript

     { "_id" : 12, "b" : [ 3, 5, 7, 2, 1 ] }

   a. db.c.find( { } , { b : [ 0, 1, 2, 3, 4, 5 ] } )
   b. db.c.find( { } , { b : [ 0 , 5 ] } )
   c. db.c.find( { } , { b : { $slice : [ 0 , 5 ] } } ) 
   d. db.c.find( { } , { b : { $substr[ 0 , 5 ] } } )
   e. db.c.find( { b : [ 0 , 5 ] } )


3. Consider the following example document from the sample collection. All documents in this collection have the same schema.

   .. code-block:: javascript

      {
        "_id" : 3, 
        "a" : 7,
        "b" : 4
      }

   Which of the following queries will replace this with the document,

   .. code-block:: javascript

      {
        "_id" : 7, 
        "c" : 4,
        "b" : 4
      }

   a. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 } )
   b. db.sample.update( { "_id" : 3 } , { "$set" : { "_id" : 7 , "c" : 4 } } )
   c. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 , { "$unset" : [ "a" , "b" ] } } )
   d. db.sample.update( { "_id" : 3 } , { "_id" : 7 , "c" : 4 } , { "justOne" : true } )
   e. This operation cannot be done with a single query.


4. Which of the documents below will be retrieved by the following query? Assume the documents are stored in a collection called "sample". Check all that apply.

   .. code-block:: javascript

      db.sample.find( { "$or" : [ { "a" : { "$in" : [ 3, 10] } }, { "b" : { "$lt" : 2 } } ] } )

    a. { "_id" : 1, "a" : 0, "c" : 0, "b" : 2 }
    b. { "_id" : 2, "a" : 2, "c" : 0, "b" : 1 }
    c. { "_id" : 3, "a" : 4, "c" : 0, "b" : 14 }
    d. { "_id" : 4, "a" : 5, "c" : 0, "b" : 17 }
    e. { "_id" : 5, "a" : 3, "c" : 0, "b" : 12 }
    f. { "_id" : 6, "a" : 1, "c" : 1, "b" : 5 }
    g. { "_id" : 7, "a" : 8, "c" : 1, "b" : 7 }
    h. { "_id" : 8, "a" : 11, "c" : 1, "b" : 0 }
    i. { "_id" : 9, "a" : 17, "c" : 1, "b" : 1 }
    j. { "_id" : 10, "a" : 3, "c" : 1, "b" : 1 }


5. You perform the following operation in the shell:

   .. code-block:: javascript

     db.foo.insert( { } );

   What gets inserted?

   a. An empty document
   b. A document with an _id assigned to be an ObjectId
   c. A document that matches the collection's existing schema, but with null fields
   d. No document will be inserted; an error will be raised
   e. A document will be inserted with the same _id as the last document inserted


Answers to Sample Problems
--------------------------

1. b
2. c
3. e
4. b, e, h, i, j
5. b

Exercises
---------

Here are some exercises you can complete on your own:

- Insert some sample data. Write a for loop that bulk inserts 1,000 documents at a time, 1000 times, for a total of 1 million documents inserted. Do it in such a way that each of its _id fields is unique.
- Perform the same operation, but use some (but not all) non-unique _id field values. See the difference between an ordered vs. unordered bulk insert.
- Perform queries on the sample set. Find documents with fields greater than certain values.
- Perform updates on the sample set. Set new fields without deleting old fields, increment fields, etc. using the update command.
- Perform array operations, pushing to and popping from arrays.
- Insert documents with nested subdocuments. Query on the subdocument fields.
