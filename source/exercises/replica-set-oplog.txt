
Create a Replica Set
--------------------

Let's take a look at a concrete example. Launch mongo shell as follows.

.. code-block:: bash

   mongo --nodb

Create a replica set by running the following command in the mongo shell.

.. code-block:: javascript

   replicaSet = new ReplSetTest( { nodes : 3 } )

.. include:: /includes/student-notes.rst


``ReplSetTest``
---------------

- ReplSetTest is useful for experimenting with replica sets as a means of hands-on learning.
- It should never be used in production. Never.
- The command above will create a replica set with three members.
- It does not start the mongods, however.
- You will need to issue additional commands to do that.

.. include:: /includes/student-notes.rst


Start the Replica Set
---------------------

Start the mongod processes for this replica set.

.. code-block:: javascript

   replicaSet.startSet()

Issue the following command to configure replication for these mongods. You will need to issue this while output is flying by in the shell.

.. code-block:: javascript

   replicaSet.initiate()

.. include:: /includes/student-notes.rst


Status Check
------------

- You should now have three mongods running on ports 31000, 31001, and 31002.
- You will see log statements from all three printing in the current shell.
- To complete the rest of the exercise, open a new shell.

.. include:: /includes/student-notes.rst


Connect to the Primary
----------------------

Open a new shell, connecting to the primary.

.. code-block:: javascript

   mongo --port 31000

.. include:: /includes/student-notes.rst


Create some Inventory Data
--------------------------

Use the ``store`` database:

.. code-block:: javascript

   use store

Add the following inventory:

.. code-block:: javascript

   inventory = [ { _id: 1, inStock: 10 }, { _id: 2, inStock: 20 },
                 { _id: 3, inStock: 30 }, { _id: 4, inStock: 40 },
                 { _id: 5, inStock: 50 }, { _id: 6, inStock: 60 } ]
   db.products.insert(inventory)

.. include:: /includes/student-notes.rst


Perform an Update
-----------------

Issue the following update. We might issue this update after a purchase of three items.

.. code-block:: javascript

   db.products.update({ _id: { $in: [ 2, 5 ] } },
                      { $inc: { inStock : -1 } },
                      { multi: true })

.. include:: /includes/student-notes.rst


View the Oplog
--------------

The oplog is a capped collection in the ``local`` database of each replica set member:

.. code-block:: javascript

   use local
   db.oplog.rs.find()
   { "ts" : Timestamp(1406944987, 1), "h" : NumberLong(0), "v" : 2, "op" : "n",
     "ns" : "", "o" : { "msg" : "initiating set" } }
   ...
   { "ts" : Timestamp(1406945076, 1), "h" : NumberLong("-9144645443320713428"), 
     "v" : 2, "op" : "u", "ns" : "store.products", "o2" : { "_id" : 2 }, 
     "o" : { "$set" : { "inStock" : 19 } } }
   { "ts" : Timestamp(1406945076, 2), "h" : NumberLong("-7873096834441143322"), 
     "v" : 2, "op" : "u", "ns" : "store.products", "o2" : { "_id" : 5 }, 
     "o" : { "$set" : { "inStock" : 49 } } }

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - Note the last two entries in the oplog.
      - These entries reflect the update command issued above.
      - Note that there is one operation per document affected.
      - More specifically, one operation for each of the documents with the _id values 2 and 5.


