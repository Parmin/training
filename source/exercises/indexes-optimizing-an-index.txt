========================
Lab: Optimizing an Index
========================


Exercise: What Index Do We Need?
--------------------------------

Run the the following Javascript file from the handouts.

.. code-block:: bash

   mongo --shell localhost/performance performance.js

In the shell that launches execute the following method

.. code-block:: javascript

   performance.init()

The method above will build a sample data set in the "sensor_readings" collection. What index is needed for this query?

.. code-block:: javascript

   db.sensor_readings.find( { tstamp: { $gte: ISODate("2012-08-01"),
                                       $lte: ISODate("2012-09-01") },  
                              active: true } ).limit(3)

.. only:: instructor

   .. note::

      - Work through method of explaining query with .explain("executionStats")
      - Look at differences between (timestamp, active) and (active, timestamp)
        

.. include:: /includes/student-notes.rst


Exercise: Avoiding an In-Memory Sort
------------------------------------

What index is needed for the following query to avoid an in-memory sort?
   
.. code-block:: javascript

   db.sensor_readings.find( { active: true } ).sort( { tstamp : -1 } )
   
.. only:: instructor

   .. note::

      - { active: 1, tstamp: 1 }

.. include:: /includes/student-notes.rst


Exercise: Avoiding an In-Memory Sort, 2
---------------------------------------

What index is needed for the following query to avoid an in-memory sort?
   
.. code-block:: javascript

   db.sensor_readings.find(
       { x : { $in : [100, 200, 300, 400] } }
   ).sort( { tstamp : -1 })
   
.. only:: instructor

   .. note::

      - Trick question, the answer most students will give is { x: 1, tstamp: 1 }, however, the $in will require an in-memory sort
      - (tstamp) or (tstamp, x) are the only indexes that will prevent an in-memory sort, but aren't selective at all

.. include:: /includes/student-notes.rst


        
