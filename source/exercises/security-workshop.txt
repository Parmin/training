======================
Lab: Security Workshop
======================

.. only:: instructor

  .. note::

     - we assume you are familiar with the provisioning scripts. If not start with:
       https://docs.google.com/document/d/1vhA6NvlTsPe1rw_fb7N5NrYzJ78odiHWBd5yf9vPd64

     - you would provision 3 nodes per team, using the provisioning script.
       For example, for a 6 teams exercise at MongoDB World, you would run:

       deploy.py --run mdbw2017 --teams 6 --instances 3 --noom


Learning Objectives
-------------------

Upon completing this workshop, students will be able to:

- Secure application communication with MongoDB
- Understand all security authentication and authorization options of MongoDB
- Encrypt MongoDB data at rest using encrypted storage engine

.. include:: /includes/student-notes.rst


Introduction
------------

In this lab you are asked to secured a running application that stores data
using MongoDB as a backend.

- We are going to secure the backend communications using TLS/SSL
- Enable authorization on the backend side
- Encrypt the storage layer
- Make sure that there are no *"leaks"* of information

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Describe to the students the different components of this workshop.

    - The application code in "security-lab/mongo-messenger"
    - The 3 AWS instances where the backend should be running
    - The set of available files in "/share/downloads":

      - X509 certificates
      - MongoDB binaries
      - Configuration files

    - How to install and start MongoDB 3.4 on the instances using the package
    - Provide the students with the following files:

      - AdvancedAdministrator.pem
      - Info per team about IPs, hostnames, ... from running "describe.py --run mdbw2017"
      - certs.tgz


Exercise: Accessing your instances
----------------------------------

  - get your .pem file to ssh into your instances

  .. code-block:: sh

     mv ~/Downloads/AdvancedAdministrator.pem ~/.ssh/.
     chmod 600 ~/.ssh/AdvancedAdministrator.pem

  - enable the keychain

  .. code-block:: sh

     ssh-add -K ~/.ssh/AdvancedAdministrator.pem

  - ssh into 'node1', propagating your credentials

  .. code-block:: sh

     ssh -i ~/.ssh/AdvancedAdministrator.pem -A centos@54.235.1.1

  - ssh into 'node2'

  .. code-block:: sh

     ssh -A node2


Exercise: Starting MongoDB and configuring the replica set
----------------------------------------------------------

- ``/share/downloads`` contains MongoDB 3.2 and 3.4
- installation instructions are at:

  - https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-red-hat/

- configure the 3 nodes as a replica set named **SECURED**
- use ``node``, ``node2`` and ``node3`` for your host names


Solution: Starting MongoDB and configuring the replica set
----------------------------------------------------------

- installation

  .. code-block:: sh

     sudo yum install -y mongodb-enterprise
     sudo vi /etc/mongod.conf
     sudo service mongod start

- configure the 3 nodes as a replica set named **SECURED**

  .. code-block:: sh

     replication:
         replSetName: SECURED

- disable "bindIp"

  .. code-block:: sh

    cfg = { _id: "SECURED", version: 1, members: [ {_id: 0, host: "node1:27017"}, {_id: 1, host: "node2:27017"}, {_id:2, host: "node3:27017"} ] }
    rs.initiate(cfg)
    rs.status()


Exercise: Check the Connection to MongoDB
-----------------------------------------

Let's try to connect to our running MongoDB cluster.

.. code-block:: sh

    mongo --host SECURED/node1,node2,node3

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Here we want to make sure everyone can connect correctly to the MongoDB
    cluster.


Exercise: Launch the Client Application
---------------------------------------

It's time connect our client application.

- install node.js

.. code-block:: sh

    sudo yum install epel-release
    sudo yum install nodejs

- install the application:

.. code-block:: sh

    cd ~
    tar xzvf /share/downloads/security_lab.tgz
    cd mongo-messenger
    npm install
    npm start

.. include:: /includes/student-notes.rst

- connect to your application with a browser on port 8080

.. only:: instructor

  .. note::

    The sample application code should be available in the AWS instance.
    In case students cannot find it, they can download using this instruction:

    .. code-block:: sh

        curl -O https://s3.amazonaws.com/mongodb-training/security_lab/security_lab.tgz

    Also, make sure all instances have nodejs installed.


How is the client application connecting to the database
--------------------------------------------------------

- the connection string used by the application is in ``message.js`` and looks like this:

.. code-block:: sh

   const url = 'mongodb://node1:27017,node2:27017,node3:27017/
       security-lab?replicaSet=SECURED'

- this is good for now, however you may have to change it later in the lab


WARNING: Spying your deployment!
--------------------------------

Throughout the lab, the instructor will be spying on your deployment!

This checking is done by running a few scripts on your machines that will verify
if you have completely secured, or not, your deployment.

We will come back to this later on.

.. only:: instructor

  .. note::

    At this point you should run the lab validation scripts against one of the
    students environment to test which things are not yet secured.

    TODO: add instructions to run the scripts


Exercise: Enable SSL between the nodes
--------------------------------------

- we removed "bindIp" earlier, this is no good
- let's ensure we limit the connections to a list of nodes we control

  - let's use SSL certificates
  - they are in ``/share/downloads``


.. only:: instructor

   Solution: Enable SSL between the nodes
   --------------------------------------

   - add SSL

     .. code-block:: sh

        net:
          ssl:
            mode: requireSSL
            PEMKeyFile: /etc/ssl/node1.pem
            CAFile: /etc/ssl/ca.pem

   - connect with the client

     .. code-block:: sh

        mongo --ssl --host node1 --sslCAFile /etc/ssl/ca.pem --sslPEMKeyFile /etc/ssl/node1.pem


Exercise: Enable ``auth`` in your MongoDB cluster
-------------------------------------------------

Once we have our sample application up an running is time to start securing the
system.

You should start by enabling `MongoDB authentication`_

To do this, you will have to decide:

- Which authentication mechanism to use
- Which authorization support will you use
- Set of users required to operate this system

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    At this stage we will have the students making decisions regarding the
    authentication and authorization mechanisms available, and which better
    suits their needs.

    Ask questions like:

    - Which authentication mechanisms should we be setting up?

      - Remind students that we will want the application to be fully encrypted

    - Which systems should we have in place to manage users?

      - What happens if we decide to have more than one application in this system?
      - What will happen if we need to remove


.. _`MongoDB authentication`: https://docs.mongodb.com/manual/core/authentication/


.. only:: instructor

   Solution: Enable ``auth`` in your MongoDB cluster
   -------------------------------------------------


Exercise: Encrypt communications between app and database
---------------------------------------------------------

You instructor has been eavesdropping on your application!

Make sure he is not able to do so by encrypting your application connections on
the backend side.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Run ``mongoreplay`` and show the students that you can in fact see what their
    comms are looking like, between the application and the MongoDB cluster.

    TODO: instructions for ``mongoreplay``


Exercise: Avoid any log leaks
-----------------------------

Logs are an important asset of your system.

Allow us to understand any potential issue with our cluster or deployment.
But they can also **leak** some confidential information!

Make sure that you do not have any data leaks into your logs.


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    At this point students should enable log redaction in their cluster nodes.

    To accomplish this students should do the following:

    - relaunch all nodes enabling client log data redaction

      .. code-block:: yaml

        ...
        security:
          redactClientLogData: true
        ...

    - this should be done without downtime

    - Give "extra kudos" to students that managed to do this and also clearing
      any information on previous logs


Exercise: Encrypt Storage Layer
-------------------------------

To fully secure our MongoDB deployment we need to consider the actual MongoDB
instance files.

Your instructor, has some scripts that will enable him to have a peek into the
your collection and indexes data files.

Don't let him do so!!!

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Here we are asking students to enable the encryption storage engine:

    https://docs.mongodb.com/manual/tutorial/configure-encryption/

    TODO: instructions to enable encrypted storage engine.
