==================================
Exercise: Setting up a Replica Set
==================================


Create Data Directories
-----------------------

Since we will be running all nodes on our local machines, make sure each node has its own data directory.

.. code-block:: bash

   mkdir /data/rs1
   mkdir /data/rs2
   mkdir /data/rs3


Launch Each Member
------------------

.. code-block:: bash

   mongod --replSet myReplSet --logpath “1.log” --dbpath /data/rs1 --port 27017 --oplogSize 200

   mongod --replSet myReplSet --logpath “2.log” --dbpath /data/rs2 --port 27018 --oplogSize 200

   mongod --replSet myReplSet --logpath “3.log” --dbpath /data/rs3 --port 27019 --oplogSize 200


Status
------

- At this point, we have 3 mongods running.
- They were all launched with the same ``replSet`` parameter of "myReplSet".
- Despite this, the members are not aware of each other yet.
- This is fine for now.

.. only:: instructor

   .. note::

      - In production, each member would run on a different machine.
      - To simplify, we run all members on localhost.
      - The same configuration process is used for this deployment as for one that is distributed across multiple machines.


Configure the Replica Set
-------------------------

.. code-block:: bash

   mongo --port 27017

   var config = { _id : "mySet",  members: [ {_id : 0 , host: "localhost:27017" } , { _id : 1 , host : "localhost:27018" } , { _id : 2 , host : "localhost:27019" } ] }

   rs.initiate( config )

   # Run rs.status() until you see that you have a primary and 2 secondaries.
   rs.status()

   exit


Write to the Primary
--------------------

Connect to the primary by issuing a command such as the following.

.. code-block:: bash

   mongo --port 27017

Once you have found the primary, insert a document.

.. code-block:: javascript

   db.testcol.insert( { a : 1 } )
   db.testcol.count()

Once the insert succeeds exit the mongo shell.


Read from a Secondary
---------------------

Connect to one of the secondaries. E.g.:

.. code-block:: bash

   mongo --port 27018

Read from the secondary

.. code-block:: javascript

   rs.slaveOk()

   db.testcol.find()


Review the Oplog
----------------

.. code-block:: javascript

   use local

   db.oplog.rs.find()

   exit


Change the Priority of a Secondary
----------------------------------

Connect to one of the secondaries. E.g.,

.. code-block:: bash

   mongo --port 27019

Raise the priority of this member.

.. code-block:: javascript

   config = rs.conf()

   config[1]["priority"] = 2

   rs.reconfig(config)

.. only:: instructor

   .. note::

      - Note that ``config[1]["priority"] = 2`` does not actually change the priority.
      - ``rs.reconfig(config)`` does.

This secondary will now become a primary. Wait a few seconds and check.


Further Reading
---------------

- :manual:`Replica Configuration</reference/replica-configuration/>`
- :manual:`Replica States</reference/replica-states/>`

