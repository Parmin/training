==========================
Lab: Aggregation Framework
==========================



Exercise: Working with Array Fields
-----------------------------------

Use the aggregation framework to find the name of the individual who has made the most comments on a blog.

Start by importing the necessary data if you have not already.

.. code-block:: bash

   # for version <= 2.6.x
   mongoimport -d blog -c posts --drop posts.json
   # for version > 3.0
   mongoimport -d blog -c posts --drop --batchSize=100 posts.json

To help you verify your work, the author with the fewest comments is Mariela Sherer and she commented 387 times.

.. only:: instructor

   .. note::

      .. code-block:: javascript

      	 use blog;
	 db.posts.aggregate([
           { "$unwind": "$comments" },
	   { "$group":
	     {
	       _id: "$comments.author",
	       num_comments: { $sum: 1 }
	     }
	   },
	   { "$sort": { "num_comments": 1 } },
	   { "$limit": 10 }
	 ])


Exercise: Repeated Aggregation Stages
-------------------------------------

Import the zips.json file from the data handouts provided:

.. code-block:: javascript

   mongoimport -d sample -c zips --drop zips.json

Consider together cities in the states of California (CA) and New York (NY) with populations over 25,000. Calculate the average population of this sample of cities.

Please note:

- Different states might have the same city name.
- A city might have multiple zip codes.

.. only:: instructor

   .. note::

      .. code-block:: javascript

         db.zips.aggregate( [
	     { $match: { state: { $in: ["CA", "NY"] } } },
	     { $group: { _id: { state: "$state", city: "$city" },
	                 pop: {$sum: "$pop"} } },
	     { $match: { pop: {$gt: 25000} } },
	     { $group: { _id: null,
	                 pop: {$avg: "$pop"} } }
	 ] )


.. include:: /includes/student-notes.rst


Exercise: Projection
--------------------

Calculate the total number of people who live in a zip code in the US where the city starts with a digit.

``$project`` can extract the first digit from any field. E.g.,

.. code-block:: javascript

   db.zips.aggregate([
       {$project:
           {
               first_char: { $substr: ["$city", 0, 1] },
           }
       }
   ])


.. only:: instructor

   .. note::

      .. code-block:: javascript

         db.zips.aggregate( [
            { $project : {
                first_char: { $substr: [ "$city", 0, 1] },
                pop: 1,
                city: "$city",
                zip: "$_id",
                state: 1
            } },
            { $match : {
                first_char: { $in: [ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] }
            } },
            {
               "$group" : { _id: null,
	                    population: { $sum : "$pop"} }
            }
         ] )


.. include:: /includes/student-notes.rst


Exercise: Descriptive Statistics
--------------------------------

From the ``grades`` collection, find the class (display the ``class_id``) with the best average student performance.

If you have not already done so, import the grades collection as follows.

.. code-block:: bash

   mongoimport -d sample -c grades --drop grades.json

Before you attempt this exercise, explore the ``grades`` collection a little to ensure you understand how it is structured.

For additional exercises, consider other statistics you might want to see with this data and how to calculate them.


.. only:: instructor

  .. note::

    A solution should be something like the following:

      - Unwind all the different scores
      - Average the based on class_id, student_id and score type
      - Average per class and student
      - Get top student per class
      - Get the top class that has the student with highest score average

    .. code-block:: javascript

      db.grades.aggregate([

      {$unwind: "$scores"   },
      {$project: { type: "$scores.type", score: "$scores.score", "student_id":1, class_id:1}},
      {$group: { _id: { student_id: "$student_id", "class_id": "$class_id", "type": "$type"}, avg_score_type: {"$avg": "$score"   }}} ,
      {$group: { _id: {student_id: "$_id.student_id", class_id: "$_id.class_id"}, avg_class_score: {"$avg": "$avg_score_type"} } } ,
      {$group: { _id: "$_id.class_id", best_class_score: {"$max": "$avg_class_score"}  } },
      {$sort: {"best_class_score":1}},
      {$limit:1}])

.. include:: /includes/student-notes.rst
