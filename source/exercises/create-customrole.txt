========================================
Lab: Create User-Defined Role (Optional)
========================================


Premise
-------

- MongoDB provides a set of built-in roles.
- Please consider those before generating another role on your system.
- Sometimes it is necessary to create roles match specific the needs of a system.
- For that we can rely on user-defined roles that system administrators can create.
- This function should be carried by ``userAdmin`` level administration users.

.. only:: instructor

  .. note::

    At this point its good moment to ask the question:

    - Why can't we just have a ``root`` level user create the roles?
    - Why should we first have a look to the built-in roles ?


Define Privileges
-----------------

- Roles are sets of privileges that a user is granted.
- Create a role with the following privileges:

  - User can read user details from database ``brands``
  - Can list all collections of database ``brands``
  - Can update all collections on database ``brands``
  - Can write to the collection ``automotive`` in database ``brands``

Create the JSON array that describes the requested set of privileges.

.. only:: instructor

  .. note::

    Students should create a JSON object that will contain all of the above privileges

    .. code-block:: javascript

      privileges: [
        {resource: { db: "brands", collection: "*"},
         actions: ["viewUser", "listCollections", "update"]},
        {resource: { db: "brands", collection: "automotive"},
         actions: ["insert"] }
      ]

    Here you can reference the set of available privileges that MongoDB has:
    https://docs.mongodb.org/manual/reference/privilege-actions/


Create Role
-----------

- Given the privileges we just defined, we now need to create this role specific to database ``brands``.
- The name of this role should be ``carlover``
- What command do we need to issue?

.. only:: instructor

  .. note::

    Students should come up with something very similar to the following:

    .. code-block:: javascript

      db.createRole({
        role: "carlover",
        privileges: [
          { resource: { db: "brands", collection: "*"}, actions: ["viewUser", "listCollections", "update"]},
          { resource: { db: "brands", collection: "automotive"}, actions: ["insert"] }
        ],
        roles: []
      })

    Ask the students why we need the ``roles`` array and why it should be empty.

Grant Role: Part 1
------------------

We now want to grant this role to the user named ``ilikecars`` on the database ``brands``.

.. code-block:: javascript

  use brands;
  db.createUser(
  {
    user: "ilikecars",
    pwd: "ferrari",
    customData: {notes: ["application user"]},
    roles: [
      {role: "carlover", db: "brands"}
      ]
  })


Grant Role: Part 2
------------------

- We now want to grant greater responsibility to our recently created ``ilikecars``!
- Let's grant the ``dbOwner`` role to the ``ilikecars`` user.

.. only:: instructor

  .. note::

    Students should come up with something similar to this command:

    .. code-block:: javascript

      use brands
      db.grantRolesToUser(
        "ilikecars",
        [
          { role: "dbOwner", db: "brands" }
        ]
      )

    Students can come up with other commands like ``db.updateUser("ilikecars", {...})`` which is also valid.


Revoke Role
-----------

- Let's assume that the role ``carlover`` is no longer valid for user ``ilikecars``.
- How do we revoke this role?

.. only:: instructor

  .. note::

    In this section the students should be able to indicate that the
    command for doing this operation is the following:

    .. code-block:: javascript

      use brands
      db.revokeRolesFromUser(
        "ilikecars",
        [
          { role: "carlover", db: "voyeur" }
        ]
      )
