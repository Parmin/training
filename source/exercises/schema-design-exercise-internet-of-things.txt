=======================================================
Lab: Data Model for an "Internet of Things" Application
=======================================================

Introduction (1 of 2)
---------------------

Consider an internet-connected pill bottle.

- It will:

  - Weigh its contents.
  - Log the following when it is opened or closed:

    - the time
    - the weight of its contents
    - how many pills are removed (if it's being closed)

  - Log heartbeats periodically (every 30 minutes)

.. include:: /includes/student-notes.rst


Introduction (2 of 2)
---------------------

There will also be a "notification" server.

- It will query periodically to find, for each bottle:

  - Which users are late in taking a pill
  - Which bottles are left open
  - Which bottles are *not* logging heartbeats

- It will then notify the appropriate users
- The time between checks would depend on the frequency of dosage, but
  typically 1/hour.

.. include:: /includes/student-notes.rst


Information Outside of the Scope of this Problem
------------------------------------------------

To limit scope of this lab, you should *not* model the following data:

- user data
- mediation info
- notification records.

You can:

- assume they exist in some other collection
- reference a ``bottle_id``, ``user_id`` or anything else needed

.. include:: /includes/student-notes.rst


Pill Bottle Operations
----------------------

Each pill bottle will perform the following queries:

- A heartbeat

  - Frequency: once every 30 minutes

- An operation to log when the bottle is opened or closed.

  - Its contents' weight
  - If closed, how many pills were removed
  - Frequency: Assume an average of 2 times per day

.. include:: /includes/student-notes.rst


Notification Server Operations
------------------------------

The notification server will run queries to determine:

.. rst-class:: longlist

  - Whether any given bottle is late in dispensing a dosage

    - Frequency of this depends on the medication
    - Assume an *average* of 1 check per hour

  - Whether any given bottle has not sent a heartbeat for over an hour
  - Whether any given bottle has been left open

Regardless, the server will also need to know:

.. rst-class:: longlist

  - Which user the bottle is associated with
  - Which medication the bottle contains

.. include:: /includes/student-notes.rst


Deliverables
------------

Break into groups of two or three.

Work together to create the following deliverables:

.. rst-class:: longlist

  - Sizing estimates, including:

    - Data size for each collection
    - Frequency of requests

  - Sample documents for each collection
  - Queries (read AND write) that the applications will use
  - Index creation commands
  - Should you shard a collection? Now? Later?

    - Assume a user base of 10M users with 3 bottles each

.. include:: /includes/student-notes.rst

.. only:: instructor

  Solution
  --------

  All slides from now on should be shown only after a solution is found by the
  groups & presented.


  Solution - Assumptions
  ----------------------

  - Assume 10M customers
  - Average of 3 bottles per customer
  - Average of 2 dosages per day

    - Log bottle open and bottle closed for each

  - Log a heartbeat every 30 minutes
  - "deactivating" a pill bottle triggers the appropriate cleaning


  Solution - Sizing Ops: Bottle (1 of 2)
  --------------------------------------

  Record bottles opened/closed:

  - 3 bottles per user
  - times 10M users
  - times 2 dosages per day
  - times 2 entries per dosage (open + closed)
  - divide by 86400 seconds per day
  - ... so ~1400 entries per second (writes)


  Solution - Sizing Ops: Bottle (2 of 2)
  --------------------------------------

  Record bottle heartbeats:

  - 3 bottles per user
  - times 10M users (30 M bottles)
  - divide by 1800 sec per heartbeat
  - ... so 17K heartbeats per second (writes)

  This is a lot more than recording the bottle state changes


  Solution - Sizing Ops: Notification Server (1 of 3)
  ---------------------------------------------------

  Query for last heartbeat every hour:

  - 3 bottles per user
  - times 10M users
  - divided by 3600 seconds per hour
  - ... so 8K checks per second for most recent heartbeat


  Solution - Sizing Ops: Notification Server (2 of 3)
  ---------------------------------------------------

  Query for Missing Dosages every Hour (check the last 3 dosages)

  - 3 bottles per user
  - times 10M users
  - divided by an average of 3600 seconds between checks
  - ... so about 8k checks per second


  Solution - Sizing Ops: Notification Server (3 of 3)
  ---------------------------------------------------

  Query for leaving a bottle open

  - Assume a peak rate of 1 check every 10 minutes
  - 3 bottles per user
  - times 10M users
  - divided by 600 seconds between checks
  - ... so 50K checks per second at peak


  Solution - Sizing Data: Events
  ------------------------------

  Opening & Closing Bottles:

  - 3 bottles / user
  - times 10M users
  - times 2 dosages per day
  - times 2 entries per dose
  - times 100 bytes
  - ... so ``6GB per week``, or ``36MB per hour``
  - Indexes will take up additional space

  .. note::

    - Document sizes are approximate, and here to give us an "order of magnitude"
      sense of things.


  Solution - Sizing Data: Heartbeats
  ----------------------------------

  Heartbeats:

  - 3 bottles per user
  - times 10M users
  - times 100 bytes per heartbeat (may be less...)
  - 48 heartbeats per day
  - ... so ``144GB per day`` or ``6GB per hour``

    - plus indexes
    - we will want to shard this if we keep more than 1 day, or have more customers

  .. note::

    - "GB/hour" is useful to size the OpLog


  Solution - Collections (1 of 2)
  -------------------------------

  Collection: ``bottle_actions``

  - Bottle it's associated with
  - Medication in the bottle
  - User who owns the bottle
  - Mass of contents
  - Estimated number of pills
  - Timestamp of measurement
  - Action: ``"opened"``, or ``"closed"``

    - If ``"closed"``, also store the number of pills taken while the bottle was
      open


  Solution - Collections (2 of 2)
  -------------------------------

  Collection: ``bottle_heartbeats``

    - Bottle sending in the heartbeat
    - last timestamp
    - 48 last timestamps (24 hours)


  Solution - Considerations
  -------------------------

  - Finding open bottles is the *most* common query

    - optimize for that

  - The heartbeat inserts are also frequent

    - ... but don't benefit from an index

  - Are there health regulations that require us to keep any data?

    - We may need to keep the heartbeats for 2 weeks or more
    - Should we keep "actions" (opened/closed) for ever
    - Should we keep "notifications" for ever


  Solution: Document (1 of 2)
  ---------------------------

  ``bottle_action`` collection

  .. code-block:: javascript

    {
      _id : ObjectId(...),
      bottle_id : ObjectId(...),  // Which bottle it refers to
      user_id : "willcross1024",
      medication : "Cordrazine",
      mass_of_contents : 44.25,
      number_of_pills : 25,
      time : ISODate(...),
      action : "closed",  // other possible value: "opened"
      pills_taken : 2  // if action is "closed"
    }


  Solution: Document (2 of 2)
  ---------------------------

  ``bottle_heartbeats`` collection

  .. code-block:: javascript

    {
      _id : ObjectId(...),
      bottle_id : ObjectId(...),
      user_id : "williamcross1024",
      medication : "Cordrazine",
      last : ISODate(...)
      previous: [ ISODate(...) ]
    }

  48 previous heartbeats, 2 per hour, for a day

  Keeping a copy of ``last heartbeat`` makes it easier on the queries

  8 bytes per timestamp

  ``user_id`` and ``medication`` are nice to have, but not required


  Solution: Pill Bottle Write (1 of 3)
  ------------------------------------

  pill bottle opened

  .. code-block:: javascript

    db.bottle_actions.insertOne(
    {
      bottle_id : ObjectId(...),
      user_id : "williamcross1024",
      medication : "Cordrazine",
      mass_of_contents : 44.25,
      number_of_pills : 25,
      time : ISODate(...),
      action : "opened"
    }


  Solution: Pill Bottle Write (2 of 3)
  ------------------------------------

  pill bottle closed

  .. code-block:: javascript

    db.bottle_actions.insertOne(
    {
      bottle_id : ObjectId(...),
      user_id : "willcross",
      medication : "Cordrazine",
      mass_of_contents : 40.48,
      number_of_pills : 23,
      time : ISODate(),
      action : "closed",
      pills_taken : 2
    } )


  Solution: Pill Bottle Write (3 of 3)
  ------------------------------------

  log the heartbeat

  .. code-block:: javascript

    db.bottle_heartbeats.updateOne(
    {
      bottle_id : ObjectId(...)
    },
    {
      $set: {
        last : <current_time>
      },
      $push: {
        previous : {
          $each: [ <current_time> ],
          $slice: -48
        }
      }
    }


  Solution: Query (1 of 4)
  ------------------------

  Check last 3 dosages for a skipped one

  .. code-block:: javascript

    db.bottle_actions.find(
      {
        bottle_id : ObjectId(...),
        action : "closed",
        pills_taken : { $gt : 0 },
        time : { $gte : <two days ago> }
      },
      { _id : 0, time : 1, pills_taken : 1, user_id : 1, medication : 1 }
    )

  .. note::

    - This finds the last two days' records
    - When the bottle is closed, it records the number of pills taken out while
      it was open


  Solution: Query (2 of 4)
  ------------------------

  Determine if the bottle was left open

  .. code-block:: javascript

    db.bottle_actions.find(
      {
          bottle_id : ObjectId(...)
      },
      { _id : 0, time : 1, action : 1, user_id : 1, medication : 1 }
    ).sort( { time : -1 } ).limit(1)

  If the last action was ``"opened"`` and the time was >5 minutes ago, it's most
  likely been left open.


  Solution: Query (3 of 4)
  ------------------------

  Check a specific bottle for a last heartbeat >60 minutes

  .. code-block:: javascript

    db.bottle_heartbeats.find(
      {
          bottle_id : ObjectId(...),
          last : { $gte : ISODate( <1 hour ago> ) }
      }
    ).count()

  If it's 0, then the bottle is disconnected from wi-fi


  Solution: Query (4 of 4)
  ------------------------

  Check all bottles for a last heartbeat >60 minutes

  .. code-block:: javascript

    db.bottle_heartbeats.find(
      {
          last : { $lte : ISODate( <1 hour ago> ) }
      }
    )


  Solution: Indexes (1 of 2)
  --------------------------

  .. code-block:: javascript

    db.bottle_actions.createIndex(
      {
          bottle_id : 1, action : 1, time : 1,
          pills_taken : 1, user_id : 1, medication : 1
      },
      { name : "find_missed_dosages" }
    )  // optimizes Query 1, AND allows for covered queries

    db.bottle_actions.createIndex(
      { bottle_id : 1, time : 1, action : 1, user_id : 1, medication : 1 },
      { name : "find_open_bottles" }
    )  // optimizes Query 2 for filtering/sorting, *and* allows for covered queries

  .. include:: /includes/student-notes.rst

  .. note::

    Each of these indexes is constructed very deliberately.

    - ``find_missed_dosages``

      - Exact match on ``bottle_id`` and ``action``, so those come first
      - Range match on ``time`` and ``pills_taken``, so those come next

        - ``time`` is more discriminating, which matters for a range query

      - Projection requires ``user_id`` and ``medication``, so those are
        added to make it a covered query.

    - ``find_open_bottles``

      - Exact match on ``bottle_id``, so that comes first
      - Sort by ``time``, so that comes next
      - Projection also returns ``action``, ``user_id``, and ``medication``, so
        those fields are included to make it a covered query.


  Solution: Indexes (2 of 2)
  --------------------------

  .. code-block:: javascript

    db.bottle_heartbeats.createIndex(
      { bottle_id : 1, last : 1 },
      { name : "find_bottle_heartbeat" }
    )  // Finding heartbeats for a given bottle

    db.bottle_heartbeats.createIndex(
      { last : 1 },
      { name : "find_last_heartbeat" }
    ) // Finding all heartbeats per last ones

  .. note::

    - ``find_bottle_heartbeat``

      - Exact match on ``bottle_id``, so that comes first
      - Sort by ``time`` (along with a range), so that comes next


  Sharding
  --------

  From a data storage point of view:

  - Sharding needed to keep heartbeats over a long period of time (144GB / day for 10M users)
  - The open & close log entries are just a few terabytes per year; no real need to shard.

  From an operation point of view:

  - 17K writes per second is a lot for a simple replica set. Either shard, or
    reduce the number of writes

    - We'll shard the ``bottle_heartbeats`` collection.


  Good shard key for "bottle_heartbeats" collection
  -------------------------------------------------

  Good option:

  A) ``{ bottle_id : 1, time : 1 }``

  - We want a shard key that distributes our writes.
  - Targeting the reads too would be good, but most frequent
    queries are scatter gather anyway, building reports or
    finding issues.

  - The ``bottle_id`` field *is* an ObjectId, *but* once a bottle is created,
    its heartbeats all have a fixed ``bottle_id``, so this is fine.

  "Hot" servers happen in cases where a shard key has values that are
  monotonically increasing with time. In these cases, one chunk will include
  the range from ``<some point in the past>`` to ``MaxKey``, and all inserts
  will go to that server.

  Reference: https://docs.mongodb.com/manual/core/sharding-shard-key/#monotonically-changing-shard-keys
