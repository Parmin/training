=============================================
Lab: Data Model for an Internet of Things App
=============================================

Introduction
------------

- Consier a an internet-connected pill bottle.
- It will:

  - Weigh its contents.
  - Track how many pills it contains.
  - Notify the user if they are late in taking a pill.

.. include:: /includes/student-notes.rst


Pill Bottle Information
-----------------------

- **pill** - the type of pill contained in the bottle.
- **mass** - the mass of the bottle's contents
- **mass per pill** - the mass of one of the pills contained in the bottle
- **number of pills**  - the number of pills in the bottle
- **Events** - When the bottle is opened or closed, how many pills
  added/removed
- **Heartbeat** - registering that the pill bottle is connected to wi-fi

.. include:: /includes/student-notes.rst


Pill Bottle Operations
----------------------

Each pill bottle will perform the following queries:

.. rst-class:: longlist

- A query to find the user it's associated with, plus the medication and
  dosage.

  - Frequency: very rarely; assume it would change 1/year.
  - Information: username, medication ID, medication mass per pill, frequency
    of dosage

- An operation to store information on the weight of its contents, and to act
  as a heartbeat.

  - Frequency: once every 10 minutes


Pill Bottle Operations (con't)
------------------------------

- An operation to log the time, the mass, the estimated number of pills in
  the bottle, and the number of pills taken while the botle was opened.

  - Frequency: 1-6 times per bottle per day (assume an average of 3)


Other Application Operations
----------------------------

There will also be a web and notification server which will do the following:

- Query 1/hour to determine:

  - Which customers are more than an hour late in taking their pill.
  - Which pill bottles have not called in for a heartbeat for an hour.

- Query when user logs in to a web site to generate a calendar showing on which
  days they take their pills and which days they miss one or more

  - Assume an average of 1/week

.. include:: /includes/student-notes.rst


Other Application Operations (cont'd)
-------------------------------------

- Store user contact information, bottle information, etc. when an account is
  created

  - Insert 1/year

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - If one of the students asks if it's even necessary to optimize this
      application, remind them that any product will face two possible paths
      down the line: it will scale, or it will fail.

      - If demand never picks up, the product will be dropped, and nothing will
        matter.
      - If demand does pick up, they'll want the system to work as efficiently
        as possible to minimize cost & hassle for any given load.


Deliverables
------------

Break into groups of two or three and work together to create the following
deliverables:

- Assumptions about sizing

  - number of documents per collection
  - frequency of requests

- Sample documents for each collection you're creating
- Queries the application will use
- Index creation commands
- Should you shard some collections? Now? Later?

  - Let's assume that you'd like for it to take off, and the market is up to 1
    billion customers, worldwide.

.. include:: /includes/student-notes.rst


Solution - Sizing
-----------------

- 100M customers in the first 3 years (up to 1B later)
- average of 3 bottles per customer
- operations:

  - 3 * 100M / 600 sec = 5M heartbeats per second

- data size:

  - 300M bottles * 100 bytes = 30GB
  - 100M customers * 1000 bytes = 100GB

.. include:: /includes/student-notes.rst

Solution - Collections
----------------------

- users

  - Contact Information
  - Bottles they're linked to, and medication associated with each bottle
  - Medications they take

    - Frequency of medication

.. include:: /includes/student-notes.rst

Solution - Collections (con't)
------------------------------


- bottles

  - Medication associated with the bottle
  - Mass of contents
  - Estimated number of pills
  - Timestamp of measurement
  - Action: heartbeat, bottle opened, or bottle closed
  - If bottle closed, number of pills added/removed

.. include:: /includes/student-notes.rst

Solution - Collections (con't)
------------------------------

- medications

  - Link to an image of the medication
  - Type of medication (pill, capsule, or liquid)
  - Information on the medication (string)

- notifications

  - Timestamp
  - Type (SMS, email)
  - Message
  - To

.. include:: /includes/student-notes.rst

Solution - Considerations
-------------------------

- There will be duplication of information between the ``Medications``
  collection and the ``Users`` collection.
- Capturing the "heartbeat" will be the most common operation,
  and we should optimize for that.
  
  - However, it's an insert. Optimizing for it
    consists of keeping the number of indexes small.

  - Another common operation is checking to see if there were any heartbeats
    in the last hour. Optimize for that, instead.

- Are there any health data regulation that requires us to keep the
  last X heartbeats or actions from a user for a period of time?

.. include:: /includes/student-notes.rst


Solution: Document - users (1 of 3)
-----------------------------------

.. code-block:: javascript

  {
    _id : "willcross", password_hash : "...",
    user: {
      last_name : "Cross",
      first_name : "William",
      honorific : "Dr."
    },  ... // continued on next slide

.. include:: /includes/student-notes.rst


Solution: Document - users (2 of 3)
-----------------------------------

.. code-block:: javascript

  { 
    ... ,
    contact_info : {
      addresses: [ {
        street : "229 West 43rd Street, 5th Floor",
        city : "New York",
        state : "NY",
        zip : "07302",
        type : "work",
        primary : true
      } ],
      phone_numbers : [ {
        type : "cell",
        number : "(555)555-5555",
        send_notifications : true
      } ],
      email : [ { address : "will@mongodb.com", send_notifications : true },
                { address : "will@mailinator.com", send_notifications : false } ]
    }, ...  // continued on next slide

.. include:: /includes/student-notes.rst


Solution: Document - users (3 of 3)
-----------------------------------

.. code-block:: javascript

  {
    ... ,
    bottles : [ {
        _id : ObjectId(...),
        medication_id : ObjectId(...),
        medication_name : "Cordrazine",
        medication_dosage : { quantity : 1, unit : "pill", times_per_day : 2 },
        mass_in_grams : 1.77,
        image : "http://s.quickmeme.com/img/94/945bdf761cb888c7c8e829878ed3b5a0221fd0d10db7b5697834ded0ad592c93.jpg"
      }, {
        _id : ObjectId(...),
        medication_id : ObjectId(...),
        medication_name : "Felicium",
        medication_dosage : { quantity : 2, unit : "pill", times_per_day : 3 },
        mass_in_grams : 2.7,
        image : "http://www.ex-astris-scientia.org/gallery/factfiles/felicium-dispenser-symbiosis.jpg"
      } ]
  }  // End of the users document

.. include:: /includes/student-notes.rst


Solution: Document - bottles
----------------------------

.. code-block:: javascript

  {
    _id : ObjectId(...),
    bottle_id : ObjectId(...),
    user_id : "..."
    mass_of_contents : 44.25,
    number_of_pills : 25,
    time : ISODate(...),
    action : "bottle closed",  // other options: "heartbeat", "bottle opened"
    pills_taken : 1
  }

.. include:: /includes/student-notes.rst


Solution: Document - notifications
----------------------------------

.. code-block:: javascript

  {
    _id : ObjectId(...),
    user_id : ObjectId(...),
    time_sent : ISODate(...),
    type : "SMS",
    target : "(555) 555-5555",
    message : "You missed a dose of Cordrazine this morning..."
  }

.. include:: /includes/student-notes.rst


Solution: Document - medications
--------------------------------

.. code-block:: javascript

  {
    _id : ObjectId(...),
    name : "Cordrazine",
    dosage_type : "pill",
    dosage_mass_in_grams : 1.77,
    image : "http://s.quickmeme.com/img/94/945bdf761cb888c7c8e829878ed3b5a0221fd0d10db7b5697834ded0ad592c93.jpg",
    info : "Cordrazine is a strong chemical stimulant useful for...",
    interactions : [ { medication_id : ObjectId(...), name : "Bio-Memetic Gel" }, { ... }, ... ],
    manufacturer : "Ferengi Pharmaceuticals"
  }

.. include:: /includes/student-notes.rst


Solution: Write - heartbeat for a Pill Bottle
---------------------------------------------

.. code-block:: javascript

  db.bottles.insertOne(
  {
    bottle_id : ObjectId(...),
    mass_of_contents : 44.25,
    number_of_pills : 25,
    time : ISODate(),
    action : "heartbeat"
  }

.. include:: /includes/student-notes.rst


Solution: Write - Pill Bottle, Opened
-------------------------------------

.. code-block:: javascript

  db.bottles.insertOne(
  {
    bottle_id : ObjectId(...),
    mass_of_contents : 44.25,
    number_of_pills : 25,
    time : ISODate(),
    action : "bottle opened"
  }

.. include:: /includes/student-notes.rst


Solution: Write - Pill Bottle, Closed
-------------------------------------

.. code-block:: javascript

  db.bottles.insertOne(
  {
    bottle_id : ObjectId(...),
    user_id : "willcross"
    mass_of_contents : 42.48,
    number_of_pills : 24,
    time : ISODate(),
    action : "bottle closed",
    pills_taken : 1
  } )

.. include:: /includes/student-notes.rst


Solution: Write - Web Server, Create User
-----------------------------------------

.. code-block:: javascript

  db.users.insertOne( { <user doc; see above> } )

.. include:: /includes/student-notes.rst


Write - Web Server, User Update
-------------------------------

.. code-block:: javascript

  db.users.updateOne( { _id : "willcross" },
  {
    $set : { bottles = [ { ... }, ... ] }
  } )

Examples: 

- User buys a new bottle
- User changes a medication in a bottle
- User changes contact information

.. include:: /includes/student-notes.rst


Solution: Query - Web Server, Fetch User Information
----------------------------------------------------

.. code-block:: javascript

  db.users.findOne( { _id : ObjectId(...), password_hash : "..." },
                    { _id : 0, user : 1, contact_info : 1, bottles : 1 } )

.. include:: /includes/student-notes.rst

Solution: Query - Web Server, Fetch History of Pills Taken for the Month
------------------------------------------------------------------------

.. code-block:: javascript

  db.bottles.find(
    { user_id : "username", action : "bottle closed" },
    { _id : 0, bottle_id : 1, time : 1, pills_taken : 1 }
  ).sort( { bottle_id : 1, time : 1 } )


Solution: Query - Server, checking for Pills Not Taken
------------------------------------------------------

.. code-block:: javascript

  db.bottles.find(
  { bottle_id : ObjectId(...),
    time : { $gte : ISODate(...), $lte : ISODate(...) },
    action : "bottle closed" },
  { _id : 0, time : 1, action : 1, pills_taken : 1 }
  ).sort( { time : 1 } )

  // if pill hasn't been taken:
  db.notifications.insertOne(
    {
      _id : ObjectId(...),
      user_id : ObjectId(...),
      time_sent : ISODate(...),
      type : "SMS",
      target : "(555) 555-5555",
      message : "You missed a dose of Cordrazine this morning..."
    } )

.. include:: /includes/student-notes.rst


Solution: Indexes
-----------------

.. code-block:: javascript

  db.bottles.createIndex(
  { user_id : 1, action : 1, bottle_id : 1, time : 1, pills_taken : 1 },
  { partialFilterExpression :{
    action : { $gte : "bottle closed", $lte : "bottle opened" } } }
  ) // Allows for a covered query when finding pills taken (or not).

  db.bottles.createIndex( { bottle_id : 1, time : 1,
                            action : 1, pills_taken : 1 }
  )  // The _id index is sufficient to limit us to just one document
     // for the user queries

  db.bottles.createIndex(
    { time : 1 },
    { partialFilterExpression : { action : "heartbeat" } },
      expireAfterSeconds : 604800 }
  ) // Delete the heartbeats after 1 week.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    The first index is a partial index. This ensures that the index entries are
    only created for ``"bottle closed"`` or ``"bottle opened"``, but not
    ``"heartbeat"``., making for a much smaller index that doesn't include
    heartbeats, and which doesn't need to be updated every time a heartbeat
    comes in.

    Also, there's no need to create an index on the ``users`` collection, since
    we're querying by _id (which is unique) in the find/updates, and indexes
    don't help with inserts.

    Finally, the partialFilterExpression ensures that only the heartbeats get
    deleted after one week.


Sharding
--------

From a data point of view:

- not needed for: userdata, medications
- needed to keep heartbeats over a long period of time

From an operation point of view:

- 5M writes per seconds is a lot for a simple replica set.
  Either shard, or reduce the number of writes

.. include:: /includes/student-notes.rst


Good shard key for "bottles" collection
---------------------------------------

A) ``{ user_id: 1,  bottle_id : 1, time : 1 }``

B) ``{ bottle_id: 1, time : 1 }``

.. note::

  - Including the ``time`` field ensures good cardinality.
  - Putting the time field after another field ensures that there will never be
    a "hot" server for the inserts.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    "Hot" servers happen in cases where a shard key has values that are
    monotonically increasing with time. In these cases, one chunk will include
    the range from ``<some point in the past>`` to ``MaxKey``, and all inserts
    will go to that server.

    Reference: https://docs.mongodb.com/manual/core/sharding-shard-key/#monotonically-changing-shard-keys


[WC/DC] summary of issues to Work On
------------------------------------

- do we want to move the heartbeat?

  - [WC] - put it in the bottles collection, and made a partial index to avoid
    indexing it for operations that don't require it.

  - [WC] - also gave it a TTL index so we don't keep those heartbeats for ever.

- 5M writes per seconds is a lot

  - be careful about the number of indexes associated with the heartbeat

- detail the ratio of reads/writes per collection
