=======================
Lab: Secure Replica Set
=======================

Premise
-------

- Setting up a MongoDB Replica set is quite easy and fast.
- Setting up a Secured MongoDB replica set requires a few extra steps.
- In this lab we will be exploring how to setup a secured Replica Set through
  Ops Manager.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Security is an important topic of production deployments and we want the
    students to be fully acquainted with the different options of MongoDB
    Security.


X.509 Authentication Mechanism
------------------------------

We will be using `X.509 certificates`_ for authentication and TLS/SSL network
encryption.


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    The actual X.509 details are out-of-scope for this training.
    Our purpose is **not**:

    - to educate people on the authentication mechanism itself
    - detailed explanation on how TLS/SSL works

    Our purpose is to:

    - Review the different authentication mechanisms
    - How students can use such mechanism if they choose too
    - The tradeoffs of X.509 when compared with other auth mechanisms


Ops Manager Group SSL and Auth
------------------------------

To build secured MongoDB deployments you first need to `enable Auth and SSL`_ on
your group.

All VMs have a set of certificates that you will be using to configure your
secured deployment.

In folder `/shared/etc/ssl` you will find:

- ``ca.pem``: SSL CA certificate
- ``automation.pem``: Automation agent certificate
- ``backup.pem``: Backup agent certificate
- ``monitor.pem``: Monitoring agent certificate
- ``nodeX.pem``: Replica set member certificates (X)
- ``dbadmin.pem``: MongoDB DB Admin certificate


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Ask students to list the files under `/shared/etc/ssl` on instances to validate
    that their installation process is correct.

    Make sure to highlight that:

    - The enabling of auth and ssl on a group level is to ensure correct
      communicate between all instances
    - Ensuring the same Certificate Authority (CA) certificate
    - Enabling agents to perform their normal operations
    - Create the required agent users


``VERYSAFE`` Group
------------------

Let's start by creating a group called ``VERYSAFE`` that has SSL enabled.

- Using the existing certificates, configure the agents accordingly.
- You need to specify certificates for

  * Certificate Authority
  * Monitoring Agent
  * Backup Agent
  * Automation Agent

- **The existing certificates do not have any decryption password!**

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    This might be a bit hard for students that are not experienced with Ops /
    Cloud Manager

    - Take the time to navigate users through the UI to configure these settings
    - Make sure that students do not provide a decypher password for the
      certificates

    Once the group is created you will need to reconfigure your existing agents
    to use the new group

    - Either you install new agents or just stop the service and reconfigure the
      agents configuration file

    .. code-block:: bash

      sudo service mongodb-mms-automation-agent stop
      #edit /etc/mongodb-mms/automation-agent.config and add new APIKey and GroupId
      sudo service mongodb-mms-automation-agent start

    - students will find the corresponding instructions on
      `Settings -> Agents -> Host Version Agent`

Secure Replica Set Deploy
-------------------------

Once the automation agent has been reconfigured and servers are detected on your
deployment, it's then time to deploy our secure replica set.

Create a replica set named **SECURE** with the following configuration:

- 3 Nodes:

  - **node1**, **node2** and **node3**
  - Port `27000`

- **clusterAuthMechanism**: x509
- **sslMode**: requiredSSL
- **sslPEMKeyFile**: `/shared/etc/ssl/nodeX.pem`

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Students should create a replica set from Ops Manager UI that will reflect
    the wanted configuration:

    - Once the ``VERYSAFE`` group has been create we need to **Add** ->
      **New Replica Set**

      - Name: SECURE
      - Port Range: **27000**
      - DB Path Prefix: ``/data``
      - clusterAuthMechanism: **x509**
      - sslMode: ``requiredSSL``
      - Apply

    - Once we have applied we now need to **Modify** the individual node members
      with the corresponding server **sslPEMKeyFile**

      - node1: `/shared/etc/ssl/node1.pem`


    - ``nodeX.pem``: there should be a certificate file per each node.
    - This setting needs to be configured on a per instance level.


X509 Users
----------

Time to create users that will authenticate using an X.509 certificate.

- Go ahead and create a `dbAdminAnyDatabase`_ user that authenticates using
  ``dbadmin.pem`` certificate.

- To create users that authenticate using X509 certificates you should check
  `Certificate Subject as user`_ docs

- After the user has been created, connect to the *Primary* node of the replica
  set and create database "``allgood``".

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Students might not be familiar with this mechanism so point them to
      `Certificate Subject as user`_.
    - Students will have to extract the certificate ``subject`` info

      .. code-block:: bash

        openssl x509 -in /share/etc/ssl/dbadmin.pem -inform PEM -subject -nameopt RFC2253
        subject= C=US,ST=New York,L=New York City,O=MongoDB,OU=EDUCATION,CN=dbadmin
        -----BEGIN CERTIFICATE-----
        MIIDezCCAmOgAwIBAgIDBZc1MA0GCSqGSIb3DQEBBQUAMGUxCzAJBgNVBAMTAkNB

      and use that subject info to create the required user.

    - We can create this user using the Ops Manager UI or we can connect to the
      replica set and perform the following operations:
    - Authenticate to primary node using automation agent certificate

      .. code-block:: bash

        mongo --host PRIMARY_NODE --ssl --sslPEMKeyFile /share/etc/ssl/automation.pem --sslCAFile /share/etc/ssl/ca.pem
        > db.getSiblingDB("$external").auth({
          mechanism: "MONGODB-X509",
          user:"C=US,ST=New York,L=New York City,O=MongoDB,OU=EDUCATION,CN=automation"
          })

    - Create the new ``dbAdminAnyDatabase`` user with the ``dbadmin.pem``
      certificate

      .. code-block:: javascript

        db.getSiblingDB("$external").runCommand({
          createUser: "C=US,ST=New York,L=New York City,O=MongoDB,OU=EDUCATION,CN=dbadmin",
          roles: [
            { role: 'dbAdminAnyDatabase', db: 'admin' }
          ],
          writeConcern: { w: "majority" , wtimeout: 5000 }
        })

    - Connect to primary using ``dbadmin.pem``:

      .. code-block:: bash

        mongo --host PRIMARY_NODE  --ssl --sslPEMKeyFile /share/etc/ssl/dbadmin.pem
        --sslCAFile /share/etc/ssl/ca.pem

    - Authenticate and create new database ``allgood``

      .. code-block:: javascript

        db.getSiblingDB("$external").auth({
          mechanism: "MONGODB-X509",
          user:"C=US,ST=New York,L=New York City,O=MongoDB,OU=EDUCATION,CN=dbadmin"
        })

        db.createDatabase("allgood")




.. _`X.509 certificates`: https://docs.mongodb.com/manual/core/security-x.509/
.. _`Auditing`: https://docs.mongodb.com/manual/core/auditing/
.. _`enable Auth and SSL`: https://docs.opsmanager.mongodb.com/current/tutorial/enable-ssl-for-a-deployment/
.. _`dbAdminAnyDatabase`: https://docs.mongodb.com/manual/reference/built-in-roles/#dbAdminAnyDatabase
.. _`Certificate Subject as user`: https://docs.mongodb.com/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user
