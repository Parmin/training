=======================
Lab: Updating Documents
=======================


Exercise: Pass Inspections
--------------------------

In the sample.inspections namespace, let's imagine that we want to do a little data cleaning. We've decided to eliminate the "Completed" inspection result and use only "No Violation Issued" for such inspection cases. Please update all inspections accordingly.

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.updateMany({result: "Completed"},
                                  {$set: {result: "No Violation Issued"}})
        {
          "acknowledged": true,
          "matchedCount": 20,
          "modifiedCount": 20
        }


.. include:: /includes/student-notes.rst


Exercise: Set ``fine`` value
----------------------------

For all inspections that failed, set a ``fine`` value of 100.

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.updateMany({result: "Fail"},
                                  {$set: {fine: 100}})
        {
          "acknowledged": true,
          "matchedCount": 1120,
          "modifiedCount": 1120
        }

Exercise: Increase ``fine`` in ROSEDALE
---------------------------------------

- Update all inspections done in the city of "ROSEDALE".
- For failed inspections, raise the "fine" value by 150.

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.updateMany({"address.city": "ROSEDALE", result: "Fail" },
                                  {$inc: {fine: 150}})
        {
          "acknowledged": true,
          "matchedCount": 1120,
          "modifiedCount": 1120
        }
.. include:: /includes/student-notes.rst


Exercise: Give a pass to "MONGODB"
----------------------------------

- Today MongoDB got a visit from the inspectors.
- We passed, of course.
- So go ahead and update "MongoDB" and set the ``result`` to "AWESOME"
- MongoDB's address is

  .. code-block:: javascript

    {city: 'New York', zip: 10036, street: '43', number: 229}

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.updateOne({business_name: "MongoDB"},
                                 {$set: {
                                   address: {
                                       city: "New York",
                                       zip: 10036,
                                       street: "43",
                                       number: 229 },
                                   result: "AWESOME",
                                   id: "XXXXXXX",
                                   certificate_number: 140021221},
                                  $currentDate: {date: {$type: "date"}}},
                                  {upsert: true})
        {
        	"acknowledged" : true,
        	"matchedCount" : 0,
        	"modifiedCount" : 0,
        	"upsertedId" : ObjectId("573f29d8dc8e6b0ba6e8f594")
        }

    We can also add a variation to see if students can determine how to sort results so they can look at certificate numbers granted in sequence. Kudos to students that recognize the need to filter for certificate_number values that are integers and also do some form of projection.

    .. code-block:: javascript

        db.inspections.find(
            {certificate_number: {$type:16}},
            {certificate_number: 1,
             id:1}).sort({certificate_number:-1}).limit(1)

.. include:: /includes/student-notes.rst

Exercise: Updating Array Elements
---------------------------------

Insert a document representing product metrics for a backpack:

.. code-block:: javascript

   db.product_metrics.insertOne(
      { name: "backpack",
        purchasesPast7Days: [ 0, 0, 0, 0, 0, 0, 0] })

Each 0 within the "purchasesPast7Days" field corresponds to a day of the week. The first element is Monday, the second element is Tuesday, etc.).

Write an update statement to increment the number of backpacks sold on Friday by 200.

.. only:: instructor

   .. note::

      - Talk about how this can be used for time series data, real-time graphs/charts

        .. code-block:: javascript

          db.product_metrics.updateOne(
              {name: "backpack" },
              {$inc: { "purchases_past_7_days.4" : 200 } } )

.. include:: /includes/student-notes.rst
