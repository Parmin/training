=======================
Lab: Updating Documents
=======================


Exercise: Pass Inspections
--------------------------

Using the ``sample.inspections`` namespace, let's go ahead and
update all inspections with a result of "Completed" to have the result "No Violation Issued"


.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.update({result: 'No Violation Issued'}, {$set: {result: 'Completed' }},false, true  )
        WriteResult({
          "nMatched": 37749,
          "nUpserted": 0,
          "nModified": 37749
        })
        //or
        db.inspections.updateMany({result: 'No Violation Issued'}, {$set: {result: 'Completed' }})
        {
          "acknowledged": true,
          "matchedCount": 37749,
          "modifiedCount": 37749
        }


.. include:: /includes/student-notes.rst


Exercise: Set  ``fine`` value
-----------------------------

- To all inspections that failed the inspection
- We will be setting a fine value of 100

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.update({'result': 'Fail'}, {$set: {fine: 100}}, false, true  )
        WriteResult({
          "nMatched": 1120,
          "nUpserted": 0,
          "nModified": 1120
        })

Exercise: Increase ``fine`` in ROSEDALE
---------------------------------------

- Update all inspections done in the city of **"ROSEDALE"**
- To failed inspections
- Raise the ``fine`` value by 150


.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.update({'address.city': 'ROSEDALE', result: 'Fail' }, {$inc: {fine: 150 }},false, true  )
        WriteResult({
          "nMatched": 2,
          "nUpserted": 0,
          "nModified": 2Ã‚
        })

.. include:: /includes/student-notes.rst


Exercise: Give a pass to "MONGODB"
---------------------------------------

- Today MongoDB got the visit from the inspectors
- Obviously we have no problems with the officials
- So go ahead and update "MongoDB" and set the ``result`` to "AWESOME"
- MongoDB's address is {city: 'New York', zip: 10036, street: '43', number: 229}

.. only:: instructor

   .. note::

      .. code-block:: javascript

        db.inspections.update({'business_name': 'MongoDB' }, {
        $set: {
          address: {
            city: 'New York',
            zip: 10036, street: '43', number: 229
          },
          result: 'AWESOME',
          id: "XXXXXXX",
          certificate_number: 140021221},
        $currentDate: {date: { $type: "date" } }
        },
          true, false  )
          WriteResult({
          "nMatched": 0,
          "nUpserted": 1,
          "nModified": 0,
          "_id": ObjectId("XXXXXXXXX")
        })

    On this exercise we can also add a variation around the certificate_number
    to check o can come up with the query that finds out which would be
    the following certificate_number.

    Something like this query should be granted extra points:

      .. code-block:: javascript

        db.inspections.find({certificate_number: {$type:16}},
          {certificate_number: 1, id: 1}).sort({certificate_number:-1}).limit(1)

.. include:: /includes/student-notes.rst

Exercise: Updating Array Elements
---------------------------------

Insert a document representing product metrics for a backpack:

.. code-block:: javascript

   db.product_metrics.insert(
      { name: "backpack",
        purchasesPast7Days: [ 0, 0, 0, 0, 0, 0, 0] })

Each 0 within the "purchasesPast7Days" field corresponds to a day of the week. The first element is Monday, the second element is Tuesday, etc.).

Write an update statement to increment the number of backpacks sold on Friday by 200.

.. only:: instructor

   .. note::

      - Talk about how this can be used for time series data, real-time graphs/charts

        .. code-block:: javascript

          db.product_metrics.update( { "name" : "backpack" },
            { $inc : { "purchases_past_7_days.4" : 200 } } )

.. include:: /includes/student-notes.rst
