======================================
Exercise: Setting Up a Sharded Cluster
======================================


Learning Objectives
-------------------

Upon completing this module students should understand:

- How to set up a sharded cluster including:
  
  - Replica Sets as Shards
  - Config Servers
  - Mongos processes

- How to enable sharding for a database
- How to shard a collection
- How to determine where data will go

.. include:: /includes/student-notes.rst


Our Sharded Cluster
-------------------

- In this exercise, we will set up a cluster with 3 shards.
- Each shard will be a replica set with 3 members (including one arbiter).
- We will insert some data and see where it goes.

.. include:: /includes/student-notes.rst


Sharded Cluster Configuration
-----------------------------

- Three shards:

  #. A replica set on ports 27107, 27108, 27109
  #. A replica set on ports 27117, 27118, 27119
  #. A replica set on ports 27127, 27128, 27129

- Three config servers on ports 27217, 27218, 27219
- Two mongos servers at ports 27017 and 27018

.. include:: /includes/student-notes.rst


Build Our Data Directories
--------------------------

On Linux or MacOS, run the following in the terminal to create the data directories we'll need.

.. code-block:: bash

   mkdir -p ~/data/cluster/config/{c0,c1,c2}
   mkdir -p ~/data/cluster/shard0/{m0,m1,arb}
   mkdir -p ~/data/cluster/shard1/{m0,m1,arb}
   mkdir -p ~/data/cluster/shard2/{m0,m1,arb}
   mkdir -p ~/data/cluster/{s0,s1}

On Windows, run the following commands instead:

.. code-block:: powershell

   md c:\data\cluster\config\c0 c:\data\cluster\config\c1 c:\data\cluster\config\c2
   md c:\data\cluster\shard0\m0 c:\data\cluster\shard0\m1 c:\data\cluster\shard0\arb
   md c:\data\cluster\shard1\m0 c:\data\cluster\shard1\m1 c:\data\cluster\shard1\arb
   md c:\data\cluster\shard2\m0 c:\data\cluster\shard2\m1 c:\data\cluster\shard2\arb
   md c:\data\cluster\s0 c:\data\cluster\s1

    
.. include:: /includes/student-notes.rst


Initiate a Replica Set (Linux/MacOS)
------------------------------------

.. code-block:: bash

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard0/m0 \
          --logpath ~/data/cluster/shard0/m0/mongod.log \
          --fork --port 27107

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard0/m1 \
          --logpath ~/data/cluster/shard0/m1/mongod.log \
          --fork --port 27108

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard0/arb \
          --logpath ~/data/cluster/shard0/arb/mongod.log \
          --fork --port 27109

   mongo --port 27107 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27108');\
       rs.addArb('<HOSTNAME>:27109')"


.. include:: /includes/student-notes.rst

Initiate a Replica Set (Windows)
--------------------------------

.. code-block:: bash

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard0\m0 \
          --logpath c:\data\cluster\shard0\m0\mongod.log \
          --port 27107 --oplogSize 10

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard0\m1 \
          --logpath c:\data\cluster\shard0\m1\mongod.log \
          --port 27108 --oplogSize 10

   mongod --replSet shard0 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard0\arb \
          --logpath c:\data\cluster\shard0\arb\mongod.log \
          --port 27109 --oplogSize 10

   mongo --port 27107 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27108');\
       rs.addArb('<HOSTNAME>:27109')"


.. include:: /includes/student-notes.rst


Spin Up a Second Replica Set (Linux/MacOS)
------------------------------------------
    
.. code-block:: bash

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard1/m0 \
          --logpath ~/data/cluster/shard1/m0/mongod.log \
          --fork --port 27117

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard1/m1 \
          --logpath ~/data/cluster/shard1/m1/mongod.log \
          --fork --port 27118

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard1/arb \
          --logpath ~/data/cluster/shard1/arb/mongod.log \
          --fork --port 27119

   mongo --port 27117 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27118');\
       rs.addArb('<HOSTNAME>:27119')"

.. include:: /includes/student-notes.rst

Spin Up a Second Replica Set (Windows)
------------------------------------------
    
.. code-block:: bash

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard1\m0 \
          --logpath c:\data\cluster\shard1\m0\mongod.log \
          --port 27117 --oplogSize 10

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard1\m1 \
          --logpath c:\data\cluster\shard1\m1\mongod.log \
          --port 27118 --oplogSize 10

   mongod --replSet shard1 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard1\arb \
          --logpath c:\data\cluster\shard1\arb\mongod.log \
          --port 27119 --oplogSize 10

   mongo --port 27117 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27118');\
       rs.addArb('<HOSTNAME>:27119')"

.. include:: /includes/student-notes.rst



A Third Replica Set (Linux/MacOS)
---------------------------------
    
.. code-block:: bash

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard2/m0 \
          --logpath ~/data/cluster/shard2/m0/mongod.log \
          --fork --port 27127

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard2/m1 \
          --logpath ~/data/cluster/shard2/m1/mongod.log \
          --fork --port 27128

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/shard2/arb \
          --logpath ~/data/cluster/shard2/arb/mongod.log \
          --fork --port 27129

   mongo --port 27127 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27128');\
       rs.addArb('<HOSTNAME>:27129')"

.. include:: /includes/student-notes.rst

A Third Replica Set (Windows)
-----------------------------
    
.. code-block:: bash

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard2\m0 \
          --logpath c:\data\cluster\shard2\m0\mongod.log \
          --port 27127 --oplogSize 10

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard2\m1 \
          --logpath c:\data\cluster\shard2\m1\mongod.log \
          --port 27128 --oplogSize 10

   mongod --replSet shard2 --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\shard2\arb \
          --logpath c:\data\cluster\shard2\arb\mongod.log \
          --port 27129 --oplogSize 10

   mongo --port 27127 --eval "\
       rs.initiate(); sleep(3000);\
       rs.add   ('<HOSTNAME>:27128');\
       rs.addArb('<HOSTNAME>:27129')"

.. include:: /includes/student-notes.rst


Status Check
------------

- Now we have three replica sets running. 
- We have one for each shard.
- They do not know about each other yet.
- To make them a sharded cluster we will:

  - Build our config databases
  - Launch our mongos processes
  - Add each shard to the cluster

- To benefit from this configuration we also need to:

  - Enable sharding for a database
  - Shard at least one collection within that database

.. include:: /includes/student-notes.rst


Launch Config Servers (Linux/MacOS)
-----------------------------------
.. code-block:: bash

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/config/c0 \
          --logpath ~/data/cluster/config/c0/mongod.log \
          --fork --port 27217 --configsvr

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/config/c1 \
          --logpath ~/data/cluster/config/c1/mongod.log \
          --fork --port 27218 --configsvr

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath ~/data/cluster/config/c2 \
          --logpath ~/data/cluster/config/c2/mongod.log \
          --fork --port 27219 --configsvr

.. include:: /includes/student-notes.rst

Launch Config Servers (Windows)
-------------------------------
.. code-block:: bash

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\config\c0 \
          --logpath c:\data\cluster\config\c0\mongod.log \
          --port 27217 --configsvr

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\config\c1 \
          --logpath c:\data\cluster\config\c1\mongod.log \
          --port 27218 --configsvr

   mongod --smallfiles --nojournal --noprealloc \
          --dbpath c:\data\cluster\config\c2 \
          --logpath c:\data\cluster\config\c2\mongod.log \
          --port 27219 --configsvr

.. include:: /includes/student-notes.rst


Launch the Mongos Processes (Linux/MacOS)
-----------------------------------------

Now our mongos's. We need to tell them about our config servers.

.. code-block:: bash

   mongos --logpath ~/data/cluster/s0/mongos.log --fork --port 27017 \
          --configdb localhost:27217,localhost:27218,localhost:27219

   mongos --logpath ~/data/cluster/s1/mongos.log --fork --port 27018 \
          --configdb localhost:27217,localhost:27218,localhost:27219

.. include:: /includes/student-notes.rst

Launch the Mongos Processes (Windows)
-------------------------------------

Now our mongos's. We need to tell them about our config servers.

.. code-block:: bash

   mongos --logpath c:\data\cluster\s0\mongos.log --port 27017 \
          --configdb localhost:27217,localhost:27218,localhost:27219

   mongos --logpath c:\data\cluster\s1\mongos.log --port 27018 \
          --configdb localhost:27217,localhost:27218,localhost:27219

.. include:: /includes/student-notes.rst


Add All Shards
--------------

.. code-block:: bash

   echo 'sh.addShard( "shard0/localhost:27107" ); \
         sh.addShard("shard1/localhost:27117" ); \
         sh.addShard( "shard2/localhost:27127" ); sh.status()' | mongo

.. note::

   Instead of doing this through a bash (or other) shell command, you may prefer to launch a mongo shell and issue each command individually.

.. include:: /includes/student-notes.rst


Enable Sharding and Shard a Collection
--------------------------------------

Enable sharding for the test database, shard a collection, and insert some documents.

.. code-block:: bash

   echo 'sh.enableSharding("test"); \
         sh.shardCollection("test.testcol", { a : 1, b : 1 } )' | mongo

   echo 'for (i=0; i<10000; i++) { docArr = []; for (j=0; j<1000; j++) { \
        docArr.push( { a : i, b : j, c : "Filler String 000000000000000000000 \
        000000000000000000000000000000000000000000000000000000000000000000000 \
        000000000000000" } )  }; db.testcol.insert(docArr) }' | mongo

.. include:: /includes/student-notes.rst


Observe What Happens
--------------------

Connect to either mongos using a mongo shell and frequently issue:

.. code-block:: bash

   sh.status()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Point out to the students that you can see chunks get created and moved to different shards.

      - Also useful to have students run a query or two.

        .. code-block:: bash

           db.testcol.find( { a : { $lte : 100 } } ).explain()
