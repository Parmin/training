Exercise: Setting Up a Sharded Cluster
--------------------------------------

Set up a sharded cluster with the following servers: 

- Three sharded replica sets

  - A sharded replica set on ports 27107, 27108, 27109
  - A sharded replica set on ports 27117, 27118, 27119
  - A sharded replica set on ports 27127, 27128, 27129

- Three config servers on ports 27217, 27218, 27219
- Two mongos's at ports 27017 and 27018


.. only:: instructor

    First, let's build out our directories and 
    
    .. code-block:: bash
    
        CLUSTER=/data/cluster
        CONFIG=$CLUSTER/config
        SHARD0=$CLUSTER/shard0
        SHARD1=$CLUSTER/shard1
        SHARD2=$CLUSTER/shard2
        mkdir -p $CONFIG/c0 $CONFIG/c1 $CONFIG/c2
        mkdir -p $SHARD0/m0 $SHARD0/m1 $SHARD0/arb
        mkdir -p $SHARD1/m0 $SHARD1/m1 $SHARD1/arb
        mkdir -p $SHARD2/m0 $SHARD2/m1 $SHARD2/arb
        mkdir -p $CLUSTER/s0 $CLUSTER/s1
    
    Next, let's spin up our first replica set, and initiate.
    
    .. code-block:: bash
    
        mongod --replSet shard0 --smallfiles --nojournal --noprealloc --dbpath $SHARD0/m0 --logpath $SHARD0/m0/mongod.log --fork --port 27107
        mongod --replSet shard0 --smallfiles --nojournal --noprealloc --dbpath $SHARD0/m1 --logpath $SHARD0/m1/mongod.log --fork --port 27108
        mongod --replSet shard0 --smallfiles --nojournal --noprealloc --dbpath $SHARD0/arb --logpath $SHARD0/arb/mongod.log --fork --port 27109
        echo "cfg = { '_id' : 'shard0', 'version' : 1, 'members' : [ { '_id' : 0, 'host' : 'localhost:27107' }, { '_id' : 1, 'host' : 'localhost:27108' }, { '_id' : 2, 'host' : 'localhost:27109', 'arbiterOnly' : true } ] }; rs.initiate(cfg);" | mongo --port 27107
    
    
    Next, let's spin up our second replica set.
    
    .. code-block:: bash

        mongod --replSet shard1 --smallfiles --nojournal --noprealloc --dbpath $SHARD1/m0 --logpath $SHARD1/m0/mongod.log --fork --port 27117
        mongod --replSet shard1 --smallfiles --nojournal --noprealloc --dbpath $SHARD1/m1 --logpath $SHARD1/m1/mongod.log --fork --port 27118
        mongod --replSet shard1 --smallfiles --nojournal --noprealloc --dbpath $SHARD1/arb --logpath $SHARD1/arb/mongod.log --fork --port 27119
        echo "cfg = { '_id' : 'shard1', 'version' : 1, 'members' : [ { '_id' : 0, 'host' : 'localhost:27117' }, { '_id' : 1, 'host' : 'localhost:27118' }, { '_id' : 2, 'host' : 'localhost:27119', 'arbiterOnly' : true } ] }; rs.initiate(cfg);" | mongo --port 27117
    
    
    Next, let's spin up our third replica set.
    
    .. code-block:: bash

        mongod --replSet shard2 --smallfiles --nojournal --noprealloc --dbpath $SHARD2/m0 --logpath $SHARD2/m0/mongod.log --fork --port 27127
        mongod --replSet shard2 --smallfiles --nojournal --noprealloc --dbpath $SHARD2/m1 --logpath $SHARD2/m1/mongod.log --fork --port 27128
        mongod --replSet shard2 --smallfiles --nojournal --noprealloc --dbpath $SHARD2/arb --logpath $SHARD2/arb/mongod.log --fork --port 27129
        echo "cfg = { '_id' : 'shard2', 'version' : 1, 'members' : [ { '_id' : 0, 'host' : 'localhost:27127' }, { '_id' : 1, 'host' : 'localhost:27128' }, { '_id' : 2, 'host' : 'localhost:27129', 'arbiterOnly' : true } ] }; rs.initiate(cfg);" | mongo --port 27127

    OK, we've now got 3 replica sets running. They don't know about each other. We'll now build our config databases.

    .. code-block:: bash

        mongod --smallfiles --nojournal --noprealloc --dbpath $CONFIG/c0 --logpath $CONFIG/c0/mongod.log --fork --port 27227 --configsvr
        mongod --smallfiles --nojournal --noprealloc --dbpath $CONFIG/c1 --logpath $CONFIG/c1/mongod.log --fork --port 27228 --configsvr
        mongod --smallfiles --nojournal --noprealloc --dbpath $CONFIG/c2 --logpath $CONFIG/c2/mongod.log --fork --port 27229 --configsvr

    Now our mongos's. We need to tell them about our config servers.

    .. code-block:: bash

        mongos --logpath $CLUSTER/s0/mongos.log --fork --port 27017 --configdb localhost:27227,localhost:27228,localhost:27229
        mongos --logpath $CLUSTER/s1/mongos.log --fork --port 27018 --configdb localhost:27227,localhost:27228,localhost:27229
        echo 'sh.addShard( "shard0/localhost:27107" ); sh.addShard( "shard1/localhost:27117" ); sh.addShard( "shard2/localhost:27127" ); sh.status()' | mongo

    Now, enable sharding for the test db, and shard the 'shardedCollection' database, and start inserting documents.

    .. code-block:: bash

        echo 'sh.enableSharding("test"); sh.shardCollection("test.shardedCollection", { a : 1, b : 1 } )' | mongo
        echo 'for (i=0; i<10000; i++) { docArr = []; for (j=0; j<1000; j++) { docArr.push( { a : i, b : j, c : "Filler String 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" } )  }; db.shardedCollection.insert(docArr) }' | mongo

    Then, open up a new tab, connect to either mongos, and frequently use:

    .. code-block:: bash

        sh.status()

    Point out how cool it is that you can see chunks get created and moved to the different shards.

    .. code-block:: bash

        db.foo.find( { a : { $lte : 100 } ).explain()
