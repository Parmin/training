========================================
Exercise: Building and Examining Indexes
========================================

1. Determine the index needed for the query
-------------------------------------------

Run the the following Javascript file from the USB drive:   

.. code-block:: javascript

   mongo --shell localhost/performance performance.js
   > performance.init()

The method above will build a sample data set in the "sensor_readings" collection.

What index is needed for the following query:

.. code-block:: javascript

   db.sensor_readings.find( 
      { tstamp: { $gte: ISODate("2012-08-01"), $lte: ISODate("2012-09-01") },  
        active: true } ).limit(3)

.. only:: instructor

   .. note::

      - Work through method of explaining query with .explain("executionStats")
      - Look at differences between (timestamp, active) and (active, timestamp)
        

.. include:: /includes/student-notes.rst


2. What index is needed for the following query to avoid an in-memory sort:
---------------------------------------------------------------------------
   
.. code-block:: javascript

   db.sensor_readings.find( 
      { active: true } ).sort( { tstamp : -1 })
   
.. only:: instructor

   .. note::

      - (active, tstamp)

.. include:: /includes/student-notes.rst


3. What index is needed for the following query to avoid an in-memory sort:
---------------------------------------------------------------------------
   
.. code-block:: javascript

   db.sensor_readings.find( 
      { x : { $in : [100, 200, 300, 400] } }
      ).sort( { tstamp : -1 })
   
.. only:: instructor

   .. note::

      - Trick question, the obvious answer to most students will be (x, tstamp), however, the $in will require an in-memory sort
      - (tstamp) or (tstamp, x) are the only indexes that will prevent an in-memory sort, but aren't selective at all

.. include:: /includes/student-notes.rst


4. Determine Indexes Needed 
---------------------------

In a mongo shell run performance.b(). This will run in an infinite loop printing some output as it runs various statements against the server.

We'll now imagine that on this system a user has complained of slowness and we suspect there is a slow operation running. Find the slow operation and terminate it (every slow operation is assumed to be over 100ms).

In order to do this, you'll want to open a second window (or tab) and there, run a second instance of the mongo shell.

What are the minimum indexes needed to satisfy all slow queries against the database (disregard the index created in the previous exercise)?

.. only:: instructor

   .. note::
      - Look at the logs to find queries over 100ms
      - "active" 
      - "str", "x"

.. include:: /includes/student-notes.rst
        
5. Using .explain("executionStats")
-----------------------------------

Drop all indexes from previous exercises:

.. code-block:: javascript

   mongo performance
   > db.sensor_readings.dropIndexes()
      
Create an index for the "active" field:

.. code-block:: javascript
   
   > db.sensor_readings.createIndex({ "active" : 1 } )

Based on the explain plan, how many documents are examined for the following query, how many index entries, and how many results are returned?

.. code-block:: javascript

   db.sensor_readings.find(
      { "active" : false, 
        "_id" : { $gte : 99, $lte: 1000 } } ).explain("executionStats")

.. include:: /includes/student-notes.rst

