=======================================
Lab: Installing and Configuring MongoDB
=======================================

Learning Objectives
-------------------

Upon completing this exercise students should understand:

- How MongoDB is distributed
- How to install MongoDB
- Configuration steps for setting up a simple MongoDB deployment
- How to run MongoDB
- How to run the Mongo shell

.. include:: /includes/student-notes.rst


Production Releases
-------------------

64-bit production releases of MongoDB are available for the following platforms.

- Windows
- OSX
- Linux
- Solaris

.. include:: /includes/student-notes.rst


Installing MongoDB
------------------

- Visit http://docs.mongodb.org/manual/installation/.
- We strongly recommend you to install the Enterprise Version
- Click on the appropriate link, such as "Install on Windows" or "Install on OS X" and follow the instructions.

- Versions:

  - Even-numbered builds are production releases, e.g., 2.4.x, 2.6.x.
  - Odd-numbers indicate development releases, e.g., 2.5.x, 2.7.x.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::



Linux Setup
-----------

.. code-block:: bash

   PATH=$PATH:<path to mongodb>/bin

   sudo mkdir -p /data/db

   sudo chmod -R 744 /data/db

   sudo chown -R `whoami` /data/db

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - You might want to add the MongoDB bin directory to your path, e.g.
      - Once installed, create the MongoDB data directory.
      - Make sure you have write permission on this directory.


      If you are using Koding these are a few instructions you can follow:

        - Download MongoDB tarbal and setup the environment

        .. code-block:: bash

          wget http://downloads.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1204-3.2.1.tgz
          tar xzvf mongodb-linux-x86_64-ubuntu1204-3.2.1.tgz
          cd mongodb-linux-x86_64-ubuntu1204-3.2.1/bin
          export PATH=`pwd`:$PATH


Install on Windows
------------------

- Download and run the .msi Windows installer from mongodb.org/downloads.
- By default, binaries will be placed in the following directory.

  .. code-block:: none

     C:\Program Files\MongoDB\Server\<VERSION>\bin

- It is helpful to add the location of the MongoDB binaries to your path.
- To do this, from "System Properties" select "Advanced" then "Environment Variables"

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Can also install Windows as a service, but not recommended since we need multiple mongod processes for future exercises


Create a Data Directory on Windows
----------------------------------

- Ensure there is a directory for your MongoDB data files.
- The default location is ``\data\db``.
- Create a data directory with a command such as the following.

  .. code-block:: none

     md \data\db

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Optionally, talk about the --dbpath variable and specifying a different location for the data files



Launch a ``mongod``
-------------------

Explore the ``mongod`` command.

.. code-block:: bash

   <path to mongodb>/bin/mongod --help

Launch a ``mongod`` with the MMAPv1 storage engine:

.. code-block:: bash

   <path to mongodb>/bin/mongod

Alternatively, launch with the WiredTiger storage engine.

.. code-block:: bash

   <path to mongodb>/bin/mongod --storageEngine wiredTiger

Specify an alternate path for data files using the ``--dbpath`` option. (Make sure the directory already exists.) E.g.,

.. code-block:: none

   <path to mongodb>/bin/mongod --storageEngine wiredTiger
                                --dbpath /test/mongodb/data/wt


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Please verify that all students have successfully installed MongoDB.
      - Please verify that all can successfully launch a mongod.


The MMAPv1 Data Directory
-------------------------

.. code-block:: bash

   ls /data/db

- The mongod.lock file

  - This prevents multiple mongods from using the same data directory simultaneously.
  - Each MongoDB database directory has one .lock.
  - The lock file contains the process id of the mongod that is using the directory.

- Data files

  - The names of the files correspond to available databases.
  - A single database may have multiple files.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Files for a single database increase in size as follows:

      - sample.0 is 64 MB
      - sample.1 is 128 MB
      - sample.2 is 256 MB, etc.
      - This continues until sample.5, which is 2 GB
      - All subsequent data files are also 2 GB.


The WiredTiger Data Directory
-----------------------------

.. code-block:: bash

   ls /data/db

- The mongod.lock file

  - Used in the same way as MMAPv1.
- Data files

  - Each collection and index stored in its own file.
  - Will fail to start if MMAPv1 files found

.. include:: /includes/student-notes.rst


Import Exercise Data
--------------------

.. code-block:: bash

   cd usb_drive

   unzip sampledata.zip

   cd sampledata

   mongoimport -d sample -c tweets twitter.json

   mongoimport -d sample -c zips zips.json

   mongoimport -d sample -c grades grades.json

   cd dump

   mongorestore -d sample city

   mongorestore -d sample digg

**Note:** If there is an error importing data directly from a USB drive, please copy the sampledata.zip file to your local computer first.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      For local installs

      - Import the data provided on the USB drive into the *sample* database.

      For Koding environment

      - Download *sample* data from:

      .. code-block:: bash

        wget https://www.dropbox.com/s/54xsjwq59zoq1fe/sample.tgz

Launch a Mongo Shell
--------------------

Open another command shell. Then type the following to start the Mongo shell.

.. code-block:: bash

   mongo

Display available commands.

.. code-block:: bash

   help

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

    On Koding environment do the following:

    - Create a new *Terminal* and rename it to **Client**


Explore Databases
-----------------

Display available databases.

.. code-block:: bash

   show dbs

To use a particular database we can type the following.

.. code-block:: bash

   use <database_name>

   db

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - This assigns the variable :js:data:`db` to a connection object for the selected database.
      - We can display the name of the database we are currently using by evaluating :js:data:`db` in the mongo shell.
      - Highlight the power of the Mongo shell here.
      - It is a fully programmable JavaScript environment.

        - To demonstrate this you can use the following code block

        .. code-block:: js

          for(i=0;i<10;i++){ print("this is line "+i)}



Exploring Collections
---------------------


.. code-block:: bash

   show collections

   db.<COLLECTION>.help()

   db.<COLLECTION>.find()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Show the collections available in this database.
      - Show methods on the collection with parameters and a brief explanation.
      - Finally, we can query for the documents in a collection.


Admin Commands
--------------

- There are also a number of admin commands at our disposal.
- The following will shut down the mongod we are connected to through the Mongo shell.
- You can also just kill with Ctrl-C in the shell window from which you launched the mongod.

  .. code-block:: bash

     db.adminCommand( { shutdown : 1 } )

- Confirm that the mongod process has indeed stopped.
- Once you have, please restart it.

.. include:: /includes/student-notes.rst
