============================
Exercise: Installing MongoDB
============================

.. topic:: Learning Objectives 

   - How MongoDB is distributed
   - How to install MongoDB
   - Configuration steps for setting up a simple MongoDB deployment
   - How to run MongoDB
   - How to run the Mongo shell


Production Releases
-------------------

64-bit production releases of MongoDB are available for the following platforms.

- Windows
- OSX
- Linux
- Solaris


Installing MongoDB
------------------

- Visit http://www.mongodb.org/downloads
- Download and install the appropriate package for your machine.
- Even-numbered builds are production releases, e.g., 2.4.x, 2.6.x.
- Odd-numbers indicated development releases, e.g., 2,5.x, 2.7.x.
- 32-bit versions should NOT be used in production (limited to 2GB of data). They are acceptable for training classes.

You might want to add the MongoDB bin directory to your path, e.g.

::

  PATH=$PATH:path_to_mongodb/bin


Once installed, create the MongoDB data directory.

::

  sudo mkdir /data/db


Make sure you have write permission on this directory.

::

  sudo chmod 770 /data/db


Open a command shell and explore the mongod command.

::

  mongod --help


Then run mongodb.

::

  $ /<path_to_mongodb>/bin/mongod


.. only:: instructor

   ::

     Instructor:

     Please verify that all students have successfully installed MongoDB and have it running.


Import the data provided on the USB drive into the "sample" database.

::

  $ cd usb_drive

::

  $ unzip sampledata.zip

::

  $ cd sampledata 

::

  $ mongoimport -d sample -c tweets twitter.json

::

  $ mongoimport -d sample -c zips zips.json

::

  $ cd dump 

::

  $ mongorestore -d sample training

::

  $ mongorestore -d sample digg


Open another command shell. Then type the following to start the Mongo shell.

::
  
  $ mongo


Display available commands.

::

  > help

Display available databases.

::

  > show dbs

To use a particular database we can type the following.

::
 
  > use <database_name>

This assigns the variable :js:data:`db` to a connection object for the selected database. We can display the name of the database we are currently using by evaluating this variable in the Mongo shell.

::

  > db

.. only:: instructor

  ::

    Instructor:
    
    Highlight the power of the Mongo shell here. It is a fully programmable JavaScript environment.

Show the collections available in this database.

::

  > show collections

Show methods on the collection with parameters and a brief explanation.

::

  > db.collection.help()

Finally, we can query for the documents in a collection.

::

  > db.collection.find()

There are also a number of admin commands at our disposal. The following will shut down the mongod we are connected to through the Mongo shell. You can also just kill with Ctrl-C in the shell window from which you launched the mongod.

::

  > db.adminCommand( { shutdown : 1 } )

Confirm that the mongod process has indeed stopped. Once you have, please restart it. 


We will now look at the MongoDB data directory.

::

  $ cd /data/db

.. only:: instructor

  ::

    Instructor:

    Tell the students about the mongod.lock file:

    - This prevents multiple mongods from using the same data directory simultaneously.
    - Each MongoDB database directory has one .lock. 
    - The lock file contains the process id of the mongod that is using the directory. 

    Show the students the data files:

    - The names of the files correspond to available databases for the MongoDB deployment.
    - A single database may have multiple files. They are numbered sequentially.
    - Files for a single database increase in size as follows:

      - sample.0 is 64 MB
      - sample.1 is 128 MB
      - sample.2 is 256 MB, etc. 
      - This continues until sample.5, which is 2 GB
      - All subsequent data files are also 2 GB.

