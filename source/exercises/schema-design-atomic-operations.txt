Student Exercise:
-----------------

.. only:: instructor

- MongoDB has “atomic operations” on documents.

  - When a document is updated, no other thread is updating it or reading it.
  - This leads to consistent reads and writes.
  - This feature provides document-level transactions.
  - Any modification to any number of fields in a single document can be thought of as a transaction.
  - Updates to a single document either entirely happen or they do not at all.
  - There are no partial updates and no “dirty reads” at the document level.

Imagine an online poker game.  The 2 main domain objects are players and the poker game itself.  A game is a series of actions and states created by players.  Players may be involved in many games and sometimes more than 1 game at a time.  Every game may host multiple players and each game will have many hands that can be played.  Different types of poker games may be played as well.  How might one model this?

.. only:: instructor

let students do exercise in small groups (20 minutes) and then discuss their ideas.

When asking if a game “belongs to” a player we quickly see it does not - many players belong to the game.

Then we would ask ourselves, should each player exist as a full entity in the game?

  - No, because players will be involved with many games and lots of player information is irrelevant to each game.
  - This leads us to creating a single document for every player.

For each game there are many moves players make - they are dealt cards, they make wagers, new cards come out, etc.

How to model the game?

  - Possibility #1: There is a ``game`` collection which has meta data about the game and then a document for every action a player in the game makes.

    - However, this creates a game which is not atomic and will possibly have lots of IO.

  - Possibility #2: Model it atomicly

    - Create an array of player actions.
    - Each action is an embedded document.
    - Certain player information is denormalized:

      - Their name
      - _id
      - other useful information to the game.

We end up with 2 collections - players and games.

- A player:

  - A single document that contains all their personal information, notes, history and meta data.

- A game:

  - All the actions that pertain to that game
  - Certain player information is denormalized

    - In the game, just one document needs to be accessed during gameplay
    - This takes advantage of atomic ops.
