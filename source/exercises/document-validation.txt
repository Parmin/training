========================
Lab: Document Validation
========================


Exercise: Add validator to existing collection
----------------------------------------------
- Import the ``posts`` collection (from posts.json) and look at a few documents to understand the schema.
- Insert the following document into the ``posts`` collection

.. code-block:: js

    {"Hi":"I'm not really a post, am I?"}

- Discuss: what are some restrictions on documents that a validator could and should enforce?
- Add a validator to the ``posts`` collection that enforces those restrictions
- Remove the previously inserted document and try inserting it again and see what happens

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        Discuss the potential restrictions as a class, but have students write and add validators individually.

        Some example restrictions:
            - ``body`` is a string
            - ``permalink`` matches a regex
            - ``date`` is a date
            - ``author`` is a string
            - ``title`` is a string

        An example of adding a validator to the ``posts`` collection:

        .. code-block:: javascript

            db.runCommand( {
                "collMod": "posts",
                "validator": {
                    "body": {"$type": "string"},
                    "permalink": {"$regex": "^[A-z]{20}$"},
                    "date": {"$type":"date"},
                    "author": {"$type": "string"},
                    "title": {"$type": "string"}
                }
            })

Exercise: Create collection with validator
------------------------------------------
- Create a collection ``employees`` with a validator that enforces the following restrictions on documents:
    - The ``name`` field must exist and be a string
    - The ``salary`` field must exist and be between 0 and 10,000 inclusive.
    - The ``email`` field is optional but must be an email address in a valid format if present.
    - The ``phone`` field is optional but must be a phone number in a valid format if present.
    - At least one of the ``email`` and ``phone`` fields must be present.

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        - Examples on next slide.

Exercise: Create collection with validator (expected results)
-------------------------------------------------------------
    .. code-block:: javascript

        // Valid documents
        {"name":"Jane Smith", "salary":45, "email":"js@example.com"}
        {"name":"Tim R. Jones", "salary":30, "phone":"234-555-6789","email":"trj@example.com"}
        {"name":"Cedric E. Oxford", "salary":600, "phone":"918-555-1234"}

        // Invalid documents
        {"name":"Connor MacLeod", "salary":9001, "phone":"999-555-9999", "email":"thrcnbnly1"}
        {"name":"Herman Hermit", "salary":9}
        {"name":"Betsy Bedford", "salary":50, "phone":"", "email":"bb@example.com"}

.. include:: /includes/student-notes.rst

... only:: instructor

    .. note::

        A possible solution could be the following:

        .. code-block:: js

            db.createCollection("employees", {"validator":{
                "$and": [
                    {
                        "name": {"$type": "string"},
                        "salary": {"$gte":0, "$lte":10000}
                    },
                    {"$or":[
                        {"email":{"$exists": false}},
                        {"email":{"$regex": /[A-z0-9_.+]+@[A-z0-9_.+]+\.com/}}
                    ]},
                    {"$or":[
                        {"phone":{"$exists": false}},
                        {"phone":{"$regex": /\(?[0-9]{3}\)?[- ]?[0-9]{3}[- ]?[0-9]{4}/}}
                    ]},
                    {"$or":[
                        {"phone":{"$exists": true}},
                        {"email":{"$exists": true}}
                    ]}
                ]
            }})

        - Ensure that students can correctly implement the subtleties of the restrictions on the phone and email fields.
        - Actual regular expressions for email addresses and phone numbers can be very complex, so less comprehensive approximations such as those above are acceptable.

            .. code-block:: js

                // example of actual email validation regex
                /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/
                // example of actual phone validation regex
                /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/

        - Ensure that students successfully insert the valid example documents; they are needed in a later exercise.

Exercise: Change validator rules
--------------------------------
- Modify the validator for the ``employees`` collection to support the following additional restrictions:
    - The ``status`` field must exist and must only be one of the following strings: "active", "on_vacation", "terminated"
    - The ``locked`` field must exist and be a boolean

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        Examples on next slide

Exercise: Change validator rules (expected results)
---------------------------------------------------
    .. code-block:: javascript

        // Valid documents
        {"name":"Jason Serivas", "salary":65, "email":"js@example.com", "status":"terminated", "locked":true}
        {"name":"Logan Drizt", "salary":39, "phone":"234-555-6789","email":"ld@example.com", "status":"active", "locked":false}
        {"name":"Mann Edger", "salary":100, "phone":"918-555-1234", "status":"on_vacation", "locked":false}

        // Invalid documents
        {"name":"Steven Cha", "salary":15, "email":"sc@example.com", "status":"alive", "locked":false}
        {"name":"Julian Barriman", "salary":15, "email":"jb@example.com", "status":"on_vacation", "locked":"no"}

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        A possible solution could be the following:

        .. code-block:: js

            db.runCommand( {
                "collMod": "employees",
                "validator":{
                    "$and": [
                        {
                            "name": {"$type": "string"},
                            "salary": {"$gte":0, "$lte":10000},
                            "status": {"$in": ["active","on_vacation","terminated"]},
                            "locked": {"$type": "bool"}
                        },
                        {"$or":[
                            {"email":{"$exists": false}},
                            {"email":{"$regex": /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/}}
                        ]},
                        {"$or":[
                            {"phone":{"$exists": false}},
                            {"phone":{"$regex": /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/}}
                        ]},
                        {"$or":[
                            {"phone":{"$exists": true}},
                            {"email":{"$exists": true}}
                        ]}
                    ]
                }})

Exercise: Change validation level
---------------------------------
Now that the ``employees`` validator has been updated, some of the already-inserted documents are not valid. This can be a problem when, for example, just updating an employee's salary.

- Try to update TODO
- Change the validation level of the ``employees`` collection to allow updates of existing invalid documents, but still enforce validation of inserted documents and existing valid documents.

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        Note that this permanently changes the validation level for all operations on the collection.
        Overriding the validation level on a per-operation basis is covered later.

        You could ask the questions:

        - When would this be required?
        - What happens with updates?
        - What happens with new inserts?

        Example solution:

        .. code-block:: js

            db.runCommand({"collMod":"employees", "validationLevel":"moderate"})

Exercise: Bypass validation
---------------------------
In some circumstances, it may be desirable to bypass validation to insert or update documents.

- Use the ``bypassDocumentValidation`` option to insert the document ``{"hi":"there"}`` into the ``employees`` collection
- Use the ``bypassDocumentValidation`` option to give all employees a salary of 999999.

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        Example solutions:

        .. code-block:: js

            db.runCommand({"insert":"employees","documents":[{"hi":"there"}],"bypassDocumentValidation":true})
            db.runCommand({"update":"employees","updates":[{"q":{}, "u":{"$set":{"salary":999999}},"multi":true}],"bypassDocumentValidation":true})

        Students may ask:

        - Is it possible to bypass only part of the validation?

            - No, there is no partial validation

Exercise: Change validation action
----------------------------------
In some cases, it may be desirable to simply log invalid actions, rather than prevent them.

- Change the validation action of the ``employees`` collection to reflect this behavior

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        Example solution:

        .. code-block:: js

            db.runCommand({"collMod":"employees", "validationAction":"warn"})

        You could ask the questions:

        - When would this be useful?
