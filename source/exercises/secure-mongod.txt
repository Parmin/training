==================
Lab: Secure mongod
==================

Premise
-------

It is time for us to get started setting up our first MongoDB instance with authentication enabled!

.. only:: instructor

   .. note::

      - Expected time: 5 minutes
      - Prerequisites:

        - Students should have installed MongoDB Enterprise or compiled MongoDB community with --ssl flags.


Launch ``mongod``
-----------------

Let's start by launching a ``mongod`` instance:

.. code-block:: bash

  mkdir /data/secure_instance_dbpath
  mongod --dbpath /data/secure_instance_dbpath --port 28000

At this point there is nothing special about this setup. It is just an ordinary ``mongod`` instance ready to receive connections.


Root level user
-------------------

Create a ``root`` level user:

.. code-block:: bash

  mongo --port 28000 admin  // Puts you in the _admin_ database

.. code-block:: javascript

  use admin
  db.createUser( {
    user: "maestro",
    pwd: "maestro+rules",
    customData: { information_field: "information value" },
    roles: [ {role: "root", db: "admin" } ]
  } )

.. only:: instructor

  .. note::

    `root` is a superuser role so make sure you mention the privileges.

    https://docs.mongodb.org/manual/reference/built-in-roles/#superuser-roles


Enable Authentication
---------------------

Launch ``mongod`` with ``auth`` enabled

.. code-block:: bash

  mongo admin --port 28000 --eval 'db.shutdownServer()'
  mongod --port 28000 --dbpath /data/secure_instance_dbpath --auth

.. only:: instructor

  .. note::

    With these commands, you can mention that:

    - `mongo admin --eval 'db.shutdownServer()'` is a clean shutdown of the server
    - ``timeoutSecs`` is parameter that can be used to control the shutdown operation
    - Especially w/ replica sets, which they'll be using, soon.

Connect using the recently created ``maestro`` user.

.. code-block:: bash

  mongo --port 28000 admin -u maestro -p
