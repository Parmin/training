=============================
Lab: Ops Manager Installation
=============================

Premise
-------

Ops Manager is a solution for On-Prem MongoDB cluster operational management.

Enables features like:

- Automation
- Backup and Recovery
- Monitoring

Over the course of this lab we will be installing Ops Manager with high
availability and scalability in mind.

.. only:: instructor

  .. note::

    For details on how to setup clusters for this class, see:

    - https://docs.google.com/document/d/1vhA6NvlTsPe1rw_fb7N5NrYzJ78odiHWBd5yf9vPd64

    For this lab we will group students into teams.

    - There will be a maximum of 9 teams!
    - Each team will have at their disposal 15 virtual machines

      - 3 Ops Manager hosts
      - 12 Node hosts

    - Verify that all students have successfully pinged their designated hosts
    - These hosts have role names and public IPs/DNS names


.. include:: /includes/student-notes.rst


Ops Manager HA
--------------

Ops Manager requires a number of servers for high availability.

- Monitoring and backup/recovery are essential for production operations.
- Therefore, it's important to assure high availability for Ops Manager.
- For this we need to follow a specific deployment topology.

.. include:: /includes/student-notes.rst


Ops Manager Scalability
-----------------------

**Why do we need our operations tool to be scalable?**

- The main reason is backup and recovery requirements
- The amount of data individual applications generate will grow
- The number of applications your Ops Manager deployment supports will grow
- Plan to accommodate both forms of growth

.. include:: /includes/student-notes.rst

Ops Manager Architecture Review
-------------------------------

Let's review the `Ops Manager architecture`_ :

.. include:: opsmanager-network-diagram-fullsize.txt

.. only:: instructor

  .. note::

    For this diagram raise students attention to the following:

    - Ops Manager is composed out of two main services

      - HTTP Service: Ops Manager Application
      - Backup daemon

    - Ops Manager will collect data from the different agents

      - backup
      - monitoring
      - automation

    - Ops Manager has three main datastores

      - Application DB (MongoDB Cluster)

        - user info
        - monitoring data
        - group data
        - backup job queries
        - backup metadata

      - Backup DB (MongoDB Cluster)

        - OpLog store
        - Sync store

        - Blockstore: data snapshots, divided in small chunks being compressed
          and de-deduplicated
        - or Filestore: data snapshots as files

      - Head Database

        - Keeps track of oplog and initial syncs
        - There's one head database for each backed-up replica set
        - Similar load as a Secondary



.. include:: /includes/student-notes.rst

Launch the Ops Manager MongoDB Instances
----------------------------------------

It's time to set up the our hosts that will support our Ops Manager Deployment.

We will need the following instances:

- Two replica sets of 3 data nodes

  - Application Database replica set as **APPDB**
  - Backup Database replica set as **BACKUPDB**

- Three instances to run redundant services of Ops Manager Application

  - The hosts that will be supporting this deployment:

    - ``opsmgr1``, ``opsmgr2`` and ``opsmgr3``

- Load Balancer

  - The load balancer is already set up and its name should be given to
    you by the trainer.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Ask students to make a deployment and configuration plan.
    Use the following questions as guide:

    - Where do we start ?

      - Boot up Ops Manager Application replica set

    - Do we need a replica set to support the Backup Daemon?

      - Yes, you always need one, and we will be using the *Blockstore* part
        of the Backup DB

        - we can use a *Filestore* as an alternative but for the exercise let's
          use the *Blockstore*

    - 2 possible solutions:

      - each ``opsmgr`` node gets App, BackupDaemon, AppDB and BackupDB
      - ``opsmgr`` gets App, BackupDaemon and BackupDB, ``nodes`` get AppDB


Configure Ops Manager Application Database
------------------------------------------

Ops Manager needs to store data:

- Configuration of nodes, groups, users
- Metrics for monitoring
- Backup metdata and job queries

Also consider relevant `security settings`_ for this database.

From the available machines go ahead and set up a replica set to support the
*Application Database*.

.. only:: instructor

  .. note::

    - Students should be assembling a 3 node replica set to allow the HA.
    - To validate their deployment you should ask students to run validation
      script

      - ``validate_appdb.py``

    Instruction set:
    - Connect to each ``opsmgr`` instance and launch a mongod

    .. code-block:: bash

      mongod -f /share/etc/appdb.conf

    - The `/share/etc/appdb.conf` file should have the following settings:

    .. code-block:: bash

      cat /share/etc/appdb.conf
      replication:
        replSetName: "APPDB"
        oplogSizeMB: 100
      storage:
        wiredTiger:
          engineConfig:
            cacheSizeGB: 2
            journalCompressor: zlib
      net:
        port: 27001

    - Once all instances ``mongod`` instances are up initiate the replica set

    .. code-block:: bash

      # replace opsmgr{1,2,3} with corresponding internal ip addresses
      mongo --host opsmgr1:27001
      > rs.initiate(
        _id: "APPDB",
        members: [
          {_id: 1, host:"opsmgr1:27001"},
          {_id: 2, host:"opsmgr2:27001"},
          {_id: 3, host:"opsmgr3:27001"}
        ]
      )


Configure and Launch the Ops Manager Service
--------------------------------------------

**Habemus Replica Set!**

Now it's time to launch the **Ops Manager** service. For this you will need to:

- Edit Ops Manager configuration ``conf-mms.properties``:

  - Follow instructions to `install from rpm`_

  - The file can be found at */share/downloads/mongodb-mms-XXX-X.x86_64.rpm*

  - Point these to the previously configured replica set: **APPDB**
  - Allow `offline binary access`_

- Launch the Ops Manager service

.. only:: instructor

  .. note::

    We are striving for an Highly Available Ops Manager deployment therefore:

    - Before mentioning *again* the HA requirement you may ask students why we
      need 2 ``opsmgr`` nodes?
    - Make sure students use machines that are tagged with Ops Manager

    You may want to point to the following documentation page:

    `configure HA app`_

    - Generate ``gen.key``

    .. code-block:: bash

      ssh -A centos@opsmgr1
      #Install ops manager server
      yum install -y /share/downloads/mongodb-mms-2.0.6.363-1.x86_64.rpm
      #Edit the configuration options
      vi /opt/mongodb/mms/conf/conf-mms.properties
      #Generate a gen.key file
      openssl rand 24 > /share/gen.key
      cp /share/gen.key /etc/mongodb-mms/

      #Copy this generated file to all opsmgr hosts
      scp /share/gen.key centos@opsmgr2:/etc/mongodb-mms/opsmgr.key
      scp /share/gen.key centos@opsmgr3:/etc/mongodb-mms/opsmgr.key
      #Make sure you use replace opsmgr for the host ip


    - Edit Ops Manager configuration file ``/opt/mms/conf-mms.properties``

    .. code-block:: bash

      #Replace mongo.mongoUri with APPDB replica set connection string
      # mongodb://opsmgr1:27001,opsmgr2:27001,opsmgr3:27001/?replicaSet=APPDB
      sed -i.bak "s/^\(mongo.mongoUri=\).*/\1mongodb:\/\/opsmgr1\:27001,opsmgr2\:27001, \
      opsmgr3\:27001\/\?replicaSet=APPDB/" /opt/mms/conf-mms.properties
      #Or just use vi

      #Repeat the operation on all opsmgr hosts

    - Launch Ops Manager on all ``opsmgr`` hosts

    .. code-block:: bash

      ssh -A centos@opsmgr1 "service mongodb-mms start"
      ssh -A centos@opsmgr2 "service mongodb-mms start"
      ssh -A centos@opsmgr3 "service mongodb-mms start"

    To validate this exercise the students should be able to:

    - Register admin user credentials and Ops Manager group


Install Ops Manager Automation Agents
-------------------------------------

At this point **Ops Manager** should be up and running.
Now it's time to install our `Automation Agents`_:

- In the remaining VMs, install the automation agent
- Make sure that all nodes are discoverable on the servers dashboard
- Validate that all agents are reporting pings correctly

.. only:: instructor

  .. note::

    You should ask the students to install the agents on the remaining VMs

    - Validate that all nodes are discoverable
    - All agents are reporting data without errors



.. _Ops Manager architecture : https://docs.opsmanager.mongodb.com/current/core/system-overview/
.. _security settings : https://docs.mongodb.com/manual/administration/security-checklist/
.. _configure HA app : https://docs.opsmanager.mongodb.com/current/tutorial/configure-application-high-availability/
.. _offline binary access : https://docs.opsmanager.mongodb.com/current/tutorial/configure-local-mode/
.. _Automation Agents : https://docs.opsmanager.mongodb.com/current/tutorial/nav/install-automation-agent/
.. _install from rpm : https://docs.opsmanager.mongodb.com/current/tutorial/install-on-prem-with-rpm-packages/#install-the-onprem-package-on-each-server-being-used-for-onprem
