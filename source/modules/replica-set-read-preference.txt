===============
Read Preference
===============

What is Read Preference?
------------------------

- Read preference allows you to specify the nodes in a replica set to which a client should direct reads.
- By default, clients direct reads to the primary.
- There are some situations in which a client may want to read from:

  - A specific secondary 
  - A specific type of secondary

- You should only read from a secondary if your client can tolerate data that might be stale. 
- All writes might not have replicated.


Use Cases
---------

- Running systems operations that do not affect the front-end
  application.
- Providing local reads for geographically distributed applications.
- Maintaining availability during a failover.

.. only:: instructor

   .. note::

      - If you have application servers in multiple data centers, you may consider having a :manual:`geographically distributed replica set </core/replica-set-geographical-distribution>` and using a read preference of :readmode:`nearest`. 
      - This allows the client to read from the lowest-latency members.
      - Use :readmode:`primaryPreferred` if you want an application to read from the primary under normal circumstances, but to allow stale reads from secondaries in an emergency.


Not for Scaling
---------------

- In general, do *not* read from secondaries to provide extract capacity for reads.
- :manual:`Sharding </sharding>` increases read and write capacity by distributing operations across a group of machines.
- Sharding is a better strategy for adding capacity.


Read Preference Modes
---------------------

MongoDB drivers support the following read preferences.

- **primary**: Default. All operations read from the current replica set primary.
- **primaryPreferred**: Read from the primary but if it is unavailable, read from secondary members.
- **secondary**: All operations read from the secondary members of the replica set.
- **secondaryPreferred**: Read from secondary members but if no secondaries are available, read from the primary.
- **nearest**: Read from member of the replica set with the least network latency, regardless of the member's type.


Tag Sets
--------

- There is also the option to used tag sets. 
- You may tag nodes such that queries that contain the tag will be routed to one of the servers with that tag.  
- This can be useful for running reports, say for a particular data center.

Example:

.. code-block:: javascript

   conf = rs.conf()
   conf.members[0].tags = { "dc": "east", "use": "production"  }
   conf.members[1].tags = { "dc": "east", "use": "reporting"  }
   conf.members[2].tags = { "use": "production"  }
   rs.reconfig(conf)


