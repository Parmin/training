==================
Updating Documents
==================


Learning Objectives
-------------------

Upon completing this module students should understand

- The ``replaceOne()`` method
- The ``updateOne()`` method
- The ``updateMany()`` method
- The required parameters for these methods
- Field update operators
- Array update operators
- The concept of an upsert and use cases.
- The ``findOneAndReplace()`` and ``findOneAndUpdate()`` methods

.. include:: /includes/student-notes.rst


The ``replaceOne()`` Method
---------------------------

- Takes one document and replaces it with another

  - But leaves the _id unchanged

- Takes two parameters:

  - A matching document
  - A replacement document

- This is, in some sense, the simplest form of update

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note:: 

    - By "simplest," we mean that it's simple conceptually -- that replacing a document is a sort of basic idea of how an update happens.
    - We will later see update methods that will involve only changing some fields.


First Parameter to ``replaceOne()``
-----------------------------------

- Required parameters for ``replaceOne()``

  - The query parameter:
  
    - Use the same syntax as with ``find()``
    - Only the first document found is replaced

- ``replaceOne()`` cannot delete a document

.. include:: /includes/student-notes.rst


Second Parameter to ``replaceOne()``
------------------------------------

- The second parameter is the replacement parameter:

  - The document to replace the original document

- The _id must stay the same
- You must replace the entire document
  
  - You cannot modify just one field
  - Except for the _id

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note:: 

    - If they try to modify the _id, it will throw an error


The ``updateOne()`` Method
--------------------------

- Mutate one document in MongoDB using ``updateOne()``

  - Affects only the _first_ document found

- Two parameters:

  - A query document

    - same syntax as with ``find()``

  - Change document

    - Operators specify the fields and changes

.. include:: /includes/student-notes.rst


``$set`` and ``$unset``
-----------------------

- Use to specify fields to change for ``UpdateOne()``
- If the field already exists, using ``$set`` will change its value

  - If not, ``$set`` will create it, set to the new value

- Only specified fields will change
- Alternatively, remove a field using ``$unset``

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset`` (Setup)
----------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 19-37

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset``
--------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 38-47

.. include:: /includes/student-notes.rst


Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set``: Update one or more fields (already discussed). 
- ``$unset`` Delete a field (already discussed).
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current date or timestamp.

.. include:: /includes/student-notes.rst


Example: Update Operators
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 50-60

.. include:: /includes/student-notes.rst


The ``updateMany()`` Method
---------------------------

- Takes the same arguments as ``updateOne``
- Updates all documents that match

  - ``updateOne`` stops after the first match
  - ``updatemany`` continues until it has matched all

.. warning::

  Without an appropriate index, you may scan every document in the collection.

.. include:: /includes/student-notes.rst


Example: ``updateMany()``
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 65-70

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - First query only updates one document.
      - Second query updates four documents.


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


Example: Array Operators
------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 99-112

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::
   
      - Pass $pop a value of -1 to remove the first element of an array and 1 to remove the last element in an array.



``findOneAndUpdate()`` and ``findOneAndReplace()``
--------------------------------------------------

- Update (or replace) one document and return the document

  - By default, the document is returned pre-write

- Can read a document in the state before or after the update occurred.
- Makes a read plus a write atomic
- Can be used with upsert to insert a document

.. include:: /includes/student-notes.rst


Options fields for ``findOneAndUpdate()``, ``findOneAndReplace()``
------------------------------------------------------------------

- The following are all optional, and can be in the options document
- ``projection: <document>`` will let you select the fields to see
- ``sort: <document>`` sorts first and applies the operation to the first document
- ``maxTimeoutMS: <number>`` specifies how long the operation can take

  - Returns an error if this time is exceeded

- ``upsert: <boolean>`` if true, inserts if no document is found

.. include:: /includes/student-notes.rst


Example: ``findOneAndUpdate()``
-------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 236-239

.. include:: /includes/student-notes.rst


