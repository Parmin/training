===============
Case Study: CMS
===============


Learning Objectives
-------------------

Upon completing this module, students should understand:

- Various methods for effectively designing a CMS schema in MongoDB
- Optimizations to the schema, and their tradeoffs

.. only:: instructor

   .. note::

      - RDBMS vs. MongoDB
      - Pre-joining
      - The way comments are handled (another example of pre-aggregation)
      - How do we handle the potential for inconsistency between the comments collection and an individual article.

        - Don't pre-aggregate; just do two queries.
	- Do this on read -- two queries and, possibly and update or message queues.
	- Handle pre-joining all in one place. Background process identifies top comments.

.. include:: /includes/student-notes.rst


Building a CMS with MongoDB
---------------------------

- CMS stands for content management system.
- nytimes.com, cnn.com, and huffingtonpost.com are good examples to explore.
- For the purposes of this case study, let's use any article page from huffingtonpost.com.

.. include:: /includes/student-notes.rst


Building a CMS in a Relational Database
---------------------------------------

There are many tables for this example with multiple queries required for every page load.

Potential tables

- article
- author
- comment
- tag
- link_article_tag
- link_article_article (related articles)
- etc.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Great time to whiteboard how a CMS would look in an RDBMS, then MongoDB. E.g.:
      - Article:

        - id
        - headline
	- author_id
	- body
	- summary
	- region
	- published (timestamp)
	- edited (timestamp)

      - Author:

        - id
        - name
	- title

      - Comment

        - id
	- article_id
	- user_id
	- sentiments
	- responded
	- updated

      - User

        - id
	- username
	- user_email
	- user_password

      - Tag

        - id
	- label
	- type

      - Article_Tag

        - id
	- article_id
	- tag_id
	- tagged (timestamp)

      - Article_Article

        - article_newer_id
	- article_older_id

      - Front_Page

        - article_id
	- added_timestamp

      - Article_Stats

        - views
	- favorited
	- emailed
	- shared
	- commented



Building a CMS in MongoDB
-------------------------

.. code-block:: javascript

  {
    "_id" : 334456,
    "slug" : "/apple-reports-second-quarter-revenue",
    "headline" : "Apple Reported Second Quarter Revenue Today",
    "date" : ISODate("2015-03-24T22:35:21.908Z"),
    "author" : {
      "name" : "Bob Walker",
      "title" : "Lead Business Editor"
    },
    "copy" : "Apple beat Wall St expectations by reporting ...",
    "tags" : [
      "AAPL", "Earnings", "Cupertino"
    ],
    "comments" : [
      { "name" : "Frank", "comment" : "Great Story", "date" : ISODate(...) },
      { "name" : "Wendy", "comment" : "+1", "date" : ISODate(...) }
    ]
  }


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Spend a lot of time on the pros/cons of these two designs (RDBMS vs Mongo)
      - One design optimized for reads, another design optimized for writes



Benefits of the Relational Design
---------------------------------

With Normalized Data:

- Updates to author information are inexpensive
- Updates to tag names are inexpensive


.. include:: /includes/student-notes.rst


Benefits of the MongoDB Design
------------------------------

- Much faster reads
- One query to load a page
- The relational model would require multiple queries.


.. include:: /includes/student-notes.rst

Every System Has Tradeoffs
--------------------------

- Relational design will provide more efficient writes for some data.
- MongoDB design will provide efficient reads for common query patterns.
- A typical CMS may see 1000 reads (or more) for every article created (write).


.. include:: /includes/student-notes.rst

Optimizations
-------------

- Optimizing comments (what happens when an article has 1 million comments?)
- Include more information associated with each tag
- Include stock price information with each article
- Fields specific to an article type

.. include:: /includes/student-notes.rst


Optimizing Comments Option 1
----------------------------

- How many comments are shown on the first page of an article?
- What percentage of users click to read more comments?

.. code-block:: javascript

  {
    "_id" : 334456,
    "slug" : "/apple-reports-second-quarter-revenue",
    "headline" : "Apple Reported Second Quarter Revenue Today",
    ...
    "last_10_comments" : [
      { "name" : "Frank", "comment" : "Great Story", "date" : ISODate() },
      { "name" : "Wendy",
        "comment" : "When can I buy an Apple Watch?",
        "date" : ISODate() }
    ]
  }

.. include:: /includes/student-notes.rst


Optimizing Comments Option 1
----------------------------

- Adding a new comment requires writing to two collections
- Write may fail in-between first and second operation

.. code-block:: javascript

  > db.blog.updateOne(
   { "_id" : 334456 },
     { $push: {
         "comments": {
            $each: [ {
              "name" : "Frank",
              "comment" : "Great Story",
              "date" : ISODate()
            } ],
            $sort: { date: -1 },
            $slice: 10 } } } )

.. code-block:: javascript

  > db.comments.insertOne( { "article_id" : 334456, name" : "Frank",
    "comment" : "Great Story", "date" : ISODate() })

.. include:: /includes/student-notes.rst


Optimizing Comments Option 2
----------------------------

- Use a separate collection for comments
- Now every page load requires at least 2 queries
- Adding new comments are less expensive

.. code-block:: javascript

  > db.comments.insertOne( { "article_id" : 334456, name" : "Frank",
    "comment" : "Great Story", "date" : ISODate() })


.. include:: /includes/student-notes.rst


Include More Information With Each Tag
--------------------------------------

.. code-block:: javascript

  {
    "_id" : "/apple-reports-second-quarter-revenue",
    ...
    "tags" : [
      { "type" : "ticker", "label" : "AAPL" },
      { "type" : "section", "label" : "Earnings" },
      { "type" : "location", "label" : "Cupertino" }
    ]
  }

.. include:: /includes/student-notes.rst

Include More Information With Each Tag
--------------------------------------

- $elemMatch is now important for queries

.. code-block:: javascript

  > db.article.find( {
    "tags" : {
      "$elemMatch" : {
        "type" : "financials",
        "label" : "Earnings"
      }
    }
  } )


.. include:: /includes/student-notes.rst


Include Stock Price Information With Each Article
-------------------------------------------------

- Maintain the latest stock price in a separate collection
- General rule: don't de-normalize data that changes frequently

.. include:: /includes/student-notes.rst


Fields Specific to an Article Type
----------------------------------

Fields specific to an article may be added to the document.

.. code-block:: javascript

  {
    "_id" : 334456,
    ...
    "executive_profile" : {
      "name" : "Tim Cook",
      "age" : 54,
      "hometown" : {
        "city" : "Mobile",
        "state" : "AL"
      },
      "photo_url" : "http://..."
    }
  }


.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - As long as the fields aren't part of the query.
      - Ideally, every field in the query should be indexed.
      - Wikipedia also provides many examples of article-specific fields.
      - Examples of more fields specific to a particular type of article:

        - http://www.nytimes.com/interactive/2015/07/13/science/space/13after-pluto.html?ref=space
	- http://www.nytimes.com/interactive/2015/06/18/world/europe/encyclical-laudato-si.html?ref=earth


Class Exercise 1
----------------

Design a CMS (similar to above) with the following additional requirements:

- Articles may be in one of three states: "draft", "copy edit", "final"
- History of articles as they move between states must be captured, as well as comments by the person moving the article to a different state
- Within each state, every article must be versioned.  In case there is a problem, the editor can quickly revert to the previous version.


.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

     - There are a lot of solutions to this problem, one approach is to only insert new documents and remove update functionality:

     .. code-block:: javascript

      {
        "_id" : ...,
        "headline" : ...,
        ...

        // important fields
        "state" : "draft",
        "version" : 34,
        "modified_date" : ISODate(),
        "modified_author" : "Jason",
        "modified_comments" : "Moving article to draft form, needs rewrite"
      }

    - Now the application must do more work to only load the latest version: db.article.find( { "_id" : 1234 }).sort( { "version" : -1 }).limit(2) // see next comment for the limit(2) explanation
    - If two articles are inserted with the same version number (say two people worked on it at the same time), the application should issue a subsequent query without a limit to gather all articles with the same version (maybe there are 10 conflicts).  The application should then allow the user to merge those conflicts and commit the next version number.  More application logic can be used if conflicts become a larger problem (such as locking the article edits until the conflict is resolved)


Class Exercise 2
----------------

- Consult NYTimes, CNN, and huff post for some ideas about other types of views we might want to support.
- How would we support these views?
- Would we require other document types?

.. only:: instructor

   .. note::

      - What indexes are required?
      - Do we want to index all versions of our articles?

        - How could we avoid doing so in MongoDB 3.0?
        - How about in MongoDB 3.2?


Class Exercise 3
----------------

- Consider a production deployment of our CMS.
- Assuming replication across multiple datacenters, how might we shard our articles collection to reduce latency?


.. only:: instructor

   .. note::

      - Can pin documents to shard by region
