=============
Schema Design
=============


Learning Objectives
-------------------

Upon completing this module, students should understand:

- The importance of a good schema
- What differentiates a good schema from a bad schema
- Why this differentiation depends upon the use case
- How to implement good data modeling in a few use cases


Overview
--------

- Schema design is about how data is put into documents.
- The structure of documents can affect performance.
- You will not and should not try to normalize your data.
- Your model will be built around how your data is used.


Schema Design Considerations
----------------------------

TO DO: ADD A DRAWING

- Often, there is a trade-off between:
  
  - The size of your documents
  - Number of queries you need to perform

- Your first consideration will be how to balance these.

  - You don't want to query documents full of data you're not using.
  - You don't want to run lots of queries to get all the data you need.


Find Queries and RAM
--------------------

- RAM is a precious commodity.
- Ideally, when you query a document, it will already be in memory.
- When a document is queried: 

  - The entire document is loaded into memory (if not already there).
  - This can push other documents out of memory.

- If your documents are small, more of them can fit into memory.

  - Loading them will push relatively little data out of memory.


Find Queries and Spinning Disks
-------------------------------

- If a document is not already in memory when queried, It must get from the disk into RAM.
- Even if its location is known, this involves two steps:

  - A seek (to put the read head at the beginning of the document on the disk)
  - A read (to pull the document into memory)

- For spinning disks, reading is pretty fast, but seeks are slow.
- If you need to find lots of scattered documents, this will mean lots of seeks.
- Packing data together into a single document will reduce the number of seeks.


Many Small vs. Few Large Documents
----------------------------------

- Memory management favors small documents; seek time favors large.
- How to decide?

  - Frequently accessed data should be put into one document, to minimize seeks.
  - Rarely used data should not be accessed when not being used.
  - This minimizes both the number of frequent queries, and the amount of data pushed out of memory by any query.

Scenario #1: Medical Patient Data
---------------------------------

- When a patient comes in, record:

  - All the people and technicians they saw
  - All procedures performed
  - Patients' symptoms
  - The diagnosis
  - Medication prescribed

- Scan all the actual medical documents 

  - Keep as binary information.

- When querying or running analytics, do not use the binary data.

  - Binary data is only rarely accessed, relative to other data.

Medical Patient Data (Continued)
--------------------------------

- You could create documents that contain all data for a patient

  - people
  - procedures
  - symptoms
  - diagnosis
  - medication
  - binary data

- If you usually query only for the people, diagnosis, and procedures, this would include a lot of unused data.


Medical Patient Data (Continued)
--------------------------------

TODO: REMAKE THIS DRAWING

.. figure:: /images/data-modeling-documents-include-useless-data.png
   :align: center
   :width: 600 px
   :title: Documents with both Useful and Useless Data

.. only:: instructor

   .. note::

      - This diagram shows 8 documents in memory.
      - The green section describes data in a document which is useful.
      - The red part describes data that is not useful.
      - This wastes valuable memory space as a document is either in memory or not in memory.
      - Because of this schema design not as many documents can fit into memory as possible.
      - A better plan would be to include only people seen, diagnosis, and medications.

        - Move everything else into other collections.

Medical Patient Data (Continued)
--------------------------------

TODO: REMAKE THIS DRAWING

.. figure:: /images/data-modeling-documentsinclude-only-useful-data.png

.. only:: instructor

   note::

     - Now the same size of memory now contains more documents (12)
     - Because all of the data is useful, there is space for more documents.
     - This results in:
     
       - Fewer page faults 
       - More effective use of RAM

Scenario #2: Alternative Medical Patient Data
---------------------------------------------

- Imagine if we were designing a system that took “samples”.
- Samples can be any kind of additive update.
- Each time a patient visits a different person, that is considered a sample
- All information about that visit to that station is put into its own document.

  - A visit for a person may be represented by many documents.

- We would get an access pattern described above (efficient use of memory)
- Now it would take many queries and possibly a lot of I/O to gather all the documents required to resolve the query.Consider:


Medical Patient Data Scenario 2 (Continued)
-------------------------------------------

- In this scenario, the data is very fragmented.
- Queries would touch lots of documents, so there will be the potential for lots of page faults.

  - If using a spinning HD this could take many seeks to find the data on disk to load into RAM.

- The data needs to be accessed together, in one document with everything that we need. 

  - This is where the flexible nature of documents really shines.
  - The documents for each patient's visit are of different size and data types vary from document to document.


“Belongs To” VS “Belongs In” & References
-----------------------------------------

- While modeling data, you will have to ask yourself: 

  - Do certain objects belong together? 
  - Should they should be referenced?
  
- Ask: Does the data belong together?
  
  - If yes, does it belong in the document?
  
    - Yes, if the data will only be needed with this document.
    - No, if other documents may need that data.


"Belongs To" vs. "Belongs In" & References (Continued)
------------------------------------------------------

- If an object belongs with more than one document, reference it.
- A reference means putting the _id of one document into the other document.
- Generally, this will now require 2 or more queries.
- This process is sometimes called "denormalizing."


Scenario #3: Library Card Catalog System
----------------------------------------

- The objective is to keep track of 3 entities.

  - books
  - authors 
  - publishers.
  
- Patrons (not librarians) are the primary users of this system


Library Card Catalog System (Continued)
---------------------------------------

- Users query for books, but often also want:

  - Author information (such as name)
  - Publisher details

- Users also sometimes query for authors
 
  - They may also want publishers the authors have worked with.


Library Card Catalog System (Continued)
---------------------------------------

- Possibility #1: Author References

  - For a book, an array of author _id’s could be embedded.
  - You could have a reference to authors.
  - this would require multiple queries and possible extra I/O to resolve the book information.

Library Card Catalog System (Continued)
---------------------------------------

- Possibility #2: "denormalize" the author information into the book.

  - These would be the authors name and their _id.
  - It is important to denormalize the _id in case the author name changes.
  - You would *not* want to denormalize the other author information, such as their biography.

    - This would not be useful in the context of the book.

Library Card Catalog System (Continued)
---------------------------------------

- If you wanted to add “genre”  or “category” information:

  - Don't build a lookup table 
  - Instead, embed as a string each category.
  - This can be indexed.
  - Books of similar category will be found in the cursor.

.. include:: /exercises/schema-design-atomic-operations.txt
