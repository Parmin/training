=========================
Lab2: ``Items`` Migration
=========================


.. only:: instructor

  .. note::

    In this lab, we will focus on two primary learning objectives:

    - After providing a new ``mongodb.ItemDao``, attendees will figure out the
      controller changes on their own.
    - Restructureing the schema design to integrate the last *10* comments
      within the ``Items`` collection using the aggregation pipeline


Learning Objectives
-------------------

In this lab, we will be exploring the following operations:

- Implementing a full migration using a hybrid solution
- Enabling Text Search

.. include:: /includes/student-notes.rst


Step 1: Add ``dao.mongodb.ItemDao`` to **MongoMart**
----------------------------------------------------

After receiving this new ``ItemDao`` class, you will have to:

- Integrate this class into the **MongoMart** application

  - ``StoreController`` is a good candidate to hold it!

- Once the new Dao is integrated:

  - Verify that ``Items`` are getting stored into MongoDB

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Point the students to the ``dao.mongodb.ItemDao`` file with the solution
    for lab1.

    - Students will have to integrate this new class into ``StoreController``

    .. code-block:: java

      // StoreController.java
      ...
      ItemDao itemDao = new ItemDao(connection);
        mongomart.dao.mongodb.ItemDao mongoItemDao = new mongomart.dao.mongodb.ItemDao(mongoMartDatabase);
      ...
      get("/add-review", (request, response) -> {
      ...
        HashMap<String, Object> attributes = buildItemResponse(itemid, itemDao, mongoItemDao, reviewDao, mongoReviewDao);
      ...
      });

      get("/add-review", (request, response) -> {
      ...
        HashMap<String, Object> attributes = buildItemResponse(itemid, itemDao, mongoItemDao, reviewDao, mongoReviewDao);
      ...
      });


Step 2: Iterate over ``Items``
------------------------------

First, migrate the items into MongoDB:

.. code-block:: sh

  # iterate over all 23 items
  for i in {1..23}
  do
    curl -I http://localhost:8080/item?id=$i
  done

... or for Windows:

.. code-block:: bat

  FOR /L %%A IN (1,1,23) DO( curl -I http://localhost:8080/item?id=%%A )


.. include:: /includes/student-notes.rst


.. only:: instructor

  .. note::

    This step is important to move all ``items`` data back to ``mongod``.
    Important things to mention:

    - We are using the *internal* code application to do the migration
    - Once we know that the data is fully migrated, we should start
      disconnecting the *old* database (MySQL in this case).

      - This makes the migration process easy to test
      - Minimizes the chance of data impedance mismatch during migration
        process
      - Eliminates the need for external tools (e.g., ETL tools).


Step 3: Enable Text Search
--------------------------

The `Text Search`_ functionality has not been activated yet.

Let's get it up and running:

.. rst-class:: longlist

- Enable `Text Search`_ on the ``items`` collection.
- This functionality is provided by MongoDB

  - Enable `Text Search`_ on following fields:

    - ``title``
    - ``slogan``
    - ``description``

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Students will have to connect to the ``mongo`` shell and create the
      required Text Index:

    .. code-block:: sh

      mongo mongomart --eval 'db.item.createIndex( { "title" : "text", "slogan" : "text", "description" : "text" } )'

    - Next, they'll need to enable the commented ``/search`` route, present on
      ``StoreController``
    - The ``Dao`` object should be ``mongoItemDao``

    .. code-block:: java

      // Text search for an item, requires a text index
      get("/search", (request, response) -> {
        String query = request.queryParams("query");
        String page = request.queryParams("page");

        List<Item> items = mongoItemDao.textSearch(query, page);
        long itemCount = mongoItemDao.textSearchCount(query);

        // Determine the number of pages to display in the UI (pagination)
        int num_pages = 0;
        if (itemCount > mongoItemDao.getItemsPerPage()) {
          num_pages = (int)Math.ceil(itemCount / mongoItemDao.getItemsPerPage());
        }

        HashMap<String, Object> attributes = new HashMap<>();
        attributes.put("items", items);
        attributes.put("item_count", itemCount);
        attributes.put("query_string", query);
        attributes.put("page", Utils.getIntFromString(page));
        attributes.put("num_pages", num_pages);

        return new ModelAndView(attributes, "search.ftl");
      }, new FreeMarkerEngine(cfg));

    - Show students that this works by opening the following url:

    http://localhost:8080/search?query=mug

.. _`Text Search`: https://docs.mongodb.com/manual/reference/operator/query/text/
