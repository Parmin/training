====================
AGGREGATION - PART 2
====================

.. topic:: Learning objectives

   Upon completing this module students should understand

   - The basig usages of the $group, $unwind, and $out operators
   - The syntax associated with these stages


The Unwind Stage
================

    - This stage has no analog in a find query.
    - The Unwind stage will take an array with N values, and create
      N documents, each with a single, non-array value at that position.
        - Obviously, this is a one-to-many relationship.
    - You can easily get multiple documents in the aggregation pipeline this
      way with identical _id's.
    - For large arrays, this can use up a LOT of memory, so be careful.
    - Will error out if even one value is not an array.

Exercise: The $unwind Operator
------------------------------

.. code-block:: javascript

    for (i=1; i<=5; i++) { 
        arr1 = []; 
        arr2 = [];
        for (j=1; j<=i; j++) { arr1.push( j ); arr2.push ( j + 5 ) };
        db.aggUnwind.insert( { _id : i, a : arr1, b : arr2 } ); }

Take the aggUnwind collection, and unwind the 'a' field.

.. code-block:: javascript

    db.aggUnwind.aggregate( [ { $unwind : "$a" } ] )
    // Unwinds the 'a' field but not the b.
    // Note that the 'a' values are now numbers
    // Note that there are 5 documents with _id : 5


The Out Stage
=============

    - Used to create a new collection from the output of the aggregation
      pipeline.
    - Can only be the last stage in the pipeline.
    - If a collection by the name already exists, it replaces that collection.
        - It will create copies of any indexes that already exist on that new
          collection.
        - If the aggregation fails, no changes will be made to the pre-existing
          collection.
    - Format is { $out : "collection_name" }
