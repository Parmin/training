===============================
Creating and Deleting Documents
===============================

Learning Objectives
-------------------

Upon completing this module students should understand:

- How to insert documents into MongoDB collections.
- ``_id`` fields:
- How to remove documents from a collection
- How to remove a collection from a database
- How to remove a database from a MongoDB deployment

.. include:: /includes/student-notes.rst


Creating New Documents
----------------------

- Create documents using ``insert()``.
- For example:

  .. code-block:: javascript

     db.collection.insert( { "name" : "susan" } )

.. include:: /includes/student-notes.rst

.. include:: /exercises/crud-inserting-a-document.txt


Implicit ``_id`` Assignment
---------------------------

- We did not specify an ``_id`` in the document we inserted.
- If you do not assign one, MongoDB will create one automatically.
- The value will be of type ObjectId.

.. include:: /includes/student-notes.rst

.. include:: /exercises/crud-assigning-ids.txt


Inserts will fail if...
-----------------------

- There is already a document in the collection with that ``_id``.
- You try to assign an array to the ``_id``.
- The argument is not a well-formed document.

.. include:: /includes/student-notes.rst

.. include:: /exercises/crud-inserts-specifying-id.txt



Bulk Inserts
------------

- MongoDB 2.6 introduced bulk inserts. 
- You may bulk insert using an array of documents.
- The API has two core concepts: 

  - Ordered bulk operations
  - Unordered bulk operations 

- The main difference is in the way the operations are executed in bulk. 

.. only:: instructor

   .. note::

      - In the case of an ordered bulk operation, every operation will be executed in the order they are added to the bulk operation. 
      - In the case of an unordered bulk operation however there is no guarantee what order the operations are executed. 
      - With an unordered bulk operation, the operations in the list may be reordered to increase performance.

.. include:: /includes/student-notes.rst


Ordered Insert
--------------

- For ordered inserts MongoDB will stop processing inserts upon encountering an error.
- Meaning that only inserts occurring before an error will complete.
- The default setting for ``db.collection.insert`` is an ordered insert.
- See the next exercise for an example.

.. include:: /includes/student-notes.rst

.. include:: /exercises/crud-inserting-multiple-documents.txt

    
Unordered Insert
----------------

- Pass ``{ ordered : false }`` to insert to perform unordered inserts.
- If any given insert fails, MongoDB will still attempt the others.
- The inserts may be executed in a different order from the way in which you specified them.
- The next exercise is very similar to the previous one.
- However, we are using ``{ ordered : false }`` 
- One insert will fail, but all the rest will succeed. 

.. include:: /includes/student-notes.rst


Exercise: Unordered Insert
--------------------------

Experiment with the following bulk insert.

.. code-block:: javascript

   db.otherThings.insert( [ { _id : 19, type : "atom", symbol : "K" },
                            { _id : 20, type : "car", color : "red" }, 
                            { _id : 20, type : "planet", name : "Saturn" },
                            { type : "office", 
                              street : "229 West 43rd Street, 5th Floor",
                              city : "New York",
                              state : "NY" } ],
                          { ordered : false } )
   db.otherThings.find()

.. include:: /includes/student-notes.rst



The Shell is a JavaScript Interpreter
-------------------------------------

- Sometimes it is convenient to create test data using a little JavaScript.
- The mongo shell is a fully-functional JavaScript interpreter. You may:

  - Define functions
  - Use loops
  - Assign variables
  - Perform inserts

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-creating-data-in-the-shell.txt


Deleting Documents
------------------

You may delete documents from a MongoDB deployment in several ways.

- Use ``remove()`` to delete documents matching a specific set of conditions.
- Drop an entire collection.
- Drop a database.

.. include:: /includes/student-notes.rst


Using ``remove()``
------------------

- Remove documents from a collection using ``remove()``.
- This command has one required parameter, a query document.
- All documents in the collection matching the query document will be removed.
- Pass an empty document to remove all documents.
- Prior to MongoDB 2.6 calling ``remove()`` with no parameters would remove all documents.
- Limit ``remove()`` to one document using ``justOne``.

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-removing-documents.txt


Dropping a Collection
---------------------

- You can drop an entire collection with ``db.collection.drop()``
- The collection and all documents will be deleted.
- It will also remove any metadata associated with that collection.
- Indexes are one type of meta data removed.
- More on meta data later.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Mention that ``drop()`` is more performant than remove because of the lookup costs associated with ``remove()``.


.. include:: /exercises/crud-dropping-a-collection.txt



Dropping a Database
-------------------

- You can drop an entire database with ``db.drop()``
- This drops the database on which the method is called.
- It also deletes the associated data files from disk, freeing disk space.
- Beware that in the mongo shell, this does not change database context.  

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-dropping-a-database.txt
