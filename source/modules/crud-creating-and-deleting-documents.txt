===============================
Creating and Deleting Documents
===============================

Learning Objectives
-------------------

Upon completing this module students should understand:

- How to insert documents into MongoDB collections.
- ``_id`` fields:
- How to remove documents from a collection
- How to remove a collection from a database
- How to remove a database from a MongoDB deployment

.. include:: /includes/student-notes.rst


Baseline
--------

For the extent of this lab we will be using same baseline code snippet called `crud.cpp`

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Please ask your students to go ahead and under the `snippets` folder create a new file called `crud.cpp`
    This file should have one **main** method that we will extend over the set of exercises as they are completed.

    This initial file should look like the following:

    .. code-block:: cpp

      #include <iostream>
      #include <mongocxx/client.hpp>
      #include <mongocxx/cursor.hpp>
      #include <mongocxx/collection.hpp>
      #include <bsoncxx/builder/stream/document.hpp>
      #include <mongocxx/exception/exception.hpp>


      int main(int, char**) {
          try{

          } catch( const mongocxx::exception &e ) {
            std::cout << "caught " << e.what() << std::endl;
          }
          return EXIT_SUCCESS;

      }

Creating New Documents
----------------------

- Create documents using ``insert()``.
- For example:

  .. code-block:: cpp

    // instantiate a connection
    client conn{mongocxx::uri{}};
    //instantiate a collection
    collection coll = conn["sample"]["cpp"];

    //create a document
    auto doc0 = document{} << "name" << "Dwight" << finalize;

    //insert one document
    coll.insert_one(doc0.view());

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Make sure you focus students attention on the following aspects:
    - syntactic sugar of the document construction using `<<` operator
    - simple database objects instantiation
    - same api call has new MongoDB 3.2 shell methods

    Also redirect students into the shell so the can also check the creation of these documents

    .. code-block:: bash

      mongo sample
      db.cpp.find()

    And don't forget the compilation instructions:

    .. code-block:: bash

      c++ --std=c++11 crud.cpp -o crud $(pkg-config --cflags --libs libmongocxx)


Implicit ``_id`` Assignment
---------------------------

- We did not specify an ``_id`` in the document we inserted.
- If you do not assign one, MongoDB will create one automatically.
- The value will be of type ObjectId.

.. include:: /includes/student-notes.rst

Example: Assigning _ids
------------------------

Experiment with the following commands.

.. code-block:: cpp

    //assign `_id` field
    auto doc1 = document{} << "_id" << 1 << "name" << "Dwight" << finalize;

    //and fetch back the results
    auto cursor = coll.find({});
    for (auto&& x : cursor) {
      std::cout << "_id: " << x["_id"].get_int32() << std::endl;
    }

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Note that you can assign an _id to be of almost any type.
      - It does not need to be an ObjectId.

      A new method should be created on our `crud.cpp` to express this variation

      .. code-block:: cpp

        void insert_with_id(){
          // instantiate a connection
          client conn{mongocxx::uri{}};
          //instantiate a collection
          collection coll = conn["sample"]["cpp"];
          //create a document
          auto doc1 = document{} << "_id" << 1 << "name" << "Dwight" << finalize;

          //insert the document
          coll.insert_one(doc1.view());
          //
          auto cursor = coll.find({});
          for (auto&& x : cursor) {
            std::cout << "_id: " << x["_id"].get_int32() << std::endl;
          }
        }



Inserts will fail if...
-----------------------

- There is already a document in the collection with that ``_id``.
- You try to assign an array to the ``_id``.
- The argument is not a well-formed document.

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::
    Don't forget that if we run multiple times,
    you should ask the students to this,
    we will get a duplicated key error

    .. code-block:: bash

      ./crud
      ./crud


Example: Inserts will fail if...
---------------------------------

.. code-block:: javascript

   // fails because _id can't have an array value
   db.movies.insert( { "_id" : [ "Star Wars",
                                 "The Empire Strikes Back",
                                 "Return of the Jedi" ] } )

   // succeeds
   db.movies.insert( { "_id" : "Star Wars" } )

   // fails because of duplicate id
   db.movies.insert( { "_id" : "Star Wars" } )

   // malformed document
   db.movies.insert( { "Star Wars" } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The following will fail because it attempts to use an array as an ``_id``.

        .. code-block:: javascript

           db.movies.insert( { "_id" : [ "Star Wars", "The Empire Strikes Back", "Return of the Jedi" ] } )

      - The second insert with ``_id : "Star Wars"`` will fail because there is already a document with ``_id`` of "Star Wars" in the collection.

      - The following will fail because it is a malformed document (i.e. no field name, just a value).

      .. code-block:: javascript

         db.movies.insert( { "Star Wars" } )



Bulk Inserts
------------

- MongoDB 2.6 introduced bulk inserts.
- You may bulk insert using an array of documents.
- The API has two core concepts:

  - Ordered bulk operations
  - Unordered bulk operations

- The main difference is in the way the operations are executed in bulk.

.. only:: instructor

   .. note::

      - In the case of an ordered bulk operation, every operation will be executed in the order they are added to the bulk operation.
      - In the case of an unordered bulk operation however there is no guarantee what order the operations are executed.
      - With an unordered bulk operation, the operations in the list may be reordered to increase performance.

.. include:: /includes/student-notes.rst


Ordered Bulk Insert
-------------------

- For ordered inserts MongoDB will stop processing inserts upon encountering an error.
- Meaning that only inserts occurring before an error will complete.
- The default setting for ``db.<COLLECTION>.insert`` is an ordered insert.
- See the next exercise for an example.

.. include:: /includes/student-notes.rst


Example: Ordered Bulk Insert
-----------------------------

Experiment with the following bulk insert.

.. code-block:: javascript

   db.movies.insert( [ { "_id" : "Batman", "year" : 1989 },
                       { "_id" : "Home Alone", "year" : 1990 },
                       { "_id" : "Ghostbusters", "year" : 1984 },
                       { "_id" : "Ghostbusters", "year" : 1984 } ] )
   db.movies.find()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - This example has a duplicate key error.
      - Only the first 3 documents will be inserted.


Unordered Bulk Insert
---------------------

- Pass ``{ ordered : false }`` to insert to perform unordered inserts.
- If any given insert fails, MongoDB will still attempt the others.
- The inserts may be executed in a different order from the way in which you specified them.
- The next exercise is very similar to the previous one.
- However, we are using ``{ ordered : false }``
- One insert will fail, but all the rest will succeed.

.. include:: /includes/student-notes.rst


Example: Unordered Bulk Insert
-------------------------------

Experiment with the following bulk insert.

.. code-block:: javascript

   db.movies.insert( [ { "_id" : "Jaws", "year" : 1975 },
                       { "_id" : "Titanic", "year" : 1997 },
                       { "_id" : "The Lion King", "year" : 1994 } ],
                       { ordered : false } )
   db.movies.find()

.. include:: /includes/student-notes.rst



The Shell is a JavaScript Interpreter
-------------------------------------

- Sometimes it is convenient to create test data using a little JavaScript.
- The mongo shell is a fully-functional JavaScript interpreter. You may:

  - Define functions
  - Use loops
  - Assign variables
  - Perform inserts

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-creating-data-in-the-shell.txt


Deleting Documents
------------------

You may delete documents from a MongoDB deployment in several ways.

- Use ``remove()`` to delete documents matching a specific set of conditions.
- Drop an entire collection.
- Drop a database.

.. include:: /includes/student-notes.rst


Using ``remove()``
------------------

- Remove documents from a collection using ``remove()``.
- This command has one required parameter, a query document.
- All documents in the collection matching the query document will be removed.
- Pass an empty document to remove all documents.
- Prior to MongoDB 2.6 calling ``remove()`` with no parameters would remove all documents.
- Limit ``remove()`` to one document using ``justOne``.

.. include:: /includes/student-notes.rst


Example: Removing Documents
----------------------------

Experiment with removing documents. Do a ``find()`` after each ``remove()`` command below.

.. code-block:: javascript

   for (i=1; i<=20; i++) { db.testcol.insert( { _id : i, a : i } ) }

   db.testcol.remove( { a : 1 } )  // Remove the first document

   // $lt is a query operator that enables us to select documents that
   // are less than some value. More on operators soon.
   db.testcol.remove( { a : { $lt : 5 } } )  // Remove three more

   db.testcol.remove( { a : { $lt : 10 } },
                            { justOne : true } )  // Remove one more

   db.testcol.remove()  // Error: requires a query document.

   db.testcol.remove( { } )  // All documents removed

.. include:: /includes/student-notes.rst



Dropping a Collection
---------------------

- You can drop an entire collection with ``db.<COLLECTION>.drop()``
- The collection and all documents will be deleted.
- It will also remove any metadata associated with that collection.
- Indexes are one type of metadata removed.
- More on meta data later.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Mention that ``drop()`` is more performant than remove because of the lookup costs associated with ``remove()``.


Example: Dropping a Collection
-------------------------------

.. code-block:: javascript

   db.colToBeDropped.insert( { a : 1 } )
   show collections  // Shows the colToBeDropped collection

   db.colToBeDropped.drop()
   show collections  // collection is gone

.. include:: /includes/student-notes.rst



Dropping a Database
-------------------

- You can drop an entire database with ``db.dropDatabase()``
- This drops the database on which the method is called.
- It also deletes the associated data files from disk, freeing disk space.
- Beware that in the mongo shell, this does not change database context.

.. include:: /includes/student-notes.rst


Example: Dropping a Database
-----------------------------

.. code-block:: javascript

   use tempDB
   db.testcol1.insert( { a : 1 } )
   db.testcol2.insert( { a : 1 } )

   show dbs  // Here they are
   show collections  // Shows the two collections

   db.dropDatabase()
   show collections  // No collections
   show dbs  // The db is gone

   use sample  // take us back to the sample db

.. include:: /includes/student-notes.rst
