===========================
Performance Troubleshooting
===========================


Learning Objectives
-------------------

Upon completing this module students should understand MongoDB tools for performance troubleshooting.

- ``mongostat``
- ``mongotop``
- The profiler
- ``db.collection.stats()``
- ``db.serverStatus()``


Reporting Tools Overview
------------------------

- mongostat
- mongotop
- db.collection.stats()
- db.setProfilingLevel()
- db.serverStatus()

.. include:: /includes/student-notes.rst


``mongostat`` and ``mongotop``
------------------------------

- ``mongostat`` samples a server every second.

  - See current ops, pagefaults, network traffic, etc.
  - Does not give a view into historic performance; use MMS for that.

- ``mongotop`` looks at the time spent on reads/writes in each collection.

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (setup)
-------------------------------

In one window, perform the following commands.

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      arr = [];
      for (j=1; j<=1000; j++) { 
          doc = { _id : (1000 * (i-1) + j), a : i, b : j, c : (1000 * (i-1)+ j)};
          arr.push(doc)
      };
      db.testcol.insert(arr);
      var x = db.testcol.find( { b : 255 } );
      x.next();
      var x = db.testcol.find( { _id : 1000 * (i-1) + 255 } );
      x.next();
      var x = "asdf";
      db.testcol.update( { a : i, b : 255 }, { $set : { d : x.pad(1000) } });
      print(i)
  }

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (run)
-----------------------------

- In another window/tab, run mongostat. 
- You will see:

  - Inserts
  - Queries
  - Updates

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (create index)
--------------------------------------

- In a third window, create an index when you see things slowing down:

  .. code-block:: javascript

     db.testcol.ensureIndex( { a : 1, b : 1 } )

- Look at mongostat. 
- Notice that things are going significantly faster. 
- Then, let's drop that and build another index.

  .. code-block:: javascript

     db.testcol.dropIndexes()
     db.testcol.ensureIndex( { b : 1, a : 1 } )

.. include:: /includes/student-notes.rst


db.collection.stats()
---------------------

- Used to view the current stats for a collection.
- Everything is in bytes; use the multiplier parameter to view in KB, MB, etc
- You can also use db.stats() to do this at scope of the entire database

.. include:: /includes/student-notes.rst


Exercise: Using Collection Stats
--------------------------------

Look at the output of the following:

.. code-block:: javascript

  db.testcol.drop()  
  db.testcol.insert( { a : 1 } )
  db.testcol.stats()
  var x = "asdf"
  db.testcol2.insert( { a : x.pad(10000000) } )
  db.testcol2.stats()
  db.stats()

.. include:: /includes/student-notes.rst


The Profiler
------------

- Off by default.
- To reset, ``db.setProfilerLevel(0)``
- At setting 1, it captures "slow" queries.
- You may define what "slow" is.
- Default is 100ms: ``db.setProfilerLevel(1)``
- E.g., to capture 20 ms: ``db.setProfilerLevel(1, 20)``

.. include:: /includes/student-notes.rst


The Profiler (continued)
------------------------

- If the profiler level is 2, it captures all queries.

  - This will severely impact performance.
  - Turns all reads into writes.

- Always turn the profiler off when done (set level to 0)
- Creates ``db.system.profile`` collection

.. include:: /includes/student-notes.rst


Exercise: Exploring the Profiler
--------------------------------

Perform the following, then look in your db.system.profile.

.. code-block:: javascript

  db.setProfilingLevel(0)
  db.testcol.drop()
  db.system.profile.drop()
  db.setProfilingLevel(2)
  db.testcol.insert( { a : 1 } )
  db.testcol.find()
  var x = "asdf"
  db.testcol.insert( { a : x.pad(10000000) } )  // ~10 MB
  db.setProfilingLevel(0)
  db.system.profile.find().pretty()

.. include:: /includes/student-notes.rst


.. only:: instructor

  .. note::

    - Mention to the students what the fields mean.
    - Things to keep in mind:

      - op can be command, query, or update
      - ns is sometimes the db.collection namespace
      
        - but sometimes db.$cmd for commands

      - key updates refers to index keys
      - ts (timestamp) is useful for some queries if problems cluster.


Server Status
-------------

- Shown by typing db.serverStatus().
- Takes a snapshot.
- By taking diffs, you can see system trends.
- Most of the data that MMS gets is from here.

.. include:: /includes/student-notes.rst


Exercise: Using Server Status
-----------------------------

- Open up two windows. In the first, type: 

  .. code-block:: javascript

     db.testcol.drop()
     var x = "asdf"
     for (i=0; i<=10000000; i++) { db.testcol.insert( { a : x.pad(100000) } ) }

- In the second window, type periodically:

  .. code-block:: javascript

     var x = db.serverStatus(); x.metrics.document

.. include:: /includes/student-notes.rst
      
