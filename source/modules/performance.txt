===========================
Performance Troubleshooting
===========================


Learning Objectives
-------------------

Upon completing this module students should understand basic performance troubleshooting techniques and tools including:

- ``mongostat``
- ``mongotop``
- ``db.setProfilingLevel()``
- ``db.currentOp()``
- ``db.<COLLECTION>.stats()``
- ``db.serverStatus()``

.. include:: /includes/student-notes.rst


``mongostat`` and ``mongotop``
------------------------------

- ``mongostat`` samples a server every second.

  - See current ops, pagefaults, network traffic, etc.
  - Does not give a view into historic performance; use MMS for that.

- ``mongotop`` looks at the time spent on reads/writes in each collection.

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (setup)
-------------------------------

In one window, perform the following commands.

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      arr = [];
      for (j=1; j<=1000; j++) { 
          doc = { _id: (1000 * (i-1) + j), a: i, b: j, c: (1000 * (i-1)+ j) };
          arr.push(doc)
      };
      db.testcol.insert(arr);
      var x = db.testcol.find( { b : 255 } );
      x.next();
      var x = db.testcol.find( { _id : 1000 * (i-1) + 255 } );
      x.next();
      var x = "asdf";
      db.testcol.update( { a : i, b : 255 }, { $set : { d : x.pad(1000) } });
      print(i)
  }

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (run)
-----------------------------

- In another window/tab, run mongostat. 
- You will see:

  - Inserts
  - Queries
  - Updates

.. include:: /includes/student-notes.rst


Exercise: ``mongostat`` (create index)
--------------------------------------

- In a third window, create an index when you see things slowing down:

  .. code-block:: javascript

     db.testcol.createIndex( { a : 1, b : 1 } )

- Look at mongostat. 
- Notice that things are going significantly faster. 
- Then, let's drop that and build another index.

  .. code-block:: javascript

     db.testcol.dropIndexes()
     db.testcol.createIndex( { b : 1, a : 1 } )

.. include:: /includes/student-notes.rst


Exercise: ``mongotop``
----------------------

Perform the following then, in another window, run ``mongotop``.

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      arr = [];
      for (j=1; j<=1000; j++) { 
          doc = {_id: (1000*(i-1)+j), a: i, b: j, c: (1000*(i-1)+j)};
          arr.push(doc)
      };
      db.testcol.insert(arr);
      var x = db.testcol.find( {b: 255} ); x.next();
      var x = db.testcol.find( {_id: 1000*(i-1)+255} ); x.next();
      var x = "asdf";
      db.testcol.update( {a: i, b: 255}, {$set: {d: x.pad(1000)}});
      print(i)
  }

.. only:: instructor

   .. note:: 
   
      Direct the students to the fact that you can see the activity on the server for reads/writes/total.

.. include:: /includes/student-notes.rst



db.currentOp()
--------------

- currentOp is a tool that asks what the db is doing at the moment.
- currentOp is useful for finding long-running processes.
- Fields of interest:

  - microsecs_running
  - op
  - query
  - lock
  - waitingForLock

.. include:: /includes/student-notes.rst


Exercise: db.currentOp()
------------------------

Do the following then, connect with a separate shell, and repeatedly run db.currentOp().

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      arr = [];
      for (j=1; j<=1000; j++) { 
          doc = {_id: (1000*(i-1)+j), a: i, b: j, c: (1000*(i-1)+j)};
          arr.push(doc)
      };
      db.testcol.insert(arr);
      var x = db.testcol.find( {b: 255} ); x.next();
      var x = db.testcol.find( {_id: 1000*(i-1)+255 }); x.next();
      var x = "asdf";
      db.testcol.update( {a: i, b: 255}, {$set: {d: x.pad(1000)}});
      print(i)
  }


.. only:: instructor

   .. note::

      Point out to students that the running time gets longer & longer, on average.

.. include:: /includes/student-notes.rst


db.<COLLECTION>.stats()
---------------------

- Used to view the current stats for a collection.
- Everything is in bytes; use the multiplier parameter to view in KB, MB, etc
- You can also use db.stats() to do this at scope of the entire database

.. include:: /includes/student-notes.rst


Exercise: Using Collection Stats
--------------------------------

Look at the output of the following:

.. code-block:: javascript

  db.testcol.drop()  
  db.testcol.insert( { a : 1 } )
  db.testcol.stats()
  var x = "asdf"
  db.testcol2.insert( { a : x.pad(10000000) } )
  db.testcol2.stats()
  db.stats()

.. include:: /includes/student-notes.rst


The Profiler
------------

- Off by default.
- To reset, ``db.setProfilerLevel(0)``
- At setting 1, it captures "slow" queries.
- You may define what "slow" is.
- Default is 100ms: ``db.setProfilerLevel(1)``
- E.g., to capture 20 ms: ``db.setProfilerLevel(1, 20)``

.. include:: /includes/student-notes.rst


The Profiler (continued)
------------------------

- If the profiler level is 2, it captures all queries.

  - This will severely impact performance.
  - Turns all reads into writes.

- Always turn the profiler off when done (set level to 0)
- Creates ``db.system.profile`` collection

.. include:: /includes/student-notes.rst


Exercise: Exploring the Profiler
--------------------------------

Perform the following, then look in your db.system.profile.

.. code-block:: javascript

  db.setProfilingLevel(0)
  db.testcol.drop()
  db.system.profile.drop()
  db.setProfilingLevel(2)
  db.testcol.insert( { a : 1 } )
  db.testcol.find()
  var x = "asdf"
  db.testcol.insert( { a : x.pad(10000000) } )  // ~10 MB
  db.setProfilingLevel(0)
  db.system.profile.find().pretty()

.. only:: instructor

  .. note::

    - Mention to the students what the fields mean.
    - Things to keep in mind:

      - op can be command, query, or update
      - ns is sometimes the db.<COLLECTION> namespace
      
        - but sometimes db.$cmd for commands

      - key updates refers to index keys
      - ts (timestamp) is useful for some queries if problems cluster.


.. include:: /includes/student-notes.rst



``db.serverStatus()``
---------------------

- Takes a snapshot of server status.
- By taking diffs, you can see system trends.
- Most of the data that MMS gets is from here.

.. include:: /includes/student-notes.rst


Exercise: Using ``db.serverStatus()``
-------------------------------------

- Open up two windows. In the first, type: 

  .. code-block:: javascript

     db.testcol.drop()
     var x = "asdf"
     for (i=0; i<=10000000; i++) { 
         db.testcol.insert( { a : x.pad(100000) } ) 
     }

- In the second window, type periodically:

  .. code-block:: javascript

     var x = db.serverStatus(); x.metrics.document

.. include:: /includes/student-notes.rst


Analyzing Profiler Data
-----------------------

- Enable the profiler at default settings.
- Run for 5 seconds.
- Slow operations are captured.
- The issue is there is not a proper index on the message field.
- Allow class to discover this as the data is examined.
- You will see how fast documents are getting inserted.
- It will be slow b/c the documents are big.

.. include:: /includes/student-notes.rst


Performance Improvement Techniques
----------------------------------

- Appropriate write concerns
- Bulk operations
- Good schema design
- Good Shard Key choice
- Good indexes

.. include:: /includes/student-notes.rst


Performance Tips: Write Concern
-------------------------------

- Increasing the write concern increases data safety.
- This will have an impact on performance, however.
- This is especially true when there are network issues.

.. include:: /includes/student-notes.rst


Bulk Operations
---------------

- Using bulk operations can improve performance, especially when using write concern greater than 1.
- These enable the server to bulk write and bulk acknowledge.
- Can be done with both inserts and updates.

.. include:: /includes/student-notes.rst


Exercise: Comparing bulk inserts with ``mongostat``
---------------------------------------------------

Let's spin up a 3-member replica set:

.. code-block:: bash

   mkdir -p /data/replset/{1,2,3}
   mongod --logpath /data/replset/1/mongod.log \
          --dbpath /data/replset/1 --replSet mySet --port 27017 --fork
   mongod --logpath /data/replset/2/mongod.log \
          --dbpath /data/replset/2 --replSet mySet --port 27018 --fork
   mongod --logpath /data/replset/3/mongod.log \
          --dbpath /data/replset/3 --replSet mySet --port 27019 --fork

   echo "conf = {_id: 'mySet', members: [{_id: 0, host: 'localhost:27017'}, \
        {_id: 1, host: 'localhost:27018'}, {_id: 2, host: 'localhost:27019'}]}; \ 
        rs.initiate(conf)" | mongo 

.. include:: /includes/student-notes.rst


``mongostat``, bulk inserts with ``{w: 1}``
-------------------------------------------

Perform the following, with writeConcern : 1 and no bulk inserts:

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      for (j=1; j<=1000; j++) { 
          db.testcol.insert( { _id : (1000 * (i-1) + j),
                               a : i, b : j, c : (1000 * (i-1)+ j) },
                             { writeConcern : { w : 1 } } );
      };
      print(i);
  }

Run ``mongostat`` and see how fast that happens. 

.. include:: /includes/student-notes.rst


Bulk inserts with ``{w: 3}``
----------------------------

Increase the write concern to 3 (safer but slower):

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      for (j=1; j<=1000; j++) { 
          db.testcol.insert(
	      { _id: (1000 * (i-1) + j), a: i, b: j, c: (1000 * (i-1)+ j)}, 
	      { writeConcern: { w: 3 } } 
          );
      };
      print(i);
  }

Again, run mongostat.

.. include:: /includes/student-notes.rst


``mongostat``, bulk inserts with ``{w: 3}``
-------------------------------------------

- Finally, let's use bulk inserts to our advantage:
- Note that writeConcern is still { w: 3 } 

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=10000; i++) { 
       arr = []
       for (j=1; j<=1000; j++) { 
           arr.push( 
	       { _id: (1000 * (i-1) + j), a: i, b: j, c: (1000 * (i-1)+ j) } 
           ); 
       };
       db.testcol.insert( arr, { writeConcern : { w : 3 } } );
       print(i);
   }

.. include:: /includes/student-notes.rst


Schema Design
-------------

- The structure of documents affects performance.
- Optimize for your application's read/write patterns.
- We want as few requests to the database as possible to perform a given application task.
- See the data modeling section for more information.

.. include:: /includes/student-notes.rst


Shard Key Considerations
------------------------

- Choose a shard key that distributes load across your cluster.
- Create a shard key such that only a small number of documents will have the same value.
- Create a shard key that has a high degree of randomness.
- Your shard key should enable a mongos to target a single shard for a given query.

.. include:: /includes/student-notes.rst


Indexes and Performance
-----------------------

- Reads and writes that don't use an index will cripple performance.
- In compound indexes, order matters:

  - Sort on a field that comes before any range used in the index.
  - You can't skip fields; they must be used in order.
  - Revisit the indexing section for more detail.
      
.. include:: /includes/student-notes.rst

