====================
Performance Tutorial
====================


Learning Objectives
-------------------

Upon completing this module students should understand:

- The tools MongoDB provides for performance analysis

  - mongostat
  - the profiler
  - stats
  - serverStatus

- Tips & tricks to improve performance
 

.. only:: instructor

  .. note::

    - A node.js program for this exists here: 

      - https://github.com/NathanZamecnik/messagequeue/blob/master/index.js

    - I intend to convert this to something the shell can use at some point.
    - Acts as a message queue, writers write to the system while readers read.
    

Performance Tools Overview
--------------------------

- mongostat
- mongotop
- db.collection.stats()
- db.currentOp()
- db.setProfilingLevel()
- db.serverStatus()


Mongostat and Mongotop
----------------------

- Mongostat samples a server every second

  - see current ops, pagefaults, network traffic, etc.
  - does not give a view into historic performance

    - use MMS for that

- Mongotop looks at the time spent on reads/writes in each collection


Exercise: Mongostat
-------------------

Perform the following:

In one window, perform the following query:

.. code-block:: javascript

  db.testcol.drop()
  for (i=1; i<=10000; i++) { 
      arr = [];
      for (j=1; j<=1000; j++) { 
          doc = { _id : (1000 * (i-1) + j), a : i, b : j, c : (1000 * (i-1)+ j)};
          arr.push(doc)
      };
      db.testcol.insert(arr);
      var x = db.testcol.find( { b : 255 } );
      x.next();
      var x = db.testcol.find( { _id : 1000 * (i-1) + 255 } );
      x.next();
      var x = "asdf";
      db.testcol.update( { a : i, b : 255 }, { $set : { d : x.pad(1000) } });
      print(i)
  }

In another window/tab, run mongostat. You will see:

- Inserts
- Queries
- Updates

In a third window, create an index when you see things slowing down:

.. code-block:: javascript

  db.testcol.ensureIndex( { a : 1, b : 1 } )

Look at mongostat. Notice that things are going significantly faster. Then, let's drop that and build yet another index.

  db.testcol.dropIndexes()
  db.testcol.ensureIndex( { b : 1, a : 1 } )




db.collection.stats()
---------------------

- Used to view the current stats for a collection.
- Everything is in bytes; use the multiplier parameter to view in KB, MB, etc
- You can also use db.stats() to do this at scope of the entire database


Exercise: Using Collection Stats
--------------------------------

Look at the output of the following:

.. code-block:: javascript

  db.testcol.drop()  
  db.testcol.insert( { a : 1 } )
  db.testcol.stats()
  var x = "asdf"
  db.testcol2.insert( { a : x.pad(10000000) } )
  db.testcol2.stats()
  db.stats()


The Profiler
------------

- Off by default; to reset, db.setProfilerLevel(0)
- At setting 1, it captures "slow" queries

    - user may define what "slow" is
    - default is 100ms: db.setProfilerLevel(1)
    - e.g., to capture 20 ms: db.setProfilerLevel(1, 20)


The Profiler (continued)
------------------------

- If the profiler level is 2, it captures all queries.

  - This will severely impact performance.
  - Turs all reads into writes.

- Always turn the profiler off when done (set level to 0)
- When on, the profiler writes to db.system.profile


The system.profile Collection
-----------------------------

- Has the format

.. code-block:: javascript

  {
      "op" : "command",  // can also be "query" or "update"
      "ns" : "test.$cmd",  // often db.collection
      "command" : { "profile" : 0 },
      "keyUpdates" : 0,
      "numYield" : 0,
      "lockStats" :
      {
          "timeLockedMicros" :
          {
              "r" : NumberLong(0),
              "w" : NumberLong(12)
          },
          "timeAcquiringMicros" :
          {
              "r" : NumberLong(0),
              "w" : NumberLong(6)
          }
      },
      "responseLength" : 58,
      "millis" : 0,  // length of time to perform the query
      "execStats" : {  },
      "ts" : ISODate("2014-11-11T19:51:02.459Z"),
      // timestamp is good for querying for a time range
      "client" : "127.0.0.1",
      "allUsers" : [ ],
      "user" : ""
  }


Exercise: Exploring the Profiler
--------------------------------

Perform the following, then look in your db.system.profile.

.. code-block:: javascript

  db.setProfilingLevel(0)
  db.testcol.drop()
  db.system.profile.drop()
  db.setProfilingLevel(2)
  db.testcol.insert( { a : 1 } )
  db.testcol.find()
  var x = "asdf"
  db.testcol.insert( { a : x.pad(10000000) } )  // ~10 MB
  db.setProfilingLevel(0)


Server Status
-------------

- Shown by typing db.serverStatus().
- Takes a snapshot.
- By taking diffs, you can see system trends.
- Most of the data that MMS gets is from here.
- Most useful when taking diffs.


Exercise: Using Server Status
-----------------------------


- Open up two windows. In the first, type: 

.. code-block:: javascript

  db.testcol.drop()
  var x = "asdf"
  for (i=0; i<=10000000; i++) { db.testcol.insert( { a : x.pad(100000) } ) }

- In the second window, type periodically:

.. code-block:: javascript

  var x = db.serverStatus(); x.metrics.document

- You will see how fast documents are getting inserted.
- It will be slow b/c the documents are big.
