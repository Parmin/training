===================
Document Validation
===================


Learning Objectives
-------------------

Upon completing this module, students should be able to:

- Define the different types of document validation
- Distinguish use cases for document validation
- Create, discover, and bypass document validation in a collection
- List the restrictions on document validation

.. include:: /includes/student-notes.rst


Introduction
------------

- Prevents or warns when inserts/updates do not match schema constraints
- Can be implemented for a new or existing collection
- Can be bypassed, if necessary

.. include:: /includes/student-notes.rst


Example
-------

.. code-block:: javascript

  db.createCollection("products",
     {
        validator: {
            price : { $exists : true }
        },
        validationAction: "error"
     }
  )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    validationAction: "error" means that the server will reject non-matching documents


Why Document Validation?
------------------------

Consider the following use case:

- Several applications write to your data store
- Individual applications may validate their data
- You need to ensure validation across all clients

.. include:: /includes/student-notes.rst


Why Document Validation? (Continued)
------------------------------------

Another use case:

- You have changed your schema in order to improve performance
- You want to ensure that any write will also map the old schema to the new schema
- Document validation is a simple way of enforcing the new schema after migrating


``validationAction`` and ``validationLevel``
--------------------------------------------

- Two settings control how document validation functions
- ``validationLevel`` -- determines how strictly MongoDB applies validation rules
- ``validationAction`` -- determines whether MongoDB should error or warn on invalid documents


Details
-------

.. include:: document-validation-chart.txt

.. include:: /includes/student-notes.rst


Quiz
----

- What are the uses for the two validationLevels?
- What are the uses for the two validationActions?

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - After the next two slides, you can come back and review their answers


``validationLevel``: "strict"
-----------------------------

- Useful when:

  - Creating a new collection
  - Validating writes to an existing collection already in compliance
  - Changing schema and updates should map documents to the new schema

- This will impose validation on update even to invalid documents

.. include:: /includes/student-notes.rst


``validationLevel``: "moderate"
-------------------------------

- Useful when:

  - Changing a schema and you have not migrated fully
  - Changing schema but the application can't map the old schema to the new in just one update

.. include:: /includes/student-notes.rst


``validationAction``: "error"
-----------------------------

- Useful when:

  - Your application will no longer support valid documents
  - Not all applications can be trusted to write valid documents
  - Invalid documents create regulatory compliance problems

.. include:: /includes/student-notes.rst


``validationAction``: "warn"
----------------------------

- Useful when:

  - You need to receive all writes
  - Your application can handle multiple versions of the schema
  - Tracking schema-related issues is important

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - You can compare their answers to what you've discussed in this slide and the previous ones


Creating a Collection with Document Validation
----------------------------------------------

.. code-block:: javascript

  db.createCollection("products",
     {
        validator: {
            price: { $exists: true }
        },
        validationAction: "error"
     }
  )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - This is the same example we saw at the beginning of this lesson


Seeing the Results of Validation
--------------------------------

To see what the validation rules are for all collections in a database:

.. code-block:: javascript

  db.getCollectionInfos()

And you can see the results when you try to insert:

.. code-block:: javascript

  db.products.insertOne( { price: 25, currency: "USD" } )


.. include:: /includes/student-notes.rst


Adding Validation to an Existing Collection
-------------------------------------------

.. code-block:: javascript

  db.products.drop()
  db.products.insertOne( { name: "watch", price: 10000, currency: "USD" } )
  db.products.insertOne( { name: "happiness" } )
  db.runCommand( {
     collMod: "products",
     validator: {
         price: { $exists: true }
     },
     validationAction: "error",
     validationLevel: "moderate"
  } )
  db.products.updateOne( { name : "happiness" }, { $set : { note: "Priceless." } } )
  db.products.updateOne( { name : "watch" }, { $unset : { price : 1 } } )
  db.products.insertOne( { name : "inner peace" } )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - First two inserts worked b/c there was no validation at first
    - First update worked b/c the document didn't match before the update
    - Second update failed because it doesn't match the validator and the document matched before the update was attempted
    - Final insert failed because it didn't match the validator


Bypassing Document Validation
-----------------------------

- You can bypass document validation using the ``bypassDocumentValidation`` option
- CRUD and aggregation methods support this option
- For deployments with access control enabled, this is subject to user roles restrictions
- See the MongoDB server documentation for details
- Security roles:

  - ``dbAdmin`` and ``restore`` can bypass validation
  - ``bypassDocumentValidation`` action can be set

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - User roles are covered in the security section


Limits of Document Validation
-----------------------------

- Document validation is not permitted for the following databases:

  - admin
  - local
  - config

- You cannot specify a validator for ``system.*`` collections

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Ask the students why you can't write to these databases.

      - It's because MongoDB holds metadata for security, replication, and sharding, respectively, in these databases.


Document Validation and Performance
-----------------------------------

- Validation adds an expression-matching evaluation to every insert and update
- Testing shows negligible impact on performance

.. include:: /includes/student-notes.rst


Quiz
----

What are the validation levels available and what are the differences?

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Answers:

    - Strict - every insert or update must pass validation
    - Moderate:

      - Updates to invalid documents are permitted even if the update does not pass validation
      - New documents must be validated
      - Updates to valid documents must pass validation

    - None - disables document validation


Quiz
----

What command do you use to determine what the validation rule is for the *things* collection?

.. only:: instructor

  .. note::

    - Trick question. You can find out for all collections in the database with db.getCollectionInfos(), but thereâ€™s no way to do it for just one collection.


Quiz
----

On which three databases is document validation not permitted?

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - admin: holds security
    - local: holds the oplog and other replication information
    - config: holds sharding metadata
    - Your application should not write directly to these databases anyway
