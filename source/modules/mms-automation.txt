==========
Automation
==========


Learning Objectives 
-------------------

Upon completing this module students should understand:

- Use cases for Cloud / Ops Manager Automation
- The Cloud / Ops Manager Automation internal workflow

.. include:: /includes/student-notes.rst

What is Automation?
-------------------

Fully managed MongoDB deployment on your own servers:

- Automated provisioning
- Dynamically add capacity (e.g. add more shards or replica set nodes)
- Upgrades
- Admin tasks (e.g. change the size of the oplog)
  
.. include:: /includes/student-notes.rst
  
How Does Automation Work?
-------------------------

- Automation agent installed on each server in cluster
- Administrator creates design goal for system (through Cloud / Ops Manager interface)
- Automation agents periodically check with Cloud / Ops Manager to get new design instructions
- Agents create and follow a plan for implementing cluster design
- Minutes later, cluster design is complete, cluster is in goal state
  
.. include:: /includes/student-notes.rst

Automation Agents
-----------------

.. include:: /images/mms-automation.rst

.. include:: /includes/student-notes.rst
  
Sample Use Case
---------------

Administrator wants to create a 100 shard cluster, with each shard comprised of moa 3 node replica set:

- Administrator installs automation agent on 300 servers
- Cluster design is created in Cloud / Ops Manager, then deployed to agents
- Agents execute instructions until 100 shard cluster is complete (usually several minutes)
  
.. include:: /includes/student-notes.rst
  
Upgrades Using Automation
-------------------------

- Upgrades without automation can be a manually intensive process (e.g. 300 servers)
- A lot of edge cases when scripting (e.g. 1 shard has problems, or one replica set is a mixed version)
- One click upgrade with Cloud / Ops Manager Automation for the entire cluster
  
.. include:: /includes/student-notes.rst


Automation: Behind the Scenes
-----------------------------

- Agents ping Cloud / Ops Manager for new instructions
- Agents compare their local configuration file with the latest version from Cloud / Ops Manager
- Configuration file in JSON
- All communications over SSL

.. code-block:: javascript

	{
	    "groupId": "55120365d3e4b0cac8d8a52a737",
	    "state": "PUBLISHED",
	    "version": 4,
	    "cluster": { ...
  
.. include:: /includes/student-notes.rst


Configuration File
------------------

When version number of configuration file on Cloud / Ops Manager is greater than local version, agent begins making a plan to implement changes:

.. code-block:: javascript

	"replicaSets": [
        {
            "_id": "shard_0",
            "members": [
                {
                    "_id": 0,
                    "host": "DemoCluster_shard_0_0",
                    "priority": 1,
                    "votes": 1,
                    "slaveDelay": 0,
                    "hidden": false,
                    "arbiterOnly": false
                },
            ...

.. include:: /includes/student-notes.rst


Automation Goal State
---------------------

Automation agent is considered to be in goal state after all cluster changes (related to the individual agent) have been implemented.

.. include:: /includes/student-notes.rst


Demo
----

- The instructor will demonstrate using Automation to set up a small cluster locally.
- Reference documentation:

- `The Automation Agent <https://docs.cloud.mongodb.com/tutorial/nav/automation-agent/>`_
  - `The Automation API <https://docs.cloud.mongodb.com/api/>`_
  - `Configuring the Automation Agent <https://docs.cloud.mongodb.com/reference/automation-agent/>`_


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Go to your Admin page (within Cloud Manager) -> My groups, create a new group, and walk through the process of setting up a small cluster on your laptop

