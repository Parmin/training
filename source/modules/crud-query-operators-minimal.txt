===============
Query Operators
===============


Learning Objectives
-------------------

Upon completing this module students should understand the following types of MongoDB query operators:

- Comparison operators
- Logical operators
- Element query operators
- Operators on arrays

.. include:: /includes/student-notes.rst


Note
----

- In this training, we will address a subset of operators.
- See :manual:`Query Operators</reference/operator/query>` for details on all query operators.


Comparison Query Operators
--------------------------

- ``$lt``: Exists and is less than
- ``$lte``: Exists and is less than or equal to
- ``$gt``: Exists and is greater than
- ``$gte``: Exists and is greater than or equal to
- ``$ne``: Does not exist or does but is not equal to
- ``$in``: Exists and is in a set
- ``$nin``: Does not exist or is not in a set

.. include:: /includes/student-notes.rst


Example: Comparison Operators (Setup)
--------------------------------------

.. code-block:: javascript

  // insert sample data
  db.movies.insert( [ 
    { 
      "title" : "Batman", 
      "category" : [ "action", "adventure" ], 
      "imdb_rating" : 7.6, 
      "budget" : 35 
    },
    { 
      "title" : "Godzilla", 
      "category" : [ "action", 
      "adventure", "sci-fi" ], 
      "imdb_rating" : 6.6 
    },
    { 
      "title" : "Home Alone", 
      "category" : [ "family", "comedy" ], 
      "imdb_rating" : 7.4 
    }
  ] )

.. include:: /includes/student-notes.rst


Example: Comparison Operators
------------------------------

.. code-block:: javascript

  db.movies.find()

  db.movies.find( { "imdb_rating" : { $gte : 7 } } )         

  db.movies.find( { "category" : { $ne : "family" } } )          

  db.movies.find( { "title" : { $in : [ "Batman", "Godzilla" ] } } )   

  db.movies.find( { "title" : { $nin : [ "Batman", "Godzilla" ] } } )  

.. include:: /includes/student-notes.rst


Logical Query Operators
-----------------------

- ``$or``: Match either of two or more values
- ``$not``: Used with other operators
- ``$nor``: Match neither of two or more values
- ``$and``: Match both of two or more values 

  - This is the default behavior for queries specifying more than one condition.
  - Use ``$and`` if you need to include the same operator more than once in a query.

.. include:: /includes/student-notes.rst


Example: Logical Operators
---------------------------

.. code-block:: javascript

   db.movies.find( { $or : [ 
      { "category" : "sci-fi" }, { "imdb_rating" : { $gte : 7 } } 
    ] } )      

   // more complex $or, really good sci-fi movie or medicore family movie
   db.movies.find( { $or : [ 
      { "category" : "sci-fi", "imdb_rating" : { $gte : 8 } }, 
      { "category" : "family", "imdb_rating" : { $gte : 7 } } 
    ] } )

   // find bad movies
   db.movies.find( { "imdb_rating" : { $not : { $gt : 7 } } } )          

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``db.movies.find( { "imdb_rating" : { $not : { $gt : 7 } } } )`` also returns everything that doesnt have an "imdb_rating"


Array Query Operators
---------------------

- ``$all``: Array field must contain all values listed.
- ``$size``: Array must have a particular size. E.g., ``$size : 2`` means 2 elements in the array
- ``$elemMatch``: All conditions must be matched by at least one element in the array

.. include:: /includes/student-notes.rst


Example: Array Operators
-------------------------

.. code-block:: javascript

   db.movies.find( { "category" : { $all : [ "sci-fi", "action" ] } } )  

   db.movies.find( { "category" : { $size : 3 } } )  

.. include :: /includes/student-notes.rst


Example: $elemMatch
--------------------

.. code-block:: javascript

  db.movies.insert( { 
      "title" : "Raiders of the Lost Ark",
      "filming_locations" : [ 
        { "city" : "Los Angeles", "state" : "CA", "country" : "USA" },
        { "city" : "Rome", "state" : "Lazio", "country" : "Italy" },
        { "city" : "Florence", "state" : "SC", "country" : "USA" }
      ] } )

  // This query is incorrect, it won't return what we want
  db.movies.find( { 
      "filming_locations.city" : "Florence", 
      "filming_locations.country" : "Italy" 
    } )

  // $elemMatch is needed, now there are no results, this is expected
  db.movies.find( { 
      "filming_locations" : { 
        $elemMatch : { 
          "city" : "Florence", 
          "country" : "Italy"
         } } } )  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Comparing the last two queries demonstrates ``$elemMatch``.
      






