===================
Inserting Documents
===================

.. topic:: Upon completing this module students should understand:

   - How to insert documents into MongoDB collections.
   - _id fields:

     - Uniqueness constraints
     - Setting _id vs. letting MongoDB automatically set _id
     - ObjectId values

   - Using javascript to create sample data

Creating New Documents
----------------------

- Create documents using ``insert``.
- E.g., db.collection.insert( { "name" : "susan" } )


Exercise: Inserting a document 
------------------------------

.. code-block:: javascript

   use sample
   db.foo.insert( { a : "hello, world!" } )
   db.foo.find()

.. topic:: Instructor:
        
   - Make sure the students are performing the operations along with you.
   - Some students will have trouble starting things up, so be helpful at this stage.


Implicit _id Assignment
-----------------------

- We did not specify an _id in the document we inserted.
- If you do not assign one, MongoDB will create one automatically.
- The value will be of type ObjectId.


Exercise: Assigning _ids
------------------------

.. code-block:: javascript

    db.foo.insert( { _id : 253, a : "a string" } )
    db.foo.find()

.. topic:: Instructor:

   - Note that you can assign an _id to be of almost any type.
   - It does not need to be an ObjectId.


Exercise: Failed Inserts
------------------------

Inserts will fail if:

- There is already a document in the collection with that _id
- You try to assign an array to the _id
- The argument is not a well-formed document.

.. code-block:: javascript

   db.foo.insert( { _id : [ 1, 2, 3 ] } )
   db.foo.insert( { _id : 3 } )
   db.foo.insert( { _id : 3 } )
   db.foo.insert( { "hello" } )


Inserting Multiple Documents
----------------------------

- You can bulk insert using an array of documents
- The default setting is an unordered insert.
- If any given insert fails, the others will still be attempted.
- In the next exercise, one document will fail (duplicate key error) 
  but the others will be inserted.


Exercise: Inserting Multiple Documents
--------------------------------------

.. code-block:: javascript

   db.things.insert( [ { _id : 19, type : "atom", symbol : "K" },
                       { _id : 20, type : "car", color : "red" }, 
                       { _id : 20, type : "planet", name : "Saturn" },
                       { type : "office", 
                         street : "229 West 43rd Street, 5th Floor",
                         city : "New York",
                         state : "NY" } ] )
   db.things.find()

    
Exercise: Ordered Insert
------------------------

- Use { ordered : true } to ensure ordered inserts.
- Only those documents inserted before the error will be inserted.

.. code-block:: javascript

   db.otherThings.insert( [ { _id : 19, type : "atom", symbol : "K" },
                            { _id : 20, type : "car", color : "red" }, 
                            { _id : 20, type : "planet", name : "Saturn" },
                            { type : "office", 
                              street : "229 West 43rd Street, 5th Floor",
                              city : "New York",
                              state : "NY" } ] )
   db.otherThings.find()

.. topic:: Instructor:

   - This example has a duplicate key error.
   - Only the first 2 documents will be inserted.


Exercise: Using the Shell to Create Data
----------------------------------------

- Sometimes it is convenient to create test data using a little JavaScript.
- The mongo shell is a fully-functional JavaScript interpreter.


.. code-block:: javascript

   for (i=1; i<=10000; i++) { db.stuff.insert( { "a" : i } ) }
   db.stuff.find()

.. topic:: Instructor:
     
   Again, the shell is a JavaScript interpreter. You may:

   - Define functions
   - Use loops
   - Assign variables
   - Perform inserts
