============================
Introduction to Replica Sets
============================

Learning Objectives
-------------------

Upon completing this module, students should understand:

- Striking the right balance between cost and redundancy
- The many scenarios replication addresses and why
- How to avoid downtime and data loss using replication

.. include:: /includes/student-notes.rst


Use Cases for Replication
-------------------------

- High Availability
- Disaster Recovery
- Functional Segregation

.. include:: /includes/student-notes.rst


High Availability (HA)
----------------------

- Data still available following:

  - Equipment failure (e.g. server, network switch)
  - Datacenter failure

- This is achieved through automatic failover.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      If we lose a server and MongoDB is correctly configured:

      - Our database system can still service reads and writes, but by default not during failover period when the election takes place and there is no primary.
      - Without manual intervention as long as there is still a majority of nodes available.


Disaster Recovery (DR)
----------------------

- We can duplicate data across:

  - Multiple database servers
  - Storage backends
  - Datacenters

- Can restore data from another node following:

  - Hardware failure
  - Service interruption

.. include:: /includes/student-notes.rst


Functional Segregation
----------------------

There are opportunities to exploit the topology of a replica set:

- Based on physical location (e.g. rack or datacenter location)
- For analytics, reporting, data discovery, system tasks, etc.
- For backups

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - You may direct particular queries to specific nodes (which may have different indexes or hardware) to increase overall performance.
      - Backup data from secondaries to avoid performance penalties on the primary, especially when using tools like ``mongodump`` which are I/O intensive and evict the working set from memory (significant when data size is larger than RAM and disks are slow).
      - Dedicate secondaries for other purposes such as analytics jobs.

Large Replica Sets
------------------

Functional segregation can be further exploited by using large replica sets.

- 50 node replica set limit with a maximum of 7 voting members
- Useful for deployments with a large number of data centers or offices
- Read only workloads can position secondaries in data centers around the world (closer to application servers)

.. only:: instructor

   .. note::

      - Sample use case: bank reference data distributed to 20+ data centers around the world, then consumed by the local application server


Replication is Not Designed for Scaling
---------------------------------------

- Can be used for scaling reads, but generally not recommended.
- Drawbacks include:

  - Eventual consistency
  - Not scaling writes
  - Potential system overload when secondaries are unavailable

- Consider sharding for scaling reads and writes.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Eventual consistency: This is often tricky to handle as most developers are used to the strong consistency that most databases (and MongoDB) have by default. It also raises the question of how stale the data can be, and what to do when it crosses the threshold (e.g. fall back to reading from the primary). As of MongoDB 3.4, queries can be executed with **readConcern: linearizable** to ensure non-stale reads under certain circumstances. More on this will be covered later.
      - Potential system overload: For example, consider a 3 data node replica set using secondaries to scale reads. Each node is serving reads at 70% of its capacity, which is a reasonable utilization rate. What happens if one of the secondaries fail or is intentionally taken down for maintenance (e.g. upgrading the OS or MongoDB)? Even if the load splits evenly between the 2 remaining nodes, they will be at ``70+(70/2)= 105%`` capacity.


Replica Sets
------------

.. include:: /images/replica-set-read-write-operations-primary.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - MongoDB implements replication in the form of replica sets. Don't use the term master-slave as that is what we had before replica sets. It still exists for some corner cases (e.g. > 12 replicas) but should otherwise be avoided.
      - A replica set consists of one or more ``mongod`` servers. Maximum 50 nodes in total and up to 7 with votes.
      - There is at most one ``mongod`` that is "primary" at any one time (though there are edge cases/bugs when there is more than one).
      - There are usually two or more other ``mongod`` instances that are secondaries.
      - Secondaries may become primary if there is a failover event of some kind.
      - Failover is automatic when correctly configured and a majority of nodes remain.
      - The secondaries elect a new primary automatically. A primary may also voluntarily step down, like when it can no longer reach the majority of nodes to avoid a potential split brain scenario.


Primary Server
--------------

- Clients send writes to the primary only.
- MongoDB, Inc. maintains client drivers in many programming languages like Java, C#, Javascript, Python, Ruby, and PHP.
- MongoDB drivers are replica set aware.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      If the primary for a replica set changes from one node to another, the driver will automatically route writes to the correct ``mongod``.


Secondaries
-----------

- A secondary replicates operations from another node in the replica set.
- Secondaries usually replicate from the primary.
- Secondaries may also replicate from other secondaries. This is called replication chaining.
- A secondary may become primary as a result of a failover scenario.

.. include:: /includes/student-notes.rst


Heartbeats
----------

.. include:: /images/replica-set-heartbeat.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The members of a replica set use heartbeats to determine if they can reach every other node.
      - The heartbeats are sent every two seconds.
      - If a node is unreachable, this may indicate server failure, a network partition, or simply too slow to respond. The heartbeat will timeout and retried several times before the state is updated.


The Oplog
---------

- The operations log, or oplog, is a special capped collection that is the basis for replication.
- The oplog maintains one entry for each document affected by every write operation.
- Secondaries copy operations from the oplog of their sync source.

.. only:: instructor

   .. note::

      Remind students that capped collections are collections that do not indefinitely expand. Once their maximum size is reached they were roll back to the beginning (oldest insert) and start overwriting data.

.. include:: /includes/student-notes.rst

Initial Sync
------------

- Occurs when a new server is added to a replica set, or we erase the underlying data of an existing server (--dbpath)
- All existing collections except the *local* collection are copied
- As of MongoDB >= 3.4, all indexes are built while data is copied
- As of MongoDB >= 3.4, initial sync is more resilient to intermittent network failure/degradation
