==================
Index Fundamentals
==================

Learning Objectives
-------------------

Upon completing this module students should understand:

- The impact of indexing on read performance
- The impact of indexing on write performance 
- How to choose effective indexes
- The utility of specific indexes for particular query patterns

.. only:: instructor

   .. note::

     - Ask how many people in the room are familiar with indexes in a relational database. 
     - If the class is already familiar with indexes, just explain that they work the same way in MongoDB. 

.. include:: /includes/student-notes.rst



Why Indexes? 
------------

.. include:: /images/btree-index.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Without an index, in order to find all documents matching a query, MongoDB must scan every document in the collection.
      - This is murder for read performance, and often write performance, too. 
      - If all your documents do not fit into memory, the system will page data in and out in order to scan the entire collection. 
      - An index enables MongoDB to locate exactly which documents match the query and where they are located on disk.
      - MongoDB indexes are based on B-trees.


Types of Indexes
----------------

- Single-field indexes
- Compound indexes
- Multikey indexes
- Geospatial indexes
- Text indexes

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - There are also hashed indexes and TTL indexes.
      - We will discuss those elsewhere.
 

Exercise: Using ``explain()``
-----------------------------

Let's explore what MongoDB does for the following query by using ``explain()``.

We are projecting only ``user.name`` so that the results are easy to read.

.. code-block:: javascript

   db.tweets.find( { "user.followers_count" : 1000 }, 
                   { "_id" : 0, "user.name": 1 } )

   db.tweets.find( { "user.followers_count" : 1000 } ).explain()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Make sure the students are using the sample database.
      - Review the structure of documents in the tweets collection by doing a find().
      - We'll be looking at the user subdocument for documents in this collection.


Results of ``explain()``
------------------------

With the default ``explain()`` verbosity, you will see results similar to the following:

.. code-block:: javascript

  { 
    "queryPlanner" : {
      "plannerVersion" : 1,
      "namespace" : "twitter.tweets",
      "indexFilterSet" : false,
      "parsedQuery" : {
        "user.followers_count" : {
          "$eq" : 1000
        }
      },

.. include:: /includes/student-notes.rst

Results of ``explain()`` - Continued
------------------------------------

.. code-block:: javascript

      "winningPlan" : {
          "stage" : "COLLSCAN",
          "filter" : {
            "user.followers_count" : {
              "$eq" : 1000
            }
          },
          "direction" : "forward"
        },
        "rejectedPlans" : [ ]
      },
      ...
    }

.. include:: /includes/student-notes.rst


``explain()`` Verbosity Can Be Adjusted
---------------------------------------

- **default:** determines the winning query plan but does not execute query
- **executionStats:** executes query and gathers statistics
- **allPlansExecution:** runs all candidate plans to completion and gathers statistics

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Default will be helpful if you're worried running the query could cause sever performance problems
      - executionStats will be the most common verbosity level used
      - allPlansExecution is for trying to determine WHY it is choosing the index it is (out of other candidates)


``explain("executionStats")``
-----------------------------

.. code-block:: javascript

  > db.tweets.find( { "user.followers_count" : 1000 } )
    .explain("executionStats")

Now we have query statistics:

.. code-block:: javascript

  ..
  "executionStats" : {
    "executionSuccess" : true,
    "nReturned" : 8,
    "executionTimeMillis" : 107,
    "totalKeysExamined" : 0,
    "totalDocsExamined" : 51428,
    "executionStages" : {
      "stage" : "COLLSCAN",
      "filter" : {
        "user.followers_count" : {
          "$eq" : 1000
        }
      },

.. include:: /includes/student-notes.rst

``explain("executionStats")`` - Continued
-----------------------------------------

.. code-block:: javascript

      "nReturned" : 8,
      "executionTimeMillisEstimate" : 100,
      "works" : 51430,
      "advanced" : 8,
      "needTime" : 51421,
      "needFetch" : 0,
      "saveState" : 401,
      "restoreState" : 401,
      "isEOF" : 1,
      "invalidates" : 0,
      "direction" : "forward",
      "docsExamined" : 51428
    }
    ...
  }

.. include:: /includes/student-notes.rst


``explain("executionStats")`` Output
------------------------------------

- ``nReturned`` displays the number of documents that match the query. 
- ``totalDocsExamined`` displays the number of documents the retrieval engine considered during the query. 
- ``totalKeysExamined`` displays how many documents in an existing index were scanned. 
- A ``totalKeysExamined`` or ``totalDocsExamined`` value much higher than ``nReturned`` indicates we need a different index.
- Given ``totalDocsExamined``, this query will benefit from an index. 

.. include:: /includes/student-notes.rst


Other Operations
----------------

In addition to ``find()``, we often want to use ``explain()`` to understand how other operations will be handled.

- ``aggregate()``
- ``count()``
- ``group()``
- ``deleteOne()``
- ``deleteMany()``
- ``updateOne()``
- ``updateMany()``
- ``replaceOne()``

.. include:: /includes/student-notes.rst


``db.<COLLECTION>.explain()``
-----------------------------

``db.<COLLECTION>.explain()`` returns an ExplainableCollection.

.. code-block:: javascript

  > var explainable = db.tweets.explain()
  > explainable.find( { "user.followers_count" : 1000 } )

equivalent to 

.. code-block:: javascript

  > db.tweets.explain().find( { "user.followers_count" : 1000 } )

also equivalent to

.. code-block:: javascript

  > db.tweets.find( { "user.followers_count" : 1000 } ).explain()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - This will get confusing for students, may want to spend extra time here with more examples


Using ``explain()`` for Write Operations
----------------------------------------

Simulate the number of writes that would have occurred and determine the index(es) used:

.. code-block:: javascript

  > db.tweets.explain("executionStats").deleteMany( { "user.followers_count" : 1000 } )

.. code-block:: javascript

  > db.tweets.explain("executionStats").updateMany( { "user.followers_count" : 1000 },
    { $set : { "large_following" : true } } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Walk through the "nWouldModify" field in the output to show how many documents would have been updated


Single-Field Indexes
--------------------

- Single-field indexes are based on a single field of the documents in a collection.
- The field may be a top-level field.
- You may also create an index on fields in embedded documents.

.. include:: /includes/student-notes.rst


Creating an Index
-----------------

The following creates a single-field index on ``user.followers_count``. 

.. code-block:: javascript

   db.tweets.createIndex( { "user.followers_count" : 1 } )
   db.tweets.find( { "user.followers_count" : 1000 } ).explain()

``explain()`` indicated there will be a substantial performance improvement in handling this type of query. 


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - nscannedObjects should now be a much smaller number, e.g., 8.
      - Operations teams are accustomed to thinking about indexes. 
      - With MongoDB, developers need to be more involved in the creation and use of indexes.


Listing Indexes
---------------

List indexes for a collection:

.. code-block:: javascript

   db.tweets.getIndexes()

List index keys:

.. code-block:: javascript

   db.tweets.getIndexKeys()

.. include:: /includes/student-notes.rst


Indexes and Read/Write Performance
----------------------------------

- Indexes improve read performance for queries that are supported by the index.
- Inserts will be slower when there are indexes that MongoDB must also update.
- The speed of updates may be improved because MongoDB will not need to do a collection scan to find target documents.
- An index is modified any time a document: 

  - Is inserted
  - Is deleted
  - Is updated in such a way that its indexed field changes

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - For mmapv1, an index may be modified if the document moves on disk (which it does when it outgrows its record space)


Index Limitations
-----------------

- You can have up to 64 indexes per collection.
- You should NEVER be anywhere close to that upper bound. 
- Write performance will degrade to unusable at somewhere between 20-30.

.. include:: /includes/student-notes.rst


Use Indexes with Care
--------------------- 

- Every query should use an index.  
- Every index should be used by a query.
- Any write operation that touches an indexed field will require each index to be updated.
- Indexes require RAM.
- Be judicious about the choice of key.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - If your system has limited RAM, then using the index will force other data out of memory. 
      - When you need to access those documents, they will need to be paged in again.
        
Additional Index Options
------------------------

- Sparse
- Unique
- Background
  
.. include:: /includes/student-notes.rst

Sparse Indexes in MongoDB
-------------------------

Sparse indexes only contain entries for documents that have the indexed field.

.. code-block:: javascript

  db.<COLLECTION>.createIndex( 
    { field_name : 1 },
    { sparse : true } )

.. include:: /includes/student-notes.rst


Defining Unique Indexes
-----------------------

- Enforce a unique constraint on the index.
- Prevent duplicate values from being inserted into the database.  
- No duplicate values may exist prior to defining the index.

.. code-block:: javascript

  db.<COLLECTION>.createIndex( 
    { field_name : 1 },
    { unique : true } )

.. include:: /includes/student-notes.rst


Building Indexes in the Background
----------------------------------

- Building indexes in foreground is a blocking operation.
- Background index creation is non-blocking, however, takes longer to build.
- Initially larger, or less compact, than an index built in the foreground.

.. code-block:: javascript

  db.<COLLECTION>.createIndex( 
    { field_name : 1 },
    { background : true } )

.. include:: /includes/student-notes.rst
