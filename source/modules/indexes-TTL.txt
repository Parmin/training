===========
TTL Indexes
===========

Learning Objectives
-------------------

Upon completing this module students should understand:

- How to create a TTL index.
- When a TTL indexed document will get deleted.
- Limitations of TTL indexes.

.. include:: /includes/student-notes.rst


TTL Index Basics
----------------

- TTL is short for "Time To Live".
- This must index a field of type "Date" (including ISODate) or "Timestamp"
- Any Date field older than expireAfterSeconds will get deleted at some point

.. include:: /includes/student-notes.rst


Creating a TTL Index
--------------------

Create with:

.. code-block:: javascript

   db.<COLLECTION>.ensureIndex( { field_name : 1 },
                              { expireAfterSeconds : some_number } )

.. include:: /includes/student-notes.rst


Exercise: Creating a TTL Index
------------------------------

Let's create a TTL index on the ``ttl`` collection that will delete documents older than 30 seconds. Write a script that will insert documents at a rate of one
per second.

.. code-block:: javascript
    
   db.sessions.drop()
   db.sessions.ensureIndex( { "last_user_action" : 1 }, 
                            { "expireAfterSeconds" : 30 } )

   i = 0
   while (true) {
       i += 1;
       db.sessions.insert( { "last_user_action" : ISODate(), "b" : i } );
       sleep(1000);  // Sleep for 1 second
   }

.. include:: /includes/student-notes.rst


Exercise: Check the Collection
------------------------------

Then, leaving that window open, open up a new terminal and connect to the database with the mongo shell. This will allow us to verify the TTL behavior.

.. code-block:: javascript
    
   // look at the output and wait. After a ramp-up of up to a minute or so,
   // count() will be reset to 30 once/minute.
   while (true) {
       print(db.testcol.count());
       sleep(100);
   } 

.. include:: /includes/student-notes.rst

