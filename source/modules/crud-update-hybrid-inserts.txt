======================
CRUD - UPSERT AND SAVE
======================

.. topic:: Learning Objectives
    
    By the end of this lesson, students will:

        - Understand the use cases for hybrid updates
        - Understand the syntax of upsert and save
        - Know about common operators
        - Know about how update operators act during hybrid inserts

Basics of Hybrid Updates
============================

    - They typical use case is one where you want to manipulate a field or, if
      it is not already present
    - An upsert is an update with the upsert : true field set in the options 
      document
    - The db.collection.save() is a syntactic sugar function that performs an
      upsert if the _id is not yet present


Upserts
=======

    - They syntax is db.collection.update( { find_document }, 
                                           { update_document },
                                           { upsert : true } )
    - The upsert will be an update if no documents are found that match,
      but will insert a document if no documents currently in the collection
      match
    - The new document created will have the following rules: 
        - Any fields uniquely specified in the query will be in the new document
            - An _id will be created if there was none in the query
        - The update will be performed on that new document

Exercise: Upserts
-----------------

.. code-block:: javascript

    for (i=1; i<=5; i++) { db.upserts.insert( { _id : i, a : i, b : i } ) }
    db.upserts.find()
    db.upserts.update( { a : 4 }, { $inc : { b : 3 } }, { upsert : true } )
    // updated the { a : 4 } document by incrementing b
    db.upserts.find()
    db.upserts.update( { a : 12 }, { $inc : { b : 3 } }, { upsert : true } )
    // created a new document, gave it an _id, and set a to 12. It then
    // performed the update.
    db.upserts.update( { _id : 6, a : 6 }, { c : 155 }, { upsert : true } )
    // created a new document, set _id : 6 and a : 6, and then did an update
    // that squashed a and set c to 155.

Save
====

    - The syntax is db.collection.save({ document } )
    - You can see the code with db.collection.save but no parentheses
    - Updates the document if the _id is found, inserts it otherwise

Exercise: Save

.. code-block:: javascript

    for (i=1; i<=5; i++) { db.saves.save( { _id : i, a : i, b : i } ) }
    db.saves.find()
    db.saves.save  // check out the function
    // Notice that it involves an upsert
    db.saves.save( { a : 3 } )  // new document, _id created
    db.saves.save( { _id : 6, a : 6 } )  // new document
    db.saves.save( { _id : 3, a : 12, b : 12  } )  // update!!
