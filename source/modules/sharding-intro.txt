========================
Introduction to Sharding
========================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- What problems sharding solves
- When sharding is appropriate
- The importance of the shard key and how to choose a good one
- Why sharding increases the need for redundancy

.. include:: /includes/student-notes.rst


Contrast with Replication
-------------------------

- In an earlier module, we discussed Replication.
- This should never be confused with sharding. 
- Replication is about high availability and durability.

  - Taking your data and constantly copying it 
  - Being ready to have another machine step in to field requests.

.. include:: /includes/student-notes.rst


Sharding is Concerned with Scale
--------------------------------

- What happens when a system is unable to handle the application load?
- It is time to consider scaling.  
- There are 2 types of scaling we want to consider:
  
  - Vertical scaling
  - Horizontal scaling

.. include:: /includes/student-notes.rst


Vertical Scaling
----------------

- Adding more RAM, faster disks, etc.  
- When is this the solution?  
- First, consider a concept called the ``working set``.  

.. include:: /includes/student-notes.rst


The Working Set
---------------

.. include:: /images/working-set-exceeds-ram.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The working set for a MongoDB database is the portion of your data that clients access most often.
      - Your working set should stay in memory, otherwise random disk operations will hurt performance.
      - For the fastest processing, ensure that your indexes fit entirely in RAM so that the system can avoid reading the index from disk.
      - In some cases, only recently indexed values must be in RAM.

   

Limitations of Vertical Scaling
-------------------------------

- There is a limit to how much RAM one machine can support.
- There are other bottlenecks such as I/O, disk access and network.  
- Cost may limit our ability to scale up.
- There may be requirements to have a large working set that no single machine could possible support.  
- This is when it is time to scale horizontally.

.. include:: /includes/student-notes.rst


Sharding Overview
-----------------

- MongoDB enables you to scale horizontally through sharding.
- Sharding is about adding more capacity to your system.
- MongoDB's sharding solution is designed to perform well on commodity hardware.
- The details of sharding are abstracted away from applications.
- Queries are performed the same way as if sending operations to a single server.
- Connections work the same by default.

.. include:: /includes/student-notes.rst


A Model that Does Not Scale
----------------------------

.. include:: /images/load-latency-linear2.rst
 
.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Load and latency are related. 
      - On a single server, latency tends to increase linearly with load.
      - Eventually latency is too great and the database has become a bottleneck.


A Scalable Model
----------------

.. include:: /images/load-latency-scalable.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Latency increases, but not linearly
      - We're not saying there is no increase in latency.
      - Just that it is much smaller than the increase in the server load.
      - Relational databases can scale vertically (i.e., by buying a bigger box). 
      - MongoDB scales vertically and horizontally (i.e., spreading out the load across several boxes)


Sharding Basics
---------------

.. include:: /images/sharded-collection.rst

.. only:: instructor

   .. note::

      - When you shard a collection it is distributed across several servers.
      - When you perform a read or write operation it will go to a router that will then direct the query to the appropriate server.
      - Depending on the operation and how your cluster is configured you may need to touch only one server to complete the operation.

.. include:: /includes/student-notes.rst




Sharded Cluster Architecture
----------------------------

.. include:: /images/sharded-cluster-no-config-servers.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - This figure illustrates one possible architecture for a sharded cluster.
      - Each shard is a self contained replica set.
      - Each replica set holds a partition of the data.
      - As many new shards could be added to this sharded cluster as scale requires.  
      - At this point our cluster can handle a load approaching twice that of a single replica set using the same hardware.
      - As mentioned, read/write operations go through a router.
      - The server that routes requests is the mongos.


Mongos
------

- A mongos is responsible for accepting requests and returning results to an application driver.  
- In a sharded cluster, nearly all operations go through a mongos.  
- A sharded cluster can have as many mongos routers as required.  
- It is typical for each application server to have one mongos.  
- Always use more than one mongos to avoid a single point of failure.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - A mongos is typically deployed on an application server.  
      - There should be one mongos per app server.  
      - Scale with your app server.
      - Very little latency between the application and the router.


Config Servers
--------------

.. include:: /images/sharded-cluster-production-architecture.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The previous diagram was incomplete; it was missing config servers.
      - Use three config servers in production.
      - These hold only metadata about the sharded collections.

        - Where your mongos servers are
        - Any hosts that are not currently available
        - What collections you have
        - How your collections are partitioned across the cluster

      - Mongos processes use them to retrieve the state of the cluster.
      - You can access cluster metadata from a mongos by looking at the ``config`` db.


Config Server Hardware Requirements
-----------------------------------

- Quality network interfaces
- A small amount of disk space (typically a few GB) 
- A small amount of RAM (typically a few GB) 
- The larger the sharded cluster, the greater the config server hardware requirements.  

.. include:: /includes/student-notes.rst


When to Shard
-------------

- If you have more data than one machine can hold on its drives
- If your application is write heavy and you experiencing too much latency.
- If your working set outgrows the memory you can allocate to a single machine.

.. include:: /includes/student-notes.rst


Possible Imbalance?
-------------------

- Depending on how you configure sharding, data can become unbalanced on your sharded cluster. 

  - Some shards might receive more inserts than others.
  - Some shards might have documents that grow more than those in other shards.

- This may result in too much load on a single shard.

  - Reads and writes
  - Disk activity
  
- This would defeat the purpose of sharding.

.. include:: /includes/student-notes.rst


Balancing Shards
----------------

- MongoDB divides data into ``chunks``.
- This is bookkeeping metadata.
  
  - There is nothing in a document that indicates its chunk.
  - The document does not need to be updated if its assigned chunk changes.

- If a chunk grows too large MongoDB will split it into two chunks.
- The MongoDB balancer keeps chunks distributed across shards in equal numbers.
- However, a balanced sharded cluster depends on a good shard key.

.. include:: /includes/student-notes.rst


What is a Shard Key?
--------------------

- You must define a shard key for a sharded collection.
- Based on one or more fields that every document must contain.
- Is immutable.
- The shard key determines where documents are located in the cluster.
- It is used to route operations to the appropriate shard.
- For reads and writes

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - For reads and updates, the shard key determines which shard holds the document and will handle the operation.
      - When you insert a document, the shard key determines which server you will write to.


Targeted Query Using Shard Key
------------------------------

.. include:: /images/sharded-cluster-targeted-query.rst

.. include:: /includes/student-notes.rst


With a Good Shard Key
---------------------

You might easily see that:

- Reads hit only 1 or 2 shards per query.
- Writes are distributed across all servers.
- Your disk usage is evenly distributed across shards.
- Things stay this way as you scale.

.. include:: /includes/student-notes.rst


With a Bad Shard Key
--------------------

You might see that:

- Your reads hit every shard.
- Your writes are concentrated on one shard.
- Most of your data is on just a few shards.
- Adding more shards to the cluster will not help.

.. include:: /includes/student-notes.rst


Choosing a Shard Key
--------------------

Generally, you want a shard key:

- That has high cardinality
- That is used in the majority of read queries
- For which the values read and write operations use are randomly distributed
- For which the majority or reads are routed to a particular server

.. include:: /includes/student-notes.rst


More Specifically
-----------------

- Your shard key should be consistent with your query patterns.
- If reads usually find only one document, you only need good cardinality.
- If reads retrieve many documents:

  - Your shard key supports locality
  - Matching documents will reside on the same shard.

.. include:: /includes/student-notes.rst


Cardinality
-----------

- A good shard key will have high cardinality.
- A relatively small number of documents should have the same shard key.
- Otherwise operations become isolated to the same server.
- Because documents with the same shard key reside on the same shard.
- Adding more servers will not help.
- Hashing will not help.

.. include:: /includes/student-notes.rst


Non-Monotonic
-------------

- A good shard key will generate new values non-monotonically.
- Datetimes, counters, and ObjectIds make bad shard keys.
- Monotonic shard keys cause all inserts to happen on the same shard.
- Hashing will solve this problem.
- However, doing range queries with a hashed shard key will perform a scatter-gather query across the cluster.

.. include:: /includes/student-notes.rst

.. only:: instructor
 
   .. note::

      - Documents will eventually move as chunks are balanced.
      - But in the meantime one server gets hammered while others are idle.
      - And moving chunks has its own performance costs.


Shards Should be Replica Sets
-----------------------------

- As the number of shards increases, the number of servers in your deployment increases.
- This increases the probability that one server will fail on any given day.
- With redundancy built into each shard you can mitigate this risk.

.. include:: /includes/student-notes.rst
