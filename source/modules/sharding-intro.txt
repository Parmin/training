=======================
Sharding - Introduction
=======================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- What problems sharding solves
- When sharding is appropriate
- How sharding works with the shard key


Sharding - Overview
-------------------

- Previously, we discussed Replication, which was involved in protecting your data, not in making access any faster. Sharding is about making data access faster.
- Sharding is MongoDB's way of allowing you to scale out your data to multiple servers. It's how you scale horizontally.
- Sharding is designed to be as easy as possible - your applications will not know that they operate in a sharded environment. All queries will work the same, and connections will work the same by default.


Scalable vs. Non-scaling Databases
----------------------------------

- In a database that doesn't scale, latency will increase with server load:

.. figure:: /images/doesnt_scale.png

- In a database that does scale, latency will not increase in direct proportion to the server load:

.. figure:: /images/does_scale.png

  - Notice that this diagram doesn't claim that there is no increase in latency due to scaling, just that it is much smaller than the increase in the server load.

- Relational databases scale the first way. MongoDB scales the second one.


Sharding - Basics
-----------------

- When you shard a collection, that collection will become distributed across several servers.
- When you make a query (be it a read operation or a write operation), that query will go to a router that will then direct the query to the appropriate server.
- In order to read or write any one document, you will only have to touch one server.
 
  - Depending on your query and your sharding setup, you may be able to read or write many documents but only touch one server.


Sharding - More Details
-----------------------

- Consider the following image:

.. figure:: /images/sharded-collection.png
    :width: 600 px
    :align: center

- This has two replica sets with 3 servers each. Each replica set is a "shard."

  - So this cluster has only two shards.

- Each shard has a "partition" of the data for each sharded collection.
- The router is a mongos process. 

  - This cluster has only one mongos
  - A cluster can have LOTS of mongos processes. They operate in parallel just fine.
  - It is typical for a cluster to have one mongos per application server.


Sharding - Config Servers
-------------------------

- Actually, the previous diagram was wrong. There are also 3 config servers in a sharded collection:

.. figure:: /images/sharded-cluster-with-configs.png
    :width: 600 px
    :align: center

- These config servers hold only metadata about the collection.
- You can access this data from a mongos by looking at the 'config' db.
- These will keep track of where data is, and if need be, where it should go.
- There are 3 of them in production.

  - They are NOT a replica set, but they all have identical data.
  - If a config server goes down or the data in one gets out of sync with another, chunks will not be split or moved until the issue is resolved.


When to Shard
-------------

- If you have more data than one machine can hold on its drives
- If you are doing a heavy write load, and it is increasing your latency
- If your working set outgrows your available memory on one machine

  - You might notice a lot of page faults if this is happening


Sharding - Shard Key Basics
---------------------------

- Every sharded cluster has an index called the Shard Key. 
- The Shard Key determines where your data is, so if you make a query, the shard key determines which server (or servers) it's on.
- Similarly, when you create a new document, the shard key determines which server you will write to.


Sharding - Keeping Things Balanced
----------------------------------

- Data will tend to get unbalanced on your sharded cluster. This can happen if:

  - Some of your servers get more inserts than others
  - Some of your servers have documents that grow more than other servers

- This can cause a number of problems.

  - Reads might get imbalanced.
  - Updates might get imbalanced.
  - Hard drive usage will get imbalanced, with some servers hitting capacity.


Sharding - Chunks
-----------------

- To deal with imbalances, MongoDB divides the data into "chunks."

  - This is a bookkeeping technique handled by the servers and the routers external of the data set
  
    - There is nothing in a document that indicates its chunk.
    - The document does not need to be updated if its assigned chunk changes.

- As a chunk grows, eventually it will split into two chunks, each of which has a subset of the shard key's range.
- As those chunks grow, they will split, too.
- The cluster will keep the number of chunks on each shard balanced.
