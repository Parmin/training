========================
Introduction to Sharding
========================


Learning Objectives
-------------------

Upon completing this module students should understand:

- What problems sharding solves
- When sharding is appropriate
- How sharding works with the shard key

Contrast with Replication
-------------------------

- In an earlier module e discussed Replication.
- This should never be confused with sharding. 
- Replication is about high availability and durability.

  - Taking your data and constantly copying it 
  - Being ready to have another machine step in to field requests.

Sharding is Concerned with Scale
--------------------------------

- What happens when a system is unable to handle the application load?
- It is time to consider scaling.  
- There are 2 types of scaling we want to consider:
  
  - Vertical scaling
  - Horizontal scaling


Vertical Scaling
----------------
- Adding more RAM, faster disks, etc.  
- When is this the solution?  
- First, consider a concept called the ``working set``.  


The Working Set
---------------

TODO: ADD A FIGURE

.. only:: instructor

   .. note::

      - The working set contains the documents and indexes that are currently being used by an application.
      - It is best if the working set fits in RAM.
      - In this figure there are many more documented in use than can fit in RAM.  
      - This would result in page faults affecting performance.  
      - More RAM would cover a larger area of the database.  
   

Limitations of Vertical Scaling
-------------------------------

- There is a limit to how much RAM one machine can support.
- There are other bottlenecks such as I/O, disk access and network.  
- Cost may limit our ability to scale up.
- There may be requirements to have a large working set that no single machine could possible support.  
- This is when it is time to scale horizontally.


Sharding - Overview
-------------------

- MongoDB enables you to scale horizontally through sharding.
- Sharding is about adding more capacity to your system.
- MongoDB's sharding solution is designed to perform well on commodity hardware.
- The details of sharding are abstracted away from applications.
- Queries are performed the same way as if sending operations to a single server.
- Connections work the same by default.


An Model that Does Not Scale
----------------------------

TODO: REPLACE WITH BETTER FIGURE.

.. figure:: /images/doesnt_scale.png
   :align: center

.. only:: instructor

   .. note::

      - Load and latency are related. 
      - On a single server, latency tends to increase linearly with load.
      - Eventually latency is too great and the database has become a bottleneck.

TODO: REPLACE WITH BETTER FIGURE.

.. figure:: /images/does_scale.png
    :align: center

.. only:: instructor

   .. note::

      - Latency increases, but not linearly
      - We're not saying there is no increase in latency.
      - Just that it is much smaller than the increase in the server load.
      - Relational databases can scale vertically (i.e., by buying a bigger box). 
      - MongoDB scales vertically and horizontally (i.e., spreading out the load across several boxes)


Sharding - Basics
-----------------

- When you shard a collection, that collection will become distributed across several servers.
- When you make a query (be it a read operation or a write operation), that query will go to a router that will then direct the query to the appropriate server.
- In order to read or write any one document, you will only have to touch one server.
 
  - Depending on your query and your sharding setup, you may be able to read or write many documents but only touch one server.


Sharding - More Details
-----------------------

- Consider the following image:

.. figure:: /images/sharded-collection.png
    :width: 600 px
    :align: center

- This has two replica sets with 3 servers each. Each replica set is a "shard."

  - So this cluster has only two shards.

- Each shard has a "partition" of the data for each sharded collection.
- The router is a mongos process. 

  - This cluster has only one mongos
  - A cluster can have LOTS of mongos processes. They operate in parallel just fine.
  - It is typical for a cluster to have one mongos per application server.


Sharding - Config Servers
-------------------------

- Actually, the previous diagram was wrong. There are also 3 config servers in a sharded collection:

.. figure:: /images/sharded-cluster-with-configs.png
    :width: 600 px
    :align: center

- These config servers hold only metadata about the collection.
- You can access this data from a mongos by looking at the 'config' db.
- These will keep track of where data is, and if need be, where it should go.
- There are 3 of them in production.

  - They are NOT a replica set, but they all have identical data.
  - If a config server goes down or the data in one gets out of sync with another, chunks will not be split or moved until the issue is resolved.


When to Shard
-------------

- If you have more data than one machine can hold on its drives
- If you are doing a heavy write load, and it is increasing your latency
- If your working set outgrows your available memory on one machine

  - You might notice a lot of page faults if this is happening


Sharding - Shard Key Basics
---------------------------

- Every sharded cluster has an index called the Shard Key. 
- The Shard Key determines where your data is, so if you make a query, the shard key determines which server (or servers) it's on.
- Similarly, when you create a new document, the shard key determines which server you will write to.


Sharding - Keeping Things Balanced
----------------------------------

- Data will tend to get unbalanced on your sharded cluster. This can happen if:

  - Some of your servers get more inserts than others
  - Some of your servers have documents that grow more than other servers

- This can cause a number of problems.

  - Reads might get imbalanced.
  - Updates might get imbalanced.
  - Hard drive usage will get imbalanced, with some servers hitting capacity.


Sharding - Chunks
-----------------

- To deal with imbalances, MongoDB divides the data into "chunks."

  - This is a bookkeeping technique handled by the servers and the routers external of the data set
  
    - There is nothing in a document that indicates its chunk.
    - The document does not need to be updated if its assigned chunk changes.

- As a chunk grows, eventually it will split into two chunks, each of which has a subset of the shard key's range.
- As those chunks grow, they will split, too.
- The cluster will keep the number of chunks on each shard balanced.
