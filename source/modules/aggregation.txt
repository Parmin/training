====================
Aggregation Tutorial
====================


Learning Objectives
-------------------

Upon completing this module students should understand:

- The concept of the aggregation pipeline
- The stages of the aggregation pipeline
- How to use aggregation operators
- The fundamentals of using aggregation for data analysis
- Group aggregation operators
- Using the same operator in multiple stages of an aggregation pipeline

.. include:: /includes/student-notes.rst


Aggregation Basics
------------------

- Use the aggregation framework to transform and analyze data in MongoDB collections.
- For those who are used to SQL, aggregation can be similar to ``GROUP BY``.
- The aggregation framework is based on the concept of a pipeline.

.. include:: /includes/student-notes.rst


The Aggregation Pipeline
------------------------

- An aggregation pipeline in analogous to a UNIX pipeline.
- Each stage of the pipeline:

  - Receives a set of documents as input.
  - Performs an operation on those documents.
  - Produces a set of documents for use by the following stage.

- A pipeline has the following syntax:

  .. code-block:: javascript

     db.<COLLECTION>.aggregate( [ { stage1 }, { stage2 }, ... ],
                              { options } )

.. include:: /includes/student-notes.rst


Aggregation Stages
------------------

- ``$match``: Similar to ``find()``
- ``$project``: Shape documents
- ``$sort``: Like the cursor method of the same name
- ``$skip``: Like the cursor method of the same name
- ``$limit``: Like the cursor method of the same name
- ``$unwind``: Used for working with arrays
- ``$group``: Used to aggregate field values from multiple documents
- ``$graphLookup``: Performs a recursive search on a collection
- ``$out``: Creates a new collection from the output of an aggregation
  pipeline

.. include:: /includes/student-notes.rst


The Match Stage
---------------

- The ``$match`` operator works like the query phase of ``find()``
- Documents in the pipeline that match the query document will be passed to subsequent stages.
- ``$match`` is often the first operator used in an aggregation stage.
- Like other aggregation operators, ``$match`` can occur multiple times in a single pipeline.

.. include:: /includes/student-notes.rst


The Project Stage
-----------------

- $project allows you to shape the documents into what you need for the next stage.

  - The simplest form of shaping is using $project to select only the fields you are interested in.
  - $project can also create new fields from other fields in the input document.

    - *E.g.*, you can pull a value out of an embedded document and put it at the top level.
    - *E.g.*, you can create a ratio from the values of two fields as pass along as a single field.

- $project produces 1 output document for every input document it sees.

.. include:: /includes/student-notes.rst


A Twitter Dataset
-----------------

- Let's look at some examples that illustrate the MongoDB aggregation framework.
- These examples operate on a collection of tweets.

  - As with any dataset of this type, it's a snapshot in time.
  - It may not reflect the structure of Twitter feeds as they look today.

.. include:: /includes/student-notes.rst


Tweets Data Model
-----------------

.. code-block:: javascript

   {
       "text" : "Something interesting ...",
       "entities" : {
	   "user_mentions" : [
	       {
		   "screen_name" : "somebody_else",
		   ...
	       }
	   ],
	   "urls" : [ ],
	   "hashtags" : [ ]
       },
       "user" : {
	   "friends_count" : 544,
	   "screen_name" : "somebody",
	   "followers_count" : 100,
	   ...
       },
   }

.. include:: /includes/student-notes.rst


Analyzing Tweets
----------------

- Imagine the types of analyses one might want to do on tweets.
- It's common to analyze the behavior of users and the networks involved.
- Our examples will focus on this type of analysis

.. only:: instructor

   .. note::

      - We should also mention that our tweet documents actually contain many more fields.
      - We are showing just those fields relevant to the aggregations we'll do.

.. include:: /includes/student-notes.rst


Friends and Followers
---------------------

- Let's look again at two stages we touched on earlier:

  - ``$match``
  - ``$project``

- In our dataset:

  - ``friends`` are those a user follows.
  - ``followers`` are others that follow a users.

- Using these operators we will write an aggregation pipeline that will:

  - Ignore anyone with no friends and no followers.
  - Calculate who has the highest followers to friends ratio.

.. include:: /includes/student-notes.rst


Exercise: Friends and Followers
-------------------------------

.. code-block:: javascript

   db.tweets.aggregate( [
       { $match: { "user.friends_count": { $gt: 0 },
		   "user.followers_count": { $gt: 0 } } },
       { $project: { ratio: {$divide: ["$user.followers_count",
		 		       "$user.friends_count"]},
		     screen_name : "$user.screen_name"} },
       { $sort: { ratio: -1 } },
       { $limit: 1 } ] )

.. only:: instructor

   .. note::

      - Discuss the $match stage
      - Discuss the $project stage as a whole
      - Remember that with project we can pull a value out of an embedded document and put it at the top level.
      - Discuss the ratio projection
      - Discuss screen_name projection
      - Give an overview of other operators we might use in projections

.. include:: /includes/student-notes.rst


Exercise: $match and $project
-----------------------------

- Of the users in the "Brasilia" timezone who have tweeted 100 times or more, who has the largest number of followers?
- Time zone is found in the “time_zone” field of the user object in each tweet.
- The number of tweets for each user is found in the “statuses_count” field.
- A result document should look something like the following:

  .. code-block:: javascript

     { _id        : ObjectId('52fd2490bac3fa1975477702'),
       followers  : 2597,
       screen_name: 'marbles',
       tweets     : 12334
     }


.. only:: instructor

   .. note::

      .. code-block:: javascript

         [ { "$match" : { "user.time_zone" : "Brasilia",
	 		  "user.statuses_count" : {"$gte" : 100} } },
           { "$project" : { "followers" : "$user.followers_count",
                            "tweets" : "$user.statuses_count",
                            "screen_name" : "$user.screen_name" } },
           { "$sort" : { "followers" : -1 } },
           { "$limit" : 1 } ]

.. include:: /includes/student-notes.rst


The Group Stage
----------------

- For those coming from the relational world, ``$group`` is similar to the SQL ``GROUP BY`` statement.
- $group operations require that we specify which field to group on.
- Documents with the same identifier will be aggregated together.
- With $group, we aggregate values using :manual:`accumulators</meta/aggregation-quick-reference/#accumulators>`.

.. include:: /includes/student-notes.rst


Tweet Source
------------

- The tweets in our twitter collection have a field called ``source``.
- This field describes the application that was used to create the tweet.
- Let's write an aggregation pipeline that identifies the applications most frequently used to publish tweets.

.. include:: /includes/student-notes.rst


Exercise: Tweet Source
----------------------

.. code-block:: javascript

   db.tweets.aggregate( [
       { "$group" : { "_id" : "$source",
		      "count" : { "$sum" : 1 } } },
       { "$sort" : { "count" : -1 } }
   ] )

.. include:: /includes/student-notes.rst


Group Aggregation Accumulators
------------------------------

Accumulators available in the group stage:

- $sum
- $avg
- $first
- $last
- $max
- $min
- $push
- $addToSet

.. include:: /includes/student-notes.rst



Rank Users by Number of Tweets
------------------------------

- One common task is to rank users based on some metric.
- Let's look at who tweets the most.
- Earlier we did the same thing for tweet source.

  - Group together all tweets by a user for every user in our collection
  - Count the tweets for each user
  - Sort in decreasing order

- Let's add the list of tweets to the output documents.
- Need to use an accumulator that works with arrays.
- Can use either $addToSet or $push.

.. include:: /includes/student-notes.rst


Exercise: Adding List of Tweets
-------------------------------

For each user, aggregate all their tweets into a single array.

.. code-block:: javascript

   db.tweets.aggregate( [
      { "$group" : { "_id" : "$user.screen_name",
                     "tweet_texts" : { "$push" : "$text" },
                     "count" : { "$sum" : 1 } } },
      { "$sort" : { "count" : -1 } },
      { "$limit" : 3 }
   ] )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - $group operations require that we specify which field to group on.
      - In this case, we group documents based on the user's screen name.
      - With $group, we aggregate values using arithmetic or array operators.
      - Here we are counting the number of documents for each screen name.
      - We do that by using the $sum operator
      - This will add 1 to the count field for each document produced by the $group stage.
      - Note that there will be one document produced by $group for each screen name.
      - The $sort stage receives these documents as input and sorts them by the value of the count field



The Unwind Stage
----------------

- In many situations we want to aggregate using values in an array field.
- In our tweets dataset we need to do this to answer the question:

  - "Who includes the most user mentions in their tweets?"

- User mentions are stored within an embedded document for entities.
- This embedded document also lists any urls and hashtags used in the tweet.

.. include:: /includes/student-notes.rst


Example: User Mentions in a Tweet
---------------------------------

.. code-block:: javascript

   ...
   "entities" : {
       "user_mentions" : [
           {
               "indices" : [
                   28,
                   44
               ],
               "screen_name" : "LatinsUnitedGSX",
               "name" : "Henry Ramirez",
               "id" : 102220662
           }
       ],
       "urls" : [ ],
       "hashtags" : [ ]
    },
    ...

.. include:: /includes/student-notes.rst


Using $unwind
-------------

Who includes the most user mentions in their tweets?

.. code-block:: javascript

   db.tweets.aggregate(
       { $unwind: "$entities.user_mentions" },
       { $group: { _id: "$user.screen_name",
		   count: { $sum: 1 } } },
       { $sort: { count: -1 } },
       { $limit: 1 })

.. only:: instructor

   .. note::

      - Many tweets contain multiple user mentions.
      - We use unwind to produce one document for each user mention.
      - Each of these documents is passed to the $group stage that follows.
      - They will be grouped by the user who created the tweet and counted.
      - As a result we will have a count of the total number of user mentions made by any one tweeter.

.. include:: /includes/student-notes.rst


Data Processing Pipelines
-------------------------

- The aggregation framework allows you to create a data processing pipeline.
- You can include as many stages as necessary to achieve your goal.
- For each stage consider:

  - What input that stage must receive
  - What output it should produce.

- Many tasks require us to include more than one stage using a given operator.

.. include:: /includes/student-notes.rst


Most Unique User Mentions
-------------------------

- We frequently need multiple group stages to achieve our goal.
- We just looked at a pipeline to find the tweeter that mentioned the most users.
- Let's change this so that it is more of a question about a tweeter's active network.
- We might ask which tweeter has mentioned the most unique users in their tweets.

.. include:: /includes/student-notes.rst


Same Operator ($group), Multiple Stages
---------------------------------------

Which tweeter has mentioned the most unique users in their tweets?

.. code-block:: javascript

   db.tweets.aggregate( [
       { $unwind: "$entities.user_mentions" },
       { $group: {
           _id: "$user.screen_name",
	   mset: { $addToSet: "$entities.user_mentions.screen_name"  } } },
       { $unwind: "$mset"},
       { $group: { _id: "$_id", count: { $sum: 1 } } },
       { $sort: { count: -1 } },
       { $limit: 1 }
   ] )

.. only:: instructor

   .. note::

      - We begin as we did before by unwinding user mentions.
      - Instead of simple counting them, we aggregate using $addToSet.
      - This produces documents that include only unique user mentions.
      - We then do another unwind stage to produce a document for each unique user mention.
      - And count these in a second $group stage.

.. include:: /includes/student-notes.rst


The Sort Stage
--------------

- Uses the $sort operator
- Works like the ``sort()`` cursor method
- 1 to sort ascending; -1 to sort descending
- E.g, db.testcol.aggregate( [ { $sort : { b : 1, a : -1 } } ] )

.. include:: /includes/student-notes.rst


The Skip Stage
--------------

- Uses the $skip operator
- Works like the ``skip()`` cursor method.
- Value is an integer specifying the number of documents to skip.
- E.g, the following will pass all but the first 3 documents to the next stage in the pipeline.

  - db.testcol.aggregate( [ { $skip : 3 }, ... ] )

.. include:: /includes/student-notes.rst


The Limit Stage
---------------

- Used to limit the number of documents passed to the next aggregation stage.
- Works like the ``limit()`` cursor method.
- Value is an integer.
- E.g., the following will only pass 3 documents to the stage that comes next in the pipeline.

  - db.testcol.aggregate( [ { $limit: 3 }, ... ] )

.. include:: /includes/student-notes.rst

The GraphLookup Stage
---------------------

- Used to perform a recursive search on a collection, with options for restricting the search by recursion depth and query filter.
- Has the following prototype form:

.. code-block:: javascript

   $graphLookup: {
      from: <collection>,
      startWith: <expression>,
      connectFromField: <string>,
      connectToField: <string>,
      as: <string>,
      maxDepth: <number>,
      depthField: <string>,
      restrictSearchWithMatch: <document>
   }

.. only:: instructor

   .. note::

      `$graphLookup Documentation <https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/>`_

.. include:: /includes/student-notes.rst

**$graphLookup** Fields
-----------------------

- **from**: The target collection for ``$graphLookup`` to search
- **startWith**: Expression that specifies the value of the connectFromField with which to start the recursive search
- **connectFromField**: field name whose value $graphLookup uses to recursively match against the connectToField of other documents in the collection
- **connectToField**: 	Field name in other documents against which to match the value of the field specified by the connectFromField parameter
- **as**: Name of the array field added to each output document

.. include:: /includes/student-notes.rst

**$graphLookup** Optional Fields
--------------------------------

- **maxDepth**: Optional. Non-negative integral number specifying the maximum recursion depth.
- **depthField**: Optional. Name of the field to add to each traversed document in the search path. The value of this field is the recursion depth for the document
- **restrictSearchWithMatch**: Optional. A document specifying additional conditions for the recursive search. The syntax is identical to query filter syntax.


.. only:: instructor

   .. note::

      You cannot use any aggregation expression in this filter. For example, a query document such as

      .. code-block:: javascript

         { lastName: { $ne: "$lastName" } }

      will not work in this context to find documents in which the lastName value is different from the lastName value of the input document,
      because "$lastName" will act as a string literal, not a field path.

`Query Documentation <https://docs.mongodb.com/manual/tutorial/query-documents/#read-operations-query-argument>`_

.. include:: /includes/student-notes.rst

**$graphLookup** Search Process
------------------------------

Input documents flow into the ``$graphLookup`` stage of an aggregation

- ``$graphLookup`` targets the search to the collection designated by the ``from`` parameter

For each input document, the search begins with the value designated by ``startWith``
- ``$graphLookup`` matches the ``startWith`` value against the field designated by the ``connectToField`` in other documents in the ``from`` collection

.. include:: /includes/student-notes.rst

**$graphLookup** Search Process Continued
----------------------------------------

For each matching document, ``$graphLookup`` takes the value of the ``connectFromField`` and checks every document in the ``from`` collection for a matching ``connectToField`` value

- For each match, ``$graphLookup`` adds the matching document in the ``from`` collection to an array field named by the ``as`` parameter

- This step continues recursively until no more matching documents are found, or until it reaches the recursion depth specified by ``maxDepth``

.. include:: /includes/student-notes.rst

**$graphLookup** Considerations
-------------------------------

- The collection specified in ``from`` cannot be sharded.
- Setting ``maxDepth`` to 0 is equivalent to ``$lookup``
- The ``$graphLookup`` stage must stay within the 100 megabyte memory limit. ``$graphLookup`` will ignore ``allowDiskUse: true``
- If performing an aggregation that involves multiple views, the views must have the same collation.

.. only:: instructor

   .. note::

      Although ``$graphLookup`` ignores the **allowDiskUse** argument, other stages in the aggregation pipeline will use it.

.. include:: /includes/student-notes.rst

**$graphLookup** Example
------------------------

Let's illustrate how ``$graphLookup`` works with an example.

.. code-block:: javascript

   use company;
   db.employees.insertMany([
     { "_id" : 1, "name" : "Dev" },
     { "_id" : 2, "name" : "Eliot", "reportsTo" : "Dev" },
     { "_id" : 3, "name" : "Ron", "reportsTo" : "Eliot" },
     { "_id" : 4, "name" : "Andrew", "reportsTo" : "Eliot" },
     { "_id" : 5, "name" : "Asya", "reportsTo" : "Ron" },
     { "_id" : 6, "name" : "Dan", "reportsTo" : "Andrew" }
   ])

.. include:: /includes/student-notes.rst

**$graphLookup** Example Continued
----------------------------------

With the sample data inserted, perform the following aggregation:

.. code-block:: javascript

   db.employees.aggregate([
     {
       $match: { "name": "Dan" }
     }, {
       $graphLookup: {
         from: "employees",
         startWith: "$reportsTo",
         connectFromField: "reportsTo",
         connectToField: "name",
         as: "reportingHierarchy"
        }
     }
   ]).pretty()

.. include:: /includes/student-notes.rst

**$graphLookup** Example Results
--------------------------------

The previous ``$graphLookup`` operation will produce the following:

.. code-block:: javascript

   {
     "_id" : 6,
     "name" : "Dan",
     "reportsTo" : "Andrew",
     "reportingHierarchy" : [
       { "_id" : 1, "name" : "Dev" },
       { "_id" : 2, "name" : "Eliot", "reportsTo" : "Dev" },
       { "_id" : 4, "name" : "Andrew", "reportsTo" : "Eliot" }
     ]
   }

.. include:: /includes/student-notes.rst

The Out Stage
-------------

- Used to create a new collection from the output of the aggregation pipeline.
- Can only be the last stage in the pipeline.
- If a collection by the name already exists, it replaces that collection.
- Syntax is { $out : "collection_name" }


.. include:: /includes/student-notes.rst
