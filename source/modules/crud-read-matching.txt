==============
READ: Matching
==============

.. topic:: Upon completing this module, students should understand:

    - The "query by example" paradigm of MongoDB
    - The .pretty() method on the cursor
    - Querying behavior of arrays
    - How to query using dot notation

The find() Method
=================

    - This is the basic method of all reads.
    - You've already seen us use it in its basic form
    - db.collection.find() will return a cursor (which we'll talk about later)
      that returns all documents in the collection.

Query by Example
================

    - In order to get only a few documents, you specify just the field:value pairs 
      you want to match
    - Any field that you don't specify won't be used to exclude documents
    - You'll get back all of the documents in the collection that match.

Exercise: Querying by Example
-----------------------------

First, let's create some documents to query.

.. code-block:: javascript

    db.moreStuff.insert( [ 
                           { _id : 1, a : 5, b : 3 },
                           { _id : 3, b : 5, c : 12 },
                           { a : 7, b : 3 },
                           { c : 5, b : 7 } 
                         ] )
    db.moreStuff.find()
    db.moreStuff.find( { a : 5 } )
    db.moreStuff.find( { _id : 1 } )
    db.morestuff.find( { b : 3, a : 7 } )

Matching Rules
==============

    - Any field: value pair specified in the query must be in each document returned.
    - If multiple field:value pairs are specified, then all of them must be present
      in each document returned
        - Think of it as a logical AND for all fields.
    - Keep in mind, if you query only on _id (or some other unique field), you will get
      back at most one document.

Pretty Printing in MongoDB
==========================

    - Pretty printing is done using the .pretty() method
    - It is only relevant in the shell, not in drivers
    - It can help make documents more readable
    - Keep in mind that documents will take up more vertical space

Querying Arrays
===============

    - When the value of a field is an array, you have two choices
        - Query using exactly that full array
        - Query using any element in that array
    - Think of a field with an array as having lots of values, one 
      for each of its elements.

Exercise: Querying Arrays
-------------------------

.. code-block:: javascript
    db.arrayExample.insert( 
        [ { a : [ 1, 2, 3 ] },
          { a : [ 3, 4, 5 ] },
          { a : [ 5, 6, 7 ] } ] )
    db.arrayExample.find( { a : 3 } )  // first and second documents
    db.arrayExample.find( { a : 5 } )  // second and third documents
    db.arrayExample.find( { a : [ 3, 5 ] } )  // no documents
    db.arrayExample.find( { a : [ 3, 4, 5 ] } )  // only the second document


Querying with Dot Notation
===========================

    - Dot notation is used to query for fields inside of subdocuments
    - It allows you to specify only part of that subdocument for a match
    - The format is "field1.field2" : value
    - You need to use quotation marks around the field name if you are 
      using dot notation.

Exercise: Querying with Dot Notation
------------------------------------

.. code-block:: javascript
    db.buildings.insert( 
        [ { 
              type : "house", location : 
              { 
                  streetNumber : 123, 
                  street : "MongoDB Lane" 
              }
          }, { 
              type : "office", 
              location : 
              { 
                  streetNumber : 234, 
                  street : "MongoDB Lane", 
                  floor : 7, 
                  roomNumber : 3 
              } 
          }, { 
              type : "apartment", 
              location : 
              { 
                  streetNumber : 456, 
                  street : "10gen Way", 
                  aptartmentNumber : 745 
              } 
           }, { 
               type : "apartment", 
               location : 
               { 
                   streetNumber : 456,
                   street : "10gen Way",
                   apartmentNumber : 332 
               } 
           } ] )
    db.buildings.find( { 
                           location : 
                           { 
                               street : "MongoDB Lane" 
                           } 
                       } )  // No matches
    db.buildings.find( { 
                           location : 
                           { 
                               streetNumber : 123, 
                               street : "MongoDB Lane" 
                           } 
                       } )  // One match
    db.buildings.find( { "location.street" : "MongoDB Lane" } )  // Two matches
    db.buildings.find( { 
                           "location.street" : "10gen Way", 
                           "location.apartmentNumber" : 745 
                       } )  // One match


Querying in Arrays with Dot Notation
====================================

    - To look at a position in an array, use an integer
    - If the array contains a document, combine the rules
        - Use dot notation to reach into the document in the array


.. code-block:: javascript

    db.characters.insert( 
    [
        { letters : [ "a", "b", "c" ] },
        { letters : [ "b", "c", "d" ] },
        { letters : [ "z", "c", "q" ] }
    ] )
    db.characters.find( { letters : "c" } )  // three documents
    db.characters.find( { "letters.2" : "c" } )  // two documents
    db.characters.find( { "letters.2" : "z" } )  // no documents

.. code-block:: javascript

    db.things.insert( [
        { 
            type : "fruit", 
            examples : [ 
                { type : "banana", color : "yellow" },
                { type : "apple", color : "red" }, 
                { type : "mango", color : "red" } ]
        }, { 
            type : "cars", 
            examples : [
                { model : "Camaro", color : "red", year : 1969 },
                { model : "Pinto", color : "yellow", year : 1969 },
                { model : "Tacoma", color : "blue", year : 1979 } ]
        }, {
            type : "planets", 
            examples : [
                { name : "Mars", color : "red" },
                { name : "Venus", color : "blue" }, 
                { name : "Earth", color : "blue" } ]
        } ] )
    db.things.find( { "examples.color" : "blue" } )  // two documents
    db.things.find( { "examples.color" : "red" } )  // three documents
