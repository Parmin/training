================
Compound Indexes
================

Learning Objectives
-------------------

Upon completing this module students should understand:

- What a compound index is.
- How compound indexes are created.
- The importance of considering field order when creating compound indexes.
- How to efficiently handle queries involving some combination of equality matches, ranges, and sorting.
- Some limitations on compound indexes.

.. include:: /includes/student-notes.rst


Introduction to Compound Indexes
--------------------------------

- It is common to create indexes based on more than one field.
- These are called ``compound indexes``.
- You may use up to 31 fields in a compound index.  
- You may not use hashed index fields.

.. include:: /includes/student-notes.rst


The Order of Fields Matters
---------------------------

Specifically we want to consider how the index will be used for:

- Equality tests, e.g., 

  .. code-block:: javascript
    
     db.movies.find( { "budget" : 7, "imdb_rating" : 8 } )

- Range queries, e.g., 

  .. code-block:: javascript

     db.movies.find( { "budget" : 10, "imdb_rating" : { $lt : 9 } } )

- Sorting, e.g., 

  .. code-block:: javascript

     db.movies.find( { "budget" : 10, "imdb_rating" : 6 } 
                    ).sort( { "imdb_rating" : -1 } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The order in which the fields are specified is of critical importance.
      - It is especially important to consider query patterns that require two or more of these operations.


Designing Compound Indexes
--------------------------

- Let's look at some guiding principles for building compound indexes.
- These will generally produce a good if not optimal index.
- You can optimize after a little experimentation.
- We will explore this in the context of a running example.

.. include:: /includes/student-notes.rst



Example: A Simple Message Board
-------------------------------

Requirements:

- Find all messages in a specified timestamp range.
- Select for whether the messages are anonymous or not.
- Sort by rating from highest to lowest.

.. include:: /includes/student-notes.rst


Load the Data
-------------

.. code-block:: javascript

   a = [ { "timestamp" : 1, "username" : "anonymous", "rating" : 3 },
         { "timestamp" : 2, "username" : "anonymous", "rating" : 5 },
         { "timestamp" : 3, "username" : "sam", "rating" : 1 },
         { "timestamp" : 4, "username" : "anonymous", "rating" : 2 },
         { "timestamp" : 5, "username" : "martha", "rating" : 5 } ]
   db.messages.insert(a)

.. include:: /includes/student-notes.rst



Start with a Simple Index
-------------------------

Start by building an index on { timestamp : 1 }

.. code-block:: javascript

   db.messages.createIndex( { timestamp : 1 }, { name : "myindex" } )

Now let's query for messages with timestamp in the range 2 through 4 inclusive.

.. code-block:: javascript

   db.messages.find( { timestamp : { $gte : 2, $lte : 4 } } ).explain()

Analysis:

- Explain plan shows good performance, i.e. ``totalKeysExamined`` = ``n``.  
- However, this does not satisfy our query.  
- Need to query again with { username : "anonymous" } as part of the query.

.. include:: /includes/student-notes.rst


Query Adding ``username``
-------------------------

Let's add the ``user`` field to our query.

.. code-block:: javascript

   db.messages.find( { timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" } ).explain()

``explain`` shows: ``totalKeysExamined`` > ``n``. 

.. include:: /includes/student-notes.rst


Include ``username`` in Our Index
---------------------------------

.. code-block:: javascript

   db.messages.dropIndex( "myindex" );
   db.messages.createIndex( { timestamp : 1, username : 1 }, 
                            { name : "myindex" } )
   db.messages.find( { timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" } ).explain()

``explain`` shows: ``totalKeysExamined`` still > ``n``. 

Why?

.. include:: /includes/student-notes.rst



``ncanned`` > ``n``
-------------------

=========  ===========
timestamp  username
=========  ===========
1          "anonymous"
2          "anonymous"
3          "sam"
4          "anonymous"
5          "martha"
=========  ===========

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The index we have created stores the range values before the equality values.
      - The documents with timestamp values 2, 3, and 4 were found first.
      - Then the associated anonymous values had to be evaluated.



A Different Compound Index
--------------------------
Drop the index and build a new one with user.

.. code-block:: javascript

   db.messages.dropIndex( "myindex" );
   db.messages.createIndex( { username : 1 , timestamp : 1 }, 
                            { name : "myindex" } )

   db.messages.find( { timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" } ).explain()

``explain`` shows:
- ``totalKeysExamined`` is 2 
- n is 2

.. include:: /includes/student-notes.rst



``totalKeysExamined`` == ``n`` == 2
-----------------------------------

===========  =========
username     timestamp
===========  =========
"anonymous"  1
"anonymous"  2
"anonymous"  4
"sam"        2
"martha"     5
===========  =========

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::
  
      - This illustrates why.
      - There is a fundamental difference in the way the index is structured.
      - This supports a more efficient treatment of our query.


Let Selectivity Drive Field Order
---------------------------------

- Order fields in a compound index from most selective to least selective.
- Usually, this means equality fields before range fields.
- When dealing with multiple equality values, start with the most selective.
- If a common range query is more selective instead (rare), specify the range component first.

.. include:: /includes/student-notes.rst


Adding in the Sort
------------------

Finally, let's add the sort and run the query.

.. code-block:: javascript

   db.messages.find( { 
                       timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" 
                     } ).sort( { rating : -1 } ).explain();

- Note that the ``winningPlan`` includes a ``SORT`` stage.
- This means that MongoDB had to perform a sort in memory.  
- In memory sorts for queries that retrieve large numbers of documents can degrade performance significantly.
- Especially, if they are used frequently.

.. include:: /includes/student-notes.rst



In-Memory Sorts
---------------

Let's modify the index again to allow the database to sort for us.

.. code-block:: javascript

   db.messages.dropIndex( "myindex" );
   db.messages.createIndex( { username : 1 , timestamp : 1, rating : 1 }, 
                            { name : "myindex" } );
   db.messages.find( { 
                       timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" 
                     } ).sort( { rating : -1 } ).explain();

- The explain plan remains unchanged, because the sort field comes after the range fields.
- The index does not store entries in order by rating.
- Note that this requires us to consider a tradeoff.

.. include:: /includes/student-notes.rst




Avoiding an In-Memory Sort
--------------------------

Rebuild the index as follows.

.. code-block:: javascript

   db.messages.dropIndex( "myindex" );
   db.messages.createIndex( { username : 1, rating : 1, timestamp : 1 }, 
                            { name : "myindex" } );
   db.messages.find( { 
                       timestamp : { $gte : 2, $lte : 4 }, 
                       username : "anonymous" 
                     } ).sort( { rating : -1 } ).explain();


- We no longer have an in-memory sort, but need to examine more keys.
- ``totalKeysExamined`` is 3 and and ``n`` is 2. 
- Best we can do in this case and in this situation is fine.
- However, if ``totalKeysExamined`` is much larger than ``n``, this might not be the best index.  

.. include:: /includes/student-notes.rst


General Rules of Thumb
----------------------

- Equality before range.
- Equality before sorting.  
- Sorting before range.

.. include:: /includes/student-notes.rst


Covered Queries
---------------

.. include:: /images/index-for-covered-query.rst

- When a query and projection include only the indexed fields, MongoDB will return results directly from the index.
- There is no need to scan any documents or bring documents into memory. 
- These covered queries can be very efficient.

.. include:: /includes/student-notes.rst


Exercise: Covered Queries
-------------------------

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=20; i++) { 
     db.testcol.insert({ "_id" : i, "title" : i, "name" : i, 
                         "rating" : i, "budget" : i })
   };
   db.testcol.createIndex( { "title" : 1, "name" : 1, "rating" : 1 } )
   
   // Not covered because _id is  present.
   db.testcol.find( { "title" : 3 }, 
                    { "title" : 1, "name" : 1, "rating" : 1 } 
                    ).explain("executionStats")

   // Not covered because other fields may exist in matching docs.
   db.testcol.find( { "title" : 3 }, 
                    { "_id" : 0, "budget" : 0 } ).explain("executionStats")

   // Covered query!
   db.testcol.find( { "title" : 3 }, 
                    { "_id" : 0, "title" : 1, "name" : 1, "budget" : 1 } 
                    ).explain("executionStats")

.. include:: /includes/student-notes.rst
