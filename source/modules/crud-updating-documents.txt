==================
Updating Documents
==================


Learning Objectives
-------------------

Upon completing this module students should understand

- The ``replaceOne()`` method
- The ``updateOne()`` method
- The ``updateMany()`` method
- The required parameters for these methods
- Field update operators
- Array update operators
- The concept of an upsert and use cases.
- The findAndModify method

.. include:: /includes/student-notes.rst


The ``replaceOne()`` Method
---------------------------

- Takes one document and replaces it with another

  - But leaves the _id unchanged

- Takes two parameters:

  - A matching document
  - A replacement document

- This is, in some sense, the simplest form of update

.. include:: /includes/student-notes.rst


First Parameter to ``replaceOne()``
-----------------------------------

- Required parameters for ``replaceOne()``

  - The query parameter:
  
    - Use the same syntax as with ``find()``
    - Only the first document found is replaced

- Cannot delete a document

.. include:: /includes/student-notes.rst


Second Parameter to ``replaceOne()``
------------------------------------

- The second parameter is the replacement parameter:

  - The document to replace the original document

- The _id must stay the same
- You must replace the entire document
  
  - You cannot modify just one field
  - Except for the _id

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note:: 

    - If they try to modify the _id, it will throw an error


Example: ``replaceOne()``
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 5-13

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Ask the students why the first replace killed the ``title`` field
    - Ask why the final replace failed


The ``updateOne()`` Method
--------------------------

- Mutate one document in MongoDB using ``updateOne()``

  - Affects only the _first_ document found

- Two parameters:

  - A query document

    - same syntax as with ``find()``

  - Change document

    - Operators specify the fields and changes

.. include:: /includes/student-notes.rst


``$set`` and ``$unset``
-----------------------

- Use to specify fields to replace for updates
- If the field already exists, using ``$set`` will change its value.

  - If not, ``$set`` will create it, set to the new value

- Non-specified fields will not be modified
- Alternatively, remove a field using ``$unset``

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset`` (Setup)
----------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 18-36

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset``
--------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 37-41

.. include:: /includes/student-notes.rst


Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set``: Update one or more fields.
- ``$unset`` Delete a field.
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current date or timestamp.

.. include:: /includes/student-notes.rst


Example: Update Operators
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 45-55

.. include:: /includes/student-notes.rst


The ``updateMany()`` Method
---------------------------

- Can update multiple documents
- Takes the same arguments as ``updateOne``
- Updates all documents that match

  - ``updateOne`` stops after the first match
  - ``updatemany`` continues until it has matched all
  - Without an appropriate index, you may scan every document in the collection.

.. include:: /includes/student-notes.rst


Example: ``updateMany``
-----------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 59-64

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``db.movies.update( { }, { $set : { "sequels" : 0 } } )`` only updates one document.
      - ``db.movies.update( { }, { $set : { "sequels" : 0 } }, { multi : true } )`` updates four documents.


Array Element Updates by Index
------------------------------

- You can use dot notation to specify an array index
- You will update only that element

  - Other elements will not be affected

.. include:: /includes/student-notes.rst


Example: Update Array Elements by Index
---------------------------------------

.. code-block:: javascript

   // add a sample document to track mentions per hour
   db.movie_mentions.insertOne( { "title" : "E.T.", 
                                  "day" : ISODate("2015-03-27T00:00:00.000Z"), 
                                  "mentions_per_hour" : [ 0, 0, 0, 0, 0, 0, 0,
                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                    0, 0 ] 
                                 } )

   // update all mentions for the fifth hour of the day
   db.movie_mentions.updateOne( { "title" : "E.T." } , 
                                { $set :  { "mentions_per_hour.5" : 2300 } } )                               
.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Cool pattern for time series data
      - Displaying charts is now trivial, can change granularity to by the minute, hour, day, etc.


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


Example: Array Operators
------------------------

.. code-block:: javascript

   db.movies.update( { "title" : "Batman" }, 
                     { $push : { "category" : "superhero" } } ) 
   db.movies.update( { "title" : "Batman" }, 
                     { $pushAll : { "category" : [ "villain", "comicbased" ] } } ) 
   
   db.movies.update( { "title" : "Batman" }, 
                     { $pop : { "category" : 1 } } )  

   db.movies.update( { "title" : "Batman" }, 
                     { $pull : { "category" : "action" } } )  
   db.movies.update( { "title" : "Batman" }, 
                     { $pullAll : { "category" : [ "villain", "comicbased" ] } } ) 
    
   db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )  
   db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )  

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::
   
      - Pass $pop a value of -1 to remove the first element of an array and 1 to remove the last element in an array.


The Positional ``$`` Operator
-----------------------------

- :manual:`$</reference/operator/update/postional>` is a positional operator that specifies an element in an array to update.
- It acts as a placeholder for the first element that matches the query document.
- ``$`` replaces the element in the specified position with the value given.
- Example:

  .. code-block:: javascript

     db.<COLLECTION>.update(
         { <array> : value ... },
         { <update operator> : { "<array>.$" : value } }
     )

.. include:: /includes/student-notes.rst


Example: The Positional ``$`` Operator
--------------------------------------

.. code-block:: javascript

   // the "action" category needs to be changed to "action-adventure"
   db.movies.update( { "category": "action",  }, 
                     { $set: { "category.$" : "action-adventure" } }, 
                     { multi: true } )
   db.movies.find()

.. include:: /includes/student-notes.rst


Upserts
-------

- By default, if no document matches an update query, the ``update()`` method does nothing.
- By specifying ``upsert: true``, ``update()`` will insert a new document if no matching document exists.
- The ``db.<COLLECTION>.save()`` method is syntactic sugar that performs an upsert if the _id is not yet present
- Syntax:

  .. code-block:: javascript

     db.<COLLECTION>.update( <query document>, <update document>, 
                           { upsert: true } )

.. include:: /includes/student-notes.rst


Upsert Mechanics
----------------

- Will update as usual if documents matching the query document exist.
- Will be an upsert if no documents match the query document.

  - MongoDB creates a new document using equality conditions in the query document.
  - Adds an ``_id`` if the query did not specify one.
  - Performs an update on the new document.

.. include:: /includes/student-notes.rst


Example: Upserts
----------------

.. code-block:: javascript

   db.movies.update( { "title" : "Jaws" }, 
                     { $inc: { "budget" : 5 } }, 
                     { upsert: true } )

   db.movies.update( { "title" : "Jaws II" }, 
                     { $inc: { "budget" : 5 } }, 
                     { upsert: true } )

   db.movies.update( { "title" : "Jaws III", "category" : [ "horror" ] }, 
                     { $set : { "budget" : 1 } }, 
                     { upsert: true } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // updates the document with "title" = "Jaws" by incrementing "budget"
         db.movies.update( { "title" : "Jaws" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) assigns an _id, 3) sets "title" to "Jaws II" 
         // 4) performs the update
         db.movies.update( { "title" : "Jaws II" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) sets "title" : "Jaws III", 
         // 3) Set budget to 1
         db.movies.update( { "title" : "Jaws III" }, { "budget" : 1 }, { upsert: true } )


``save()``
----------

- Updates the document if the _id is found, inserts it otherwise
- Syntax:

  .. code-block:: javascript

     db.<COLLECTION>.save( document )

.. include:: /includes/student-notes.rst


Example: ``save()``
-------------------

- If the document does not contain an ``_id`` field, then the ``save()`` method calls the ``insertOne()`` method. During the operation, the mongo shell will create an ObjectId and assign it to the ``_id`` field.
- If the document contains an ``_id`` field, then the ``save()`` method is equivalent to an update with the upsert option set to true and the query predicate on the ``_id`` field.

.. code-block:: javascript

   // insert
   db.movies.save( { "title" : "Beverly Hills Cops", "imdb_rating" : 7.3 })            

   // update with { upsert: true }
   db.movies.save( { "_id" : 1234, "title" : "Spider Man", "imdb_rating" : 7.3 })  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - A lot of users prefer to use update/insert, to have more explicit control over the operation


Be Careful with ``save()``
--------------------------

Be careful that you are not modifying stale data when using ``save()``. For example:
        
.. code-block:: javascript

   db.movies.drop()
   db.movies.insertOne( { "title" : "Jaws", "imdb_rating" : 7.3 } )

   db.movies.find( { "title" : "Jaws" } )

   // store the complete document in the application
   doc = db.movies.findOne( { "title" : "Jaws" } )

   db.movies.update( { "title" : "Jaws"  }, { $inc: { "imdb_rating" : 2 } } )
   db.movies.find()

   doc.imdb_rating = 7.4
   doc

   db.movies.save(doc)  // just lost our incrementing of "imdb_rating"
   db.movies.find()

.. include:: /includes/student-notes.rst


``findAndModify()``
-------------------

Modify a document and return either:

- The pre-modification document
- If "new:true" is set, the modified document

Helpful for making changes to a document and reading the document in the state before or after the update occurred.

.. include:: /includes/student-notes.rst


``findAndModify()`` Example
---------------------------

.. code-block:: javascript

  db.worker_queue.findAndModify({
      "query" : { "state" : "unprocessed" },
      "update" : { $set: { "worker_id" : 123, "state" : "processing" } },
  })


	   
        



