==================
Updating Documents
==================


Learning Objectives
-------------------

Upon completing this module students should understand

- The ``update()`` method
- The required parameters for ``update()``
- Field update operators
- Array update operators
- The concept of an upsert and use cases.
- The findAndModify method

.. include:: /includes/student-notes.rst



The ``update()`` Method
-----------------------

- Mutate documents in MongoDB using ``update()``.
- ``update()`` requires two parameters:

  - A query document used to select documents to be updated

  - An update document that specifies how selected documents will change


- ``update()`` cannot delete a document.

.. include:: /includes/student-notes.rst


Parameters to ``update()``
--------------------------

- Keep the following in mind regarding the required parameters for ``update``
- The query parameter:

  - Use the same syntax as with ``find()``.

    - To update only one matching query we use ``update_one``
    - To update all members matching query ``update_many``

- The update parameter:

  - Take care to simply modify documents if that is what you intend.
  - Replacing documents in their entirety is easy to do by mistake.

.. include:: /includes/student-notes.rst


``$set`` and ``$unset``
-----------------------

- Update one or more fields using the ``$set`` operator.
- If the field already exists, using ``$set`` will change its value.
- If the field does not exist, ``$set`` will create it and set it to the new value.
- Any fields you do not specify will not be modified.
- You can remove a field using ``$unset``.

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset`` (Setup)
----------------------------------------

.. code-block:: javascript

  db.movies.insert( [
    {
      "title" : "Batman",
      "category" : [ "action", "adventure" ],
      "imdb_rating" : 7.6,
      "budget" : 35
    },
    {
      "title" : "Godzilla",
      "category" : [ "action",
      "adventure", "sci-fi" ],
      "imdb_rating" : 6.6
    },
    {
      "title" : "Home Alone",
      "category" : [ "family", "comedy" ],
      "imdb_rating" : 7.4
    }
  ] )

.. include:: /includes/student-notes.rst

Example: ``$set`` and ``$unset``
--------------------------------

.. code-block:: cpp

   document criteria, update;
   //db.movies.update( { "title" : "Batman" }, { $set : { "imdb_rating" : 7.7 } } )
   criteria << "title" << "Batman";
   update << "$set" << open_document << "imdb_rating" << 7.7 << close_document;

   //db.movies.update( { "title" : "Godzilla" }, { $set : { "budget" : 1 } } )
   criteria << "title" << "Godzilla";
   update << "$set" << open_document << "budget" << 1 << close_document;

   //db.movies.update( { "title" : "Home Alone" }, { $set : { "budget" : 15, "imdb_rating" : 5.5 } } )
   criteria << "title" << "Godzilla";
   update << "$set" << open_document
    << "budget" << 15 << "imdb_rating" << 5.5
   << close_document;

   //db.movies.update( { "title" : "Home Alone" }, { $unset :  { "budget" : 1 } } )
   criteria << "title" << "Home Alone";
   update << "$unset" << open_document << "budget" << 1 << close_document;
   coll.update_one(criteria.view(), update.view());

.. include:: /includes/student-notes.rst

Example: ``$set`` and ``$unset``
--------------------------------

How will this query behave?

.. code-block:: cpp

   //db.movies.update( { "title" : "Batman" }, { "imdb_rating" : 7.7 } )
   criteria << "title" << "Batman";
   update << "imdb_rating" << 7.7 ;


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Update will only update the first document it finds by default
      - Difference between using $set and not using $set is very important


Example: Update Array Elements by Index
---------------------------------------

Mongo shell

.. code-block:: javascript

   // add a sample document to track mentions per hour
   db.movie_mentions.insert( { "title" : "E.T.",
                               "day" : ISODate("2015-03-27T00:00:00.000Z"),
                               "mentions_per_hour" : [ 0, 0, 0, 0, 0, 0, 0,
                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                 0, 0 ]
                              } )

C++ instruction

.. code-block:: cpp

   // update all mentions for the fifth hour of the day
   //db.movie_mentions.update( { "title" : "E.T." } ,{ $set :  { "mentions_per_hour.5" : 2300 } } )
   criteria << "title" << "E.T.";
   update << "$set"
   << open_document << "mentions_per_hour.5" << 2300 << close_document;

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Cool pattern for time series data
      - Displaying charts is now trivial, can change granularity to by the minute, hour, day, etc.



Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set``: Update one or more fields.
- ``$unset`` Delete a field.
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current date or timestamp.

.. include:: /includes/student-notes.rst


Example: Update Operators
-------------------------

.. code-block:: cpp

   criteria << "title" << "Batman";
   //db.movies.update( { "title" : "Batman" }, { $inc : { "imdb_rating" : 2 } } )
   update << "$inc"
   << open_document << "imdb_rating" << 2 << close_document;

   //db.movies.update( { "title" : "Batman" }, { $inc : { "budget" : -5 } } )
   update << "$inc"
   << open_document << "budget" << -5 << close_document;

   // increment movie mentions by 10
   // db.movie_mentions.update( { "title" : "Batman" } , { $inc :  { "mentions_per_hour.5" : 10 } } )
   update << "$inc"
   << open_document << "mentions_per_hour.5" << 10 << close_document;

.. include:: /includes/student-notes.rst


Example: Update Operators
-------------------------

.. code-block:: cpp

   //db.movies.update( { "title" : "Batman" }, { $mul : { "imdb_rating" : 4 } } )
   update << "$mul"
   << open_document << "imdb_rating" << 4 << close_document;

   //db.movies.update( { "title" : "Batman" },{ $rename : { "budget" : "estimated_budget" } } )
   update << "$rename"
   << open_document << "budget" << "estimated_budget" << close_document;

   //db.movies.update( { "title" : "Batman" }, { $min : { "budget" : 5 } } )
   update << "$min"
   << open_document << "budget" << 5 << close_document;

   //db.movies.update( { "title" : "Batman" }, { $currentDate : { "last_updated" : { $type : "timestamp" } } } )
   update << "$currentDate"
   << open_document << "last_updated"
      << open_document << "$type" << "timestamp" << close_document
   << close_document;



.. include:: /includes/student-notes.rst


Updating Multiple Documents
---------------------------

- In order to update multiple documents, ``update_many()``.
- Bear in mind that without an appropriate index, you may scan every document in the collection.

.. include:: /includes/student-notes.rst


Example: Multi-Update
---------------------

Use ``coll.find({});`` after each of these updates.

.. code-block:: javascript

   // let's start tracking the number of sequals for each movie
   // in the shell, we need { multi : true } to change all documents
   //db.movies.update( { }, { $set : { "sequels" : 0 } },{ multi : true } )
   // in c++ we just need to call update_many
   update << "$set" << open_document << "sequels" : 0 << close_document;
   coll.update_many({}, update.view());

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Make a note that for the `mongo` shell we have a slightly different behavior

      - ``db.movies.update( { }, { $set : { "sequels" : 0 } } )`` only updates one document.
      - ``db.movies.update( { }, { $set : { "sequels" : 0 } }, { multi : true } )`` updates four documents.


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


Example: Array Operators
------------------------

.. code-block:: cpp

   criteria << "title" << "Batman";
   //db.movies.update( { "title" : "Batman" },{ $push : { "category" : "superhero" } } )
   update << "$push"
   << open_document << "category" << "superhero" << close_document ;

   //db.movies.update( { "title" : "Batman" },{ $pushAll : { "category" : [ "villain", "comicbased" ] } } )
   update << "$pushAll"
   << open_document << "category"
      << open_array <<  "villain" << "comicbased" << close_array
   << close_document ;

   //db.movies.update( { "title" : "Batman" },{ $pop : { "category" : 1 } } )
   update << "$pop"
   << open_document << "category" << 1 << close_document ;

.. include:: /includes/student-notes.rst


.. only:: instructor

  .. note::

     - Pass $pop a value of -1 to remove the first element of an array and 1 to remove the last element in an array.

Example: Array Operators
------------------------

.. code-block:: cpp

   //db.movies.update( { "title" : "Batman" },{ $pull : { "category" : "action" } } )
   update << "$pull"
   << open_document << "category" << "action" << close_document ;

   //db.movies.update( { "title" : "Batman" },{ $pullAll : { "category" : [ "villain", "comicbased" ] } } )
   update << "$pullAll"
   << open_document << "category"
      << open_array <<  "villain" << "comicbased" << close_array
   << close_document ;

   //db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )
   update << "$addToSet"
   << open_document << "category" << "action" << close_document ;
   //db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )
   update << "$addToSet"
   << open_document << "category" << "action" << close_document ;

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - Pass $addToSet only adds the new value if it is already present in the array!


The Positional ``$`` Operator
-----------------------------

- :manual:`$</reference/operator/update/postional>` is a positional operator that specifies an element in an array to update.
- It acts as a placeholder for the first element that matches the query document.
- ``$`` replaces the element in the specified position with the value given.
- Example:

  .. code-block:: cpp

     update << "$UPDATE_OPERATOR"
     << open_document << "array.$" << value << close_document;

.. include:: /includes/student-notes.rst


Example: The Positional ``$`` Operator
--------------------------------------

.. code-block:: javascript

   // the "action" category needs to be changed to "action-adventure"
   //db.movies.update( { "category": "action",  },{ $set: { "category.$" : "action-adventure" } },{ multi: true } )
   criteria << "category" << "action";
   update << "$set"
   << open_document << "category.$" << "action-adventure" << close_document

   coll.update_many(criteria.view, update.view());

.. include:: /includes/student-notes.rst


Upserts
-------

- By default, if no document matches an update query, the ``update`` methods does nothing.
- By specifying ``options::update::upsert()``, ``update`` will insert a new document if no matching document exists.
- In the mongo shell ``db.<COLLECTION>.save()`` method is syntactic sugar that performs an upsert if the _id is not yet present
- Syntax:

  .. code-block:: cpp

     options::update opts;
     opts.upsert(true);
     coll.update_one( criteria.view() , update.view(), opts );

.. include:: /includes/student-notes.rst


Upsert Mechanics
----------------

- Will update as usual if documents matching the query document exist.
- Will be an upsert if no documents match the query document.

  - MongoDB creates a new document using equality conditions in the query document.
  - Adds an ``_id`` if the query did not specify one.
  - Performs an update on the new document.

.. include:: /includes/student-notes.rst


Example: Upserts
----------------

.. code-block:: javascript

   options::update opts;
   opts.upsert(true);
   //db.movies.update( { "title" : "Jaws" },{ $inc: { "budget" : 5 } }, { upsert: true } )
   criteria << "title" << "Jaws";
   update << "$inc"
   << open_document << "budget" << 5 << close_document;
   coll.update_one(criteria.view(), update.view(), opts);

   //db.movies.update( { "title" : "Jaws II" }, { $inc: { "budget" : 5 } }, { upsert: true } )
   criteria << "title" << "Jaws II";
   update << "$inc"
   << open_document << "budget" << 5 << close_document;
   coll.update_one(criteria.view(), update.view(), opts);

   //db.movies.update( { "title" : "Jaws III", "category" : [ "horror" ] },{ $set : { "budget" : 1 } },{ upsert: true } )
   criteria
   << "title" << "Jaws II" << "category" << open_array << "horror"<< close_array;
   update << "$set"
   << open_document << "budget" << 1 << close_document;
   coll.update_one(criteria.view(), update.view(), opts);

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // updates the document with "title" = "Jaws" by incrementing "budget"
         db.movies.update( { "title" : "Jaws" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) assigns an _id, 3) sets "title" to "Jaws II"
         // 4) performs the update
         db.movies.update( { "title" : "Jaws II" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) sets "title" : "Jaws III",
         // 3) Set budget to 1
         db.movies.update( { "title" : "Jaws III" }, { "budget" : 1 }, { upsert: true } )


Find and Modify
---------------

Modify a document and return either:

- The pre-modification document
- If ``options::return_document::k_after`` is set, the modified document

Helpful for making changes to a document and reading the document in the state before or after the update occurred.

.. include:: /includes/student-notes.rst


``find_one_and_update``
-----------------------

.. code-block:: cpp

  options::find_one_and_update opts;
  opts.return_document(options::return_document::k_after);

  criteria < "state" << "unprocessed";
  update << "$set"
  << open_document
    << "worker_id" << 123 << "state" << "processing"
  << close_document;

  auto doc = coll.find_one_and_update(criteria.view(), update.view(), opts);

  std::cout << bsoncxx::to_json(doc) << std::endl;

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - C++ driver implements a set of API methods for the different operations of find and modify

      - find_one_and_update
      - find_one_and_replace
      - find_one_and_delete
