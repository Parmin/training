==================
Updating Documents
==================


Learning Objectives
-------------------

Upon completing this module students should understand

- The ``replaceOne()`` method
- The ``updateOne()`` method
- The ``updateMany()`` method
- The required parameters for these methods
- Field update operators
- Array update operators
- The concept of an upsert and use cases.
- The ``findOneAndReplace()`` and ``findOneAndUpdate()`` methods

.. include:: /includes/student-notes.rst


The ``replaceOne()`` Method
---------------------------

- Takes one document and replaces it with another

  - But leaves the _id unchanged

- Takes two parameters:

  - A matching document
  - A replacement document

- This is, in some sense, the simplest form of update

.. include:: /includes/student-notes.rst


First Parameter to ``replaceOne()``
-----------------------------------

- Required parameters for ``replaceOne()``

  - The query parameter:
  
    - Use the same syntax as with ``find()``
    - Only the first document found is replaced

- Cannot delete a document

.. include:: /includes/student-notes.rst


Second Parameter to ``replaceOne()``
------------------------------------

- The second parameter is the replacement parameter:

  - The document to replace the original document

- The _id must stay the same
- You must replace the entire document
  
  - You cannot modify just one field
  - Except for the _id

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note:: 

    - If they try to modify the _id, it will throw an error


Example: ``replaceOne()``
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 5-15

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Ask the students why the first replace killed the ``title`` field
    - Ask why the final replace failed


The ``updateOne()`` Method
--------------------------

- Mutate one document in MongoDB using ``updateOne()``

  - Affects only the _first_ document found

- Two parameters:

  - A query document

    - same syntax as with ``find()``

  - Change document

    - Operators specify the fields and changes

.. include:: /includes/student-notes.rst


``$set`` and ``$unset``
-----------------------

- Use to specify fields to replace for ``UpdateOne()``
- If the field already exists, using ``$set`` will change its value.

  - If not, ``$set`` will create it, set to the new value

- Non-specified fields will not be modified
- Alternatively, remove a field using ``$unset``

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset`` (Setup)
----------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 19-37

.. include:: /includes/student-notes.rst


Example: ``$set`` and ``$unset``
--------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 38-47

.. include:: /includes/student-notes.rst


Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set``: Update one or more fields (already discussed). 
- ``$unset`` Delete a field (already discussed).
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current date or timestamp.

.. include:: /includes/student-notes.rst


Example: Update Operators
-------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 50-60

.. include:: /includes/student-notes.rst


The ``updateMany()`` Method
---------------------------

- Takes the same arguments as ``updateOne``
- Updates all documents that match

  - ``updateOne`` stops after the first match
  - ``updatemany`` continues until it has matched all
  - Without an appropriate index, you may scan every document in the collection.

.. include:: /includes/student-notes.rst


Example: ``updateMany`` vs. ``updateOne()``
-------------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 65-70

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - First query only updates one document.
      - Second query updates four documents.


Array Element Updates by Index
------------------------------

- You can use dot notation to specify an array index
- You will update only that element

  - Other elements will not be affected

.. include:: /includes/student-notes.rst


Example: Update Array Elements by Index
---------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 79-91

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Cool pattern for time series data
      - Displaying charts is now trivial
        
        - Can change granularity to by the minute, hour, day, etc.


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


Example: Array Operators
------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 99-112

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::
   
      - Pass $pop a value of -1 to remove the first element of an array and 1 to remove the last element in an array.


The Positional ``$`` Operator
-----------------------------

- :manual:`$</reference/operator/update/postional>` is a positional operator that specifies an element in an array to update.
- It acts as a placeholder for the first element that matches the query document.
- ``$`` replaces the element in the specified position with the value given.
- Example:

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 121-124


.. include:: /includes/student-notes.rst


Example: The Positional ``$`` Operator
--------------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 133-136

.. include:: /includes/student-notes.rst


Upserts
-------

- If no document matches a write query:

  - By default, nothing happens
  - With ``upsert: true``, inserts one new document

- Works for ``updateOne()``, ``updateMany()``, ``replaceOne()``
- Syntax:

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 149-151

.. include:: /includes/student-notes.rst


Upsert Mechanics
----------------

- Will update if documents matching the query exist
- Will insert if no documents match

  - Creates a new document using equality conditions in the query document
  - Adds an ``_id`` if the query did not specify one
  - Performs the write on the new document

- ``updateMany()`` will only create one document

  - If none match, of course

.. include:: /includes/student-notes.rst


Example: Upserts
----------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 163-173

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Note that an updateMany works just like updateOne when no matching documents are found.
      - First query updates the document with "title" = "Jaws" by incrementing "budget"
      - Second query: 1) creates a new document, 2) assigns an _id, 3) sets "title" to "Jaws II" 4) performs the update
      - Third query: 1) creates a new document, 2) sets "title" : "Jaws III", 3) Set budget to 1


``save()``
----------

- The ``db.<COLLECTION>.save()`` method is syntactic sugar

  - Similar to ``replaceOne()``, querying the ``_id`` field
  - Upsert if ``_id`` is not in the collection

- Syntax:

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 184

.. include:: /includes/student-notes.rst


Example: ``save()``
-------------------

- If the document in the argument does not contain an ``_id`` field, then the ``save()`` method acts like ``insertOne()`` method

  - An ObjectId will be assigned to the ``_id`` field.

- If the document in the argument contains an ``_id`` field: then the ``save()`` method is equivalent to a replaceOne with the query argument on ``_id`` and the upsert option set to true

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 196-200

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - A lot of users prefer to use update/insert, to have more explicit control over the operation


Be Careful with ``save()``
--------------------------

Be careful that you are not modifying stale data when using ``save()``. For example:
        
.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 211-226

.. include:: /includes/student-notes.rst


``findOneAndUpdate()`` and ``findOneAndReplace()``
--------------------------------------------------

- Update (or replace) one document and return the document

  - By default, the document is returned pre-write

- Can read a document in the state before or after the update occurred.
- Makes a read plus a write atomic
- Can be used with upsert to insert a document

.. include:: /includes/student-notes.rst


Options fields for ``findOneAndUpdate()``, ``findOneAndReplace()``
------------------------------------------------------------------

- The following are all optional, and can be in the options document
- ``projection: <document>`` will let you select the fields to see
- ``sort: <document>`` sorts first and applies the operation to the first document
- ``maxTimeoutMS: <number>`` specifies how long the operation can take

  - Returns an error if this time is exceeded

- ``upsert: <boolean>`` if true, inserts if no document is found

.. include:: /includes/student-notes.rst


Example: ``findOneAndUpdate()``
-------------------------------

.. literalinclude:: /includes/crud-updating-documents.js
    :language: javascript
    :lines: 236-239

.. include:: /includes/student-notes.rst
