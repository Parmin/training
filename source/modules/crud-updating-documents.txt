==================
Updating Documents
==================

Learning Objectives
-------------------

Upon completing this module students should understand

- The ``update()`` method
- The required parameters for ``update()``
- Field update operators
- Array update operators
- The concept of an upsert and use cases.

.. include:: /includes/student-notes.rst



The ``update()`` Method
-----------------------

- Mutate documents in MongoDB using ``update()``.
- ``update()`` requires two parameters:

  - A query document used to select documents to be updated

  - An update document that specifies how selected documents will change


- ``update()`` cannot delete a document.

.. include:: /includes/student-notes.rst


Parameters to ``update()``
--------------------------

- Keep the following in mind regarding the required parameters for ``update()``
- The query parameter:

  - Use the same syntax as with ``find()``.
  - By default only the first document found is updated.

- The update parameter:

  - Take care to simply modify documents if that is what you intend.
  - Replacing documents in their entirety is easy to do by mistake.

.. include:: /includes/student-notes.rst


``$set`` and ``$unset``
-----------------------

- Update one or more fields using the ``$set`` operator.
- If the field already exists, using ``$set`` will change its value.
- If the field does not exist, ``$set`` will create it and set it to the new value.
- Any fields you do not specify will not be modified.
- You can remove a field using ``$unset``.

.. include:: /includes/student-notes.rst


Exercise: ``$set`` and ``$unset`` (Setup)
-----------------------------------------

.. code-block:: javascript

  db.movies.insert( [ 
    { 
      "title" : "Batman", 
      "category" : [ "action", "adventure" ], 
      "imdb_rating" : 7.6, 
      "budget" : 35 
    },
    { 
      "title" : "Godzilla", 
      "category" : [ "action", 
      "adventure", "sci-fi" ], 
      "imdb_rating" : 6.6 
    },
    { 
      "title" : "Home Alone", 
      "category" : [ "family", "comedy" ], 
      "imdb_rating" : 7.4 
    }
  ] )

.. include:: /includes/student-notes.rst

Exercise: ``$set`` and ``$unset``
---------------------------------

Experiment with the following. Do a ``find()`` after each update to view the results.

.. code-block:: javascript

   db.movies.update( { "title" : "Batman" }, { $set : { "imdb_rating" : 7.7 } } )  

   db.movies.update( { "title" : "Godzilla" }, { $set : { "budget" : 1 } } ) 

   db.movies.update( { "title" : "Home Alone" }, 
                     { $set : { "budget" : 15, "imdb_rating" : 5.5 } } )

   // how will this query behave?
   db.movies.update( { "title" : "Batman" }, { "imdb_rating" : 7.7 } )

   db.movies.update( { "title" : "Batman" }, { $unset :  { "budget" : 1 } } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Update will only update the first document it finds by default
      - Difference between using $set and not using $set is very important


Exercise: Update Array Elements by Index
----------------------------------------

.. code-block:: javascript

   // add a sample document to track mentions per hour
   db.movie_mentions.insert( { "title" : "E.T.", 
                               "day" : ISODate("2015-03-27T00:00:00.000Z"), 
                               "mentions_per_hour" : [ 0, 0, 0, 0, 0, 0, 0,
                                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                                 0, 0 ] 
                              } )

   // update all mentions for the fifth hour of the day
   db.movie_mentions.update( { "title" : "E.T." } , 
                             { $set :  { "mentions_per_hour.5" : 2300 } } )                               

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Cool pattern for time series data
      - Displaying charts is now trivial, can change granularity to by the minute, hour, day, etc.



Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set`` (already discussed)
- ``$unset`` (already discussed)
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current date or timestamp.

.. include:: /includes/student-notes.rst


Exercise: Update Operators
--------------------------

Experiment with the following update operators.

.. code-block:: javascript

   db.movies.update( { "title" : "Batman" }, { $inc : { "imdb_rating" : 2 } } )        

   db.movies.update( { "title" : "Home Alone" }, { $inc : { "budget" : 5 } } )  

   db.movies.update( { "title" : "Batman" }, { $mul : { "imdb_rating" : 4 } } )  

   db.movies.update( { "title" : "Batman" }, 
                     { $rename : { "budget" : "estimated_budget" } } )

   db.movies.update( { "title" : "Home Alone" }, { $min : { "budget" : 5 } } )  

   db.movies.update( { "title" : "Home Alone" }, 
                     { $currentDate : { "last_updated" : { $type : "timestamp" } } } )

   // increment movie mentions by 10
   db.movie_mentions.update( { "title" : "E.T." } , 
                             { $inc :  { "mentions_per_hour.5" : 10 } } )                               


.. include:: /includes/student-notes.rst


``update()`` Defaults to one Document
-------------------------------------

- By default, ``update()`` modifies the first document found that matches the query.
- The default use case is one where there is only one document that fits the query.
- This is to reduce the chances of unintended collection scans for updates.

.. include:: /includes/student-notes.rst



Updating Multiple Documents
---------------------------

- In order to update multiple documents, we use the third (optional) parameter to ``update()``.
- The third parameter is an options document.
- Specify ``multi: true`` as one field in this document.
- Bear in mind that without an appropriate index, you may scan every document in the collection.

.. include:: /includes/student-notes.rst


Exercise: Multi-Update
----------------------

Use ``db.testcol.find()`` after each of these updates.

.. code-block:: javascript
  
   // let's start tracking the number of sequals for each movie
   db.movies.update( { }, { $set : { "sequels" : 0 } } )

   // we need { multi : true } to change all documents 
   db.movies.update( { }, { $set : { "sequels" : 0 } },
                     { multi : true } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``db.movies.update( { }, { $set : { "sequels" : 0 } } )`` only updates one document.
      - ``db.movies.update( { }, { $set : { "sequels" : 0 } }, { multi : true } )`` updates four documents.


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


Exercise: Array Operators
-------------------------

Experiment with the following updates.

.. code-block:: javascript

   db.movies.update( { "title" : "Batman" }, 
                     { $push : { "category" : "superhero" } } ) 
   db.movies.update( { "title" : "Batman" }, 
                     { $pushAll : { "category" : [ "villain", "comicbased" ] } } ) 
   
   db.movies.update( { "title" : "Batman" }, 
                     { $pop : { "category" : 1 } } )  

   db.movies.update( { "title" : "Batman" }, 
                     { $pull : { "category" : "action" } } )  
   db.movies.update( { "title" : "Batman" }, 
                     { $pullAll : { "category" : [ "villain", "comicbased" ] } } ) 
    
   db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )  
   db.movies.update( { "title" : "Batman" }, { $addToSet : { "category" : "action" } } )  

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::
   
      - Pass $pop a value of -1 to remove the first element of an array and 1 to remove the last element in an array.


The Positional ``$`` Operator
-----------------------------

- :manual:`$</reference/operator/update/postional>` is a positional operator that specifies an element in an array to update.
- It acts as a placeholder for the first element that matches the query document.
- ``$`` replaces the element in the specified position with the value given.
- Example:

  .. code-block:: javascript

     db.<COLLECTION>.update(
         { <array> : value ... },
         { <update operator> : { "<array>.$" : value } }
     )

.. include:: /includes/student-notes.rst


Exercise: The Positional ``$`` Operator
---------------------------------------

Experiment with the following commands.

.. code-block:: javascript

   // the "action" category needs to be changed to "action-adventure"
   db.movies.update( { "category": "action",  }, 
                     { $set: { "category.$" : "action-adventure" } }, 
                     { multi: true } )
   db.movies.find()

.. include:: /includes/student-notes.rst


Upserts
-------

- By default, if no document matches an update query, the ``update()`` method does nothing.
- By specifying ``upsert: true``, ``update()`` will insert a new document if no matching document exists.
- The ``db.<COLLECTION>.save()`` method is syntactic sugar that performs an upsert if the _id is not yet present
- Syntax:

  .. code-block:: javascript

     db.<COLLECTION>.update( <query document>, <update document>, 
                           { upsert: true } )

.. include:: /includes/student-notes.rst


Upsert Mechanics
----------------

- Will update as usual if documents matching the query document exist.
- Will be an upsert if no documents match the query document.

  - MongoDB creates a new document using equality conditions in the query document.
  - Adds an ``_id`` if the query did not specify one.
  - Performs an update on the new document.

.. include:: /includes/student-notes.rst


Exercise: Upserts
-----------------

Experiment with the following upserts.

.. code-block:: javascript

   db.movies.update( { "title" : "Jaws" }, 
                     { $inc: { "budget" : 5 } }, 
                     { upsert: true } )

   db.movies.update( { "title" : "Jaws II" }, 
                     { $inc: { "budget" : 5 } }, 
                     { upsert: true } )

   db.movies.update( { "title" : "Jaws III", "category" : [ "horror" ] }, 
                     { $set : { "budget" : 1 } }, 
                     { upsert: true } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // updates the document with "title" = "Jaws" by incrementing "budget"
         db.movies.update( { "title" : "Jaws" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) assigns an _id, 3) sets "title" to "Jaws II" 
         // 4) performs the update
         db.movies.update( { "title" : "Jaws II" }, { $inc: { "budget" : 5 } }, { upsert: true } )

         // 1) creates a new document, 2) sets "title" : "Jaws III", "category" : [ "horror" ], 
         // 3) Set budget to 1
         db.movies.update( { "title" : "Jaws III", "category" : [ "horror" ] }, { "budget" : 1 }, { upsert: true } )


``save()``
----------

- Updates the document if the _id is found, inserts it otherwise
- Syntax:

  .. code-block:: javascript

     db.<COLLECTION>.save( document )

.. include:: /includes/student-notes.rst


Exercise: ``save()``
--------------------

- If the document does not contain an _id field, then the save() method calls the insert() method. During the operation, the mongo shell will create an ObjectId and assign it to the _id field.
  
- If the document contains an _id field, then the save() method is equivalent to an update with the upsert option set to true and the query predicate on the _id field.

.. code-block:: javascript

   // insert
   db.movies.save( { "title" : "Beverly Hills Cops", "imdb_rating" : 7.3 })            

   // update with { upsert: true }
   db.movies.save( { "_id" : 1234, "title" : "Spider Man", "imdb_rating" : 7.3 })  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - A lot of users prefer to use update/insert, to have more explicit control over the operation


Be Careful with ``save()``
--------------------------

Be careful that you are not modifying stale data when using ``save()``. For example:
        
.. code-block:: javascript

   db.movies.drop()
   db.movies.insert( { "title" : "Jaws", "imdb_rating" : 7.3 } )

   db.movies.find( { "title" : "Jaws" } )

   // store the complete document in the application
   doc = db.movies.findOne( { "title" : "Jaws" } )

   db.movies.update( { "title" : "Jaws"  }, { $inc: { "imdb_rating" : 2 } } )
   db.movies.find()

   doc.imdb_rating = 7.4
   doc

   db.movies.save(doc)  // just lost our incrementing of "imdb_rating"
   db.movies.find()

.. include:: /includes/student-notes.rst
	   
        



