==================
Updating Documents
==================

Learning Objectives
-------------------

Upon completing this module students should understand

- The ``update()`` method
- The required parameters for ``update()``
- Field update operators
- Array update operators
- The concept of an upsert and use cases.


The ``update()`` Method
-----------------------

- Mutate documents in MongoDB using ``update()``.
- ``update()`` requires two parameters:

  - A query document used to select documents to be updated

  - An update document that specifies how selected documents will change


- ``update()`` cannot delete a document.


Parameters to ``update()``
--------------------------

- Keep the following in mind regarding the required parameters for ``update()``
- The query parameter:

  - Use the same syntax as with ``find()``.
  - By default only the first document found is updated.

- The update parameter:

  - Take care to simply modify documents if that is what you intend.
  - Replacing documents in the entirety is easy to do by mistake.


.. include:: /exercises/crud-basic-queries-using-update.txt


``update()`` Defaults to one Document
-------------------------------------

- By default, ``update()`` modifies the first document found that matches the query.
- The default use case is one where there is only one document that fits the query.
- This is to reduce the chances of unintended collection scans for updates.



Updating Multiple Documents
---------------------------

- In order to update multiple documents, we use the third (optional) parameter to ``update()``.
- The third parameter is an options document.
- Specify ``multi : true`` as one field in this document.
- Bear in mind that without an appropriate index, you may scan every document in the collection.


.. include:: /exercises/crud-multi-update.txt


Updating Fields
---------------

- Update one or more fields using the ``$set`` operator.
- If the field already exists, using ``$set`` will change its value.
- If the field does not exist, ``$set`` will create it and set it to the new value.
- Any fields you do not specify will not be modified.
- You can remove a field using ``$unset``.


.. include:: /exercises/crud-set-and-unset.txt


.. following document doesn't exist. commenting to prevent error

   .. include /exercises/crud-set-with-multi.txt


Update Operators
----------------

- ``$inc``: Increment a field's value by the specified amount.
- ``$mul``: Multiply a field's value by the specified amount.
- ``$rename``: Rename a field.
- ``$set`` (already discussed)
- ``$unset`` (already discussed)
- ``$min``: Update only if value is smaller than specified quantity
- ``$max``: Update only if value is larger than specified quantity
- ``$currentDate``: Set the value of a field to the current :manual:`Date or timestamp</reference/operator/update/currentDate/>`.


.. include:: /exercises/crud-update-operators.txt


Array Operators
---------------

- ``$push``: Appends an element to the end of the array.
- ``$pushAll``: Appends multiple elements to the end of the array.
- ``$pop``: Removes one element from the end of the array.
- ``$pull``: Removes all elements in the array that match a specified value.
- ``$pullAll``: Removes all elements in the array that match any of the specified values.
- ``$addToSet``: Appends an element to the array if not already present.

.. only:: instructor

   .. note::

      - These operators may be applied to array fields.


.. include:: /exercises/crud-update-array-operators.txt


The ``$`` Operator
------------------

- :manual:`$</reference/operator/update/postional>` is a positional operator that specifies an element in an array to update.
- It acts as a placeholder for the first element that matches the query document.
- ``$`` replaces the element in the specified position with the value given.
- Example:

  .. code-block:: javascript

     db.collection.update(
         { <array> : value ... },
         { <update operator> : { "<array>.$" : value } }
     )


Exercise: ``$``
---------------

Experiment with the following commands.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=5; i++) { db.testcol.insert(
       { _id: i, a: i, b: [ 1, 2, 3, 3, "NA", 6 ] } ) }
   db.testcol.find()

   db.testcol.update( { b: "NA" }, { $set: { "b.$" : 11 } }, 
                      { multi: true } )
   db.testcol.find()


Upserts
-------

- By default, if no document matches an update query, the ``update()`` method does nothing.
- By specifying ``upsert: true``, ``update()`` will insert a new document if no matching document exists.
- The ``db.collection.save()`` method is syntactic sugar that performs an upsert if the _id is not yet present
- Syntax:

  .. code-block:: javascript

     db.collection.update( <query document>, <update document>, 
                           { upsert: true } )


Upsert Mechanics
----------------

- Will update as usual if documents matching the query document exist.
- Will be an upsert if no documents match the query document.

  - MongoDB creates a new document using equality conditions in the query document.
  - Adds an ``_id`` if the query did not specify one.
  - Performs an update on the new document.


Exercise: Upserts
-----------------

Experiment with the following upserts.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=5; i++) { 
       db.testcol.insert( { _id: i, a: i, b: i } ) }
   db.testcol.find()

   db.testcol.update( { a: 4 }, { $inc: { b : 3 } }, { upsert: true } )

   db.testcol.update( { a: 12 }, { $inc: { b : 3 } }, { upsert: true } )

   db.testcol.update( { _id: 6, a: 6 }, { c: 155 }, { upsert: true } )

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // updates the document with a: 4 by incrementing b
         db.testcol.update( { a: 4 }, { $inc: { b : 3 } }, { upsert: true } )

         // 1) creates a new document, 2) assigns an _id, 3) sets a to 12, 
         // 4) performs the update
         db.testcol.update( { a: 12 }, { $inc: { b : 3 } }, { upsert: true } )

         // 1) creates a new document, 2) sets _id: 6 and a: 6, 
         // 3) update deletes a and sets c to 155.
         db.testcol.update( { _id: 6, a: 6 }, { c: 155 }, { upsert: true } )


``save()``
----------

- Updates the document if the _id is found, inserts it otherwise
- Syntax:

  .. code-block:: javascript

     db.collection.save( document )


Exercise: ``save()``
--------------------

.. code-block:: javascript
   
   for (i=1; i<=5; i++) { db.testcol.save( { _id : i, a : i, b : i } ) }
   db.testcol.find()

   // Look at the code for save. Note that it involves an upsert.
   db.testcol.save  

   // new document, _id created
   db.testcol.save( { a : 3 } )                     

   db.testcol.save( { _id : 6, a : 6 } )            // new document

   db.testcol.save( { _id : 3, a : 12, b : 12  } )  // update!!


Be Careful with ``save()``
--------------------------

Be careful that you are not modifying stale data when using ``save()``. For example:
        
.. code-block:: javascript

   doc = db.testcol.findOne( { _id: 2 } )
   doc.c = 11

   db.testcol.update( { _id: 2 }, { $inc: { b : 1 } } )
   doc = db.testcol.findOne( { _id: 2 } )

   db.testcol.save(doc)
   doc = db.testcol.findOne( { _id: 2 } )
	   
        



