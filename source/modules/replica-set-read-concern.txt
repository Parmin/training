============
Read Concern
============

.. BEGIN READ CONCERN LEARNING OBJECTIVES

Learning Objectives
-------------------

Upon completing this module, students will be able to:

- Define read concern
- Distinguish stale from dirty reads
- Describe how read concern prevents dirty reads
- Understand how to use read concern in MongoDB
- Understand the differences between replication protocol version 0 and 1

.. include:: /includes/student-notes.rst

.. END READ CONCERN LEARNING OBJECTIVES
.. BEGIN READ CONCERN CONTENT

Read Concerns
-------------

- **Local**: *Default*
- **Majority**: Added in MongoDB 3.2, requires WiredTiger and election protocol version 1
- **Linearizable**: Added in MongoDB 3.4, works with MMAP or WiredTiger

.. include:: /includes/student-notes.rst


Local
-----

- Default read concern
- Will return data from the primary.
- Does not wait for the write to be replicated to other members of the replica set.

.. include:: /includes/student-notes.rst


Majority
--------

- Available only with WiredTiger.
- Reads majority acknowledged writes from a snapshot.
- Under certain circumstances (high volume, flaky network), can result in stale reads.

.. include:: /includes/student-notes.rst

.. END READ CONCERN CONTENT
.. BEGIN LINEARIZABLE CONTENT


Linearizable
------------

- Available with MongoDB versions > 3.4
- Will read latest data acknowledged with ``w: majority``, or block until replica set acknowledges a write in progress with ``w: majority``
- Can result in **very slow** queries.

  - Always use **maxTimeMS** with **linearizable**

- Only guaranteed to be a linearizable read when the query fetches a single document

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - For replica sets that run with **writeConcernMajorityJournalDefault** set to true, linearizable read concern returns data that will never be rolled back.
      - With **writeConcernMajorityJournalDefault** set to false, MongoDB will not wait for `w: "majority"` writes to be durable before acknowledging the writes. As such, "majority" write operations could possibly roll back in the event of a loss of a replica set member.
      - Only primary servers may be queried with **linearizable**.

      Questions to ask:

      - Can I avoid dirty reads if I write a document with write concern "majority" and read preference: "primary"?

        - Answer: No. Without using read concern level : "majority", reads can be dirty

      - What can happen if I use a write concern of ``{ w: 1 }`` and read concern level of "majority"?

        - Answer: You will not have dirty reads ... but you may be unable to read your own writes

.. END LINEARIZABLE CONTENT


Example: Read Concern Level Majority
------------------------------------

.. include:: /images/read-concern.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - This looks quite complicated, but all it's really showing is:

      - Two writes, both from App 1, and the associated replication and responses (red and green)
      - Several reads at various times all from App 2 (blue)

    - Note that the applications are using w : "majority" and read concern level: "majority"
    - The application doesn't read a write until after the secondary has confirmed to the primary that it has received the write
    - Key:

      - Red W's are the writes: W1 and W2, as they propagate through

        - Dashed red lines are acknowledgments of the writes

          - W1S2 is the acknowledgment of write 1 from the S2 server

      - Green C's are the read commits from read concern "majority".

        - C1 marks the moment where W1 has been committed
        - C2 marks the moment where W2 has been committed
        - The primary also gets a write acknowledgement when a commit occurs on the primary
        - Note that the commits go from primary to the secondaries, along with the oplog.

      - Blue R's are the reads from App 2 at various points in time

        - R0 is the initial state
        - R1 is the state after W1 has been committed
        - R2 is the state after W2 has been committed


Background: Stale Reads
-----------------------

- Reads that do not reflect the most recent writes are stale
- These can occur when reading from secondaries
- Systems with stale reads are "eventually consistent"
- Reading from the primary minimizes odds of stale reads

  - They can still occur in rare cases

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Stale reads see a view of the data that was in place at some point recently


Stale Reads on a Primary
------------------------

- In unusual circumstances, two members may simultaneously believe that they are the primary

  - One can acknowledge ``{ w : "majority" }`` writes

    - This is the true primary

  - The other was a primary

    - But a new one has been elected

- In this state, the other primary will serve stale reads


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - The scenario described here might happen if, for example, the other primary freezes for some time, then resumes operation
      - This slide is for the benefit of engineers who are very knowledgeable about isolation, and who are concerned about isolation levels

        - Telling them that primaries prevent stale reads is not completely accurate
        - With ``linearizable``, the query will verify with the secondaries that the primary being queried can acknowledge ``w: majority``.


Background: Dirty Reads
-----------------------

- Dirty reads are not stale reads
- Dirty reads occur when you see a view of the data

  - ... but that view *may* not persist
  - ... even in the history (i.e., oplog)

- Occur when data is read that has not been committed to a majority of the replica set

  - Because that data *could* get rolled back

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - There is no way to know during a dirty read if its view of the data includes a write that will be rolled back
      - Here is a good time to ask when writes can get rolled back
      - Answers:

        - If a network partition isolates the primary, a new one will be elected
        - If the primary crashes, a new one will be elected and the old primary's writes will be rolled back


Dirty Reads and Write Concern
-----------------------------

- Write concern alone can not prevent dirty reads

  - Data on the primary may be vulnerable to rollback
  - The exception being **linearizable** reads on a primary with ``writeConcernMajorityJournalDefault`` set to true.

- Read concern was implemented to allow developers the option of preventing dirty reads

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

     - Might be a good time to ask how many ways dirty reads can happen.
     - Answers:

       - Primary gets a write, but crashes before the oplog sends data to the secondary
       - Primary and one secondary both get the write, but both crash before it gets to disk on either
       - Primary gets the write, but there is a network partition separating it from the secondaries; they elect a new primary

         - Write gets rolled back, so it's not in your data set unless manually added

     - Don't let the students conflate read concern with `read preference <https://docs.mongodb.com/manual/core/read-preference/>`_



Quiz
----

What is the difference between a dirty read and a stale read?

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Dirty read means you see a write that may not persist
      - Stale read means you don't see a write that has occurred


Read Concern and Read Preference
--------------------------------

- Read preference determines the server you read from

  - Primary, secondary, etc.

- Read concern determines the view of the data you see, and does not update its data the moment writes are received

.. include:: /includes/student-notes.rst


Read Concern and Read Preference: Secondary
-------------------------------------------

- The primary has the most current view of the data

  - Secondaries learn which writes are committed from the primary

- Data on secondaries might be behind the primary

  - But never ahead of the primary

.. include:: /includes/student-notes.rst


Using Read Concern
------------------

- To use ``level: majority`` read concern, you must:

  - Use WiredTiger on all members
  - Launch all mongods in the set with

    - ``--enableMajorityReadConcern``

  - Specify the read concern level to the driver

- You should:

  - Use write concern ``{ w : "majority" }``
  - Otherwise, an application may not see its own writes

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - If running with read concern level: "majority" but not write concern ``{ w: "majority" }``, it would be possible to insert a document, get it acknowledged, and then try to read it back, but not see it.
      - Obviously, users should not do this.


Example: Using Read Concern
---------------------------

- First, launch a replica set

  - Use ``--enableMajorityReadConcern``

- A script is in the `shell_scripts` directory of the USB drive.

  .. code-block:: bash

     ./launch_replset_for_majority_read_concern.sh

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - This will allow them to launch a replica set that can use majority read concern.

    .. literalinclude:: /includes/launch_replset_for_majority_read_concern.sh


Example: Using Read Concern (Continued)
---------------------------------------

.. literalinclude:: /includes/read-concern.sh
   :language: bash
   :start-after: # BEGIN SCRIPT
   :end-before: # END SCRIPT

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - In this example, students can see that one document will propagate to the secondaries.
    - But the second document, while present on the primary, will not replicate.
    - Encourage them to use their own example (with ``db.fsyncLock`` on secondaries).

      - They can use a driver, if they wish.

Quiz
----

What must you do in order to make the database return documents that have been replicated to a majority of the replica set members?

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

     Answer:

      - Invoke the mongod with ``--enableMajorityReadConcern``
      - Use ``cursor.readConcern("majority")`` on a read

        - Alternatively, use read concern level "majority" with a driver's connection pool


Replication Protocol Version 0
------------------------------

- Better data consistency when using arbiters and ``w: 1`` writes
- Does not support ``majority`` read concern
- 30 second buffer between elections
- Supports vetoes based on **priority**

  - Should have fewer elections, and fewer ``w: 1`` rollbacks.

.. include:: /includes/student-notes.rst


Replication Protocol Version 1
------------------------------

- Version 1 is the default in MongoDB >=3.2.
- With version 1, secondaries now write to disk before acknowledging writes.
- ``{ w : "majority" }`` now implies ``{ j : true }``

  - Can be disabled by setting ``writeConcernMajorityJournalDefault`` to false for versions >= 3.4

- Set the replication protocol version using the ``protocolVersion`` parameter in your replica set configuration.

.. include:: /includes/student-notes.rst


Replication Protocol Version 1 (continued)
------------------------------------------

- Also adds ``electionTimeoutMillis`` as an option

  - For secondaries: How long to wait before calling for an election
  - For primaries: How long to wait before stepping down

    - After losing contact with the majority
    - This applies to the primary only

- Required for read concern level "majority"

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Previously, secondaries would acknowledge writes before those writes were journaled
      - A short ``electionTimeoutMillis`` can result in lots of elections, especially with a flaky network
      - A long ``electionTimeoutMillis`` can result in lower availability due to longer failover time
      - When to use PV0 and PV1?

        - >= 3.4.2

          - Pv1: should always be recommended. All known issues with Arbiters, priorities, and rollbacks have been mitigated.
          - Pv0: No known cases where Pv0 is materially superior.

        - 3.2.12+

          - Pv1: Should be recommended if customer is primarily using w:majority writes. Can safely be used with Arbiters, Priorities, and other topologies with minimal impact on failover. Non-majority writes can still be rolled back on failover as there is no "catch up" period implemented in 3.2. However, priority take overs (a leading cause of large rollbacks) have been limited to only occur if the higher priority node is with 10 seconds of the current primary.
          - Pv0: Should be recommended if customer is primarily using non-majority writes.

        - 3.2.11/3.4.1 or lower

          - Pv1: Should only be recommended if an application is exclusively using w:majority writes without priorities or arbiters. This is due to rollback bugs and large rollbacks of non-majority writes caused by mishandling of priorities.
          - Pv0: Should be recommended whenever non-majority writes are being used. Particularly, if a customer is using priorities.


Quiz
----

What are the advantages of replication protocol 1?

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - ``electionTimeoutMillis`` now tunable
    - Secondaries write to the journal before acknowledging
    - Enables read concern "majority"

Further Reading
---------------

See :manual:`Read Concern Reference</reference/read-concern>` for more details on read concerns.

.. include:: /includes/np.rst
