==========================
Aggregation in MongoDB 3.2
==========================


Learning Objectives
-------------------

Upon completing this module, students will be able to:

- List and use the new aggregation stages in MongoDB 3.2

  - ``$sample``
  - ``$indexStats``
  - ``$lookup``

- Use the new or revised operators in MongoDB 3.2

.. include:: /includes/student-notes.rst


Sample Dataset
--------------

Mongoimport the ``companies.json`` file:

.. literalinclude:: /includes/aggregation_scripts.sh
    :language: bash
    :lines: 6

- You now have a dataset of companies on your server.
- We will use these for our examples.

.. include:: /includes/student-notes.rst


New Pipeline Operators
----------------------

- ``$sample`` used to pull in a random set of documents
- ``$indexStats`` shows how many hits the indexes get since the server process started
- ``$lookup`` enables you to do a left outer join across two collections

.. include:: /includes/student-notes.rst


Introduction to ``$sample``
---------------------------

- Randomized sample of documents
- Useful for calculating statistics
- ``$sample`` provides an efficient means of sampling a data set

  - Though if the sample size requested is larger than 5% of the collection ``$sample`` will perform a collection scan

    - Also happens if collection has fewer than 100 documents

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - The exact method is in the documentation.

      - `Link here <https://docs.mongodb.com/manual/reference/operator/aggregation/sample/>`_


Example: ``$sample``
--------------------

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 5-8


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Users will want their sample sizes to be large enough to be useful.
    - 5 is too small for anything
    - A statistician may be required for determining how much is enough; it depends on the distribution of data
    - Currently ``$sample`` can be quite slow. See: `SERVER-23408 <https://jira.mongodb.org/browse/SERVER-23408>`_.


Introduction to ``$indexStats``
-------------------------------

- Tells you how many times each index has been used since the server process began
- Must be the first stage of the pipeline
- You can use other stages to aggregate the data
- Returns one document per index
- The ``accesses.ops`` field reports the number of times an index was used

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Doesn't include all internal operations

      - Does not include TTL deletions or .explain() queries, for example


Example: ``$indexStats``
------------------------

Issue each of the following commands in the mongo shell, one at a time.

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 11-18


.. only:: instructor

  .. note::

    - Point out the "accesses" doc, with ops, is 0 for the new index initially.
    - Ops incremented to 2 from the two find() queries.
    - The ``.next()`` operations are to get the DB to actually execute the query.
    - _id did not increment because we weren't using that index
    - Neither query changed its "since" field in the "accesses" doc
    - If using replication, the oplog will query on _id when replicating.


Introduction to ``$lookup``
---------------------------

- Pulls documents from a second collection into the pipeline

  - In SQL terms, performs a left outer join 

    - If you ``$lookup`` then immediately ``$unwind`` the field, it becomes an inner join

  - The second collection must be in the same database
  - The second collection cannot be sharded

.. include:: /includes/student-notes.rst


Introduction to ``$lookup`` (continued)
---------------------------------------

- Documents based on a matching field in each collection
- Previously, you could get this behavior with two separate queries

  - One to the collection that contains reference values
  - The other to the collection containing the documents referenced

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - When following with ``$unwind``, if you use ``preserveNullAndEmptyArrays: true`` then it remains a left outer join.


Example: Using ``$lookup``
--------------------------

Create a separate collection for ``$lookup``

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 22-33


.. include:: /includes/student-notes.rst


Example: Using ``$lookup`` (Continued)
--------------------------------------

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 34-44

.. include:: /includes/student-notes.rst


Reviewing the Output
--------------------

- All companies matching the filter are included.
- Even if there is no corresponding comment (as for IBM)
- Note that the comment documents joined to each match are included in their entirety.
- Does not include documents in commentOnEmployees that don't match.

.. include:: /includes/student-notes.rst


New Aggregation Functionality
-----------------------------

3.2 introduced several new operators and expanded the functionality of a few operators:

- New accumulators for ``$group``
- New arithmetic operators
- New array operators
- General enhancements

.. include:: /includes/student-notes.rst


New Accumulators
----------------

- Used in the ``$group`` stage
- ``$stdDevSamp`` - sample standard deviation
- ``$stdDevPop`` - population standard deviation

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 48-54

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - The standard deviation of a population is used when you're looking at every member
    - The standard deviation of a sample is used when just a randomly selected subset of a larger population
    - It is not necessary to use the ``$sample`` stage
    - Don't go into the stats any deeper; this isn't a statistics class

      - We used this example just to show the syntax


New Arithmetic Operators
------------------------

- ``$sqrt``: Calculate a square root
- ``$abs``: Calculate the absolute value
- ``$log``: Calculate the logarithm in a specified base
- ``$log10``: Log base 10
- ``$ln``: Natural logarithm

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - All of these are well documented if they want to use them
    - But there are too many to practice, so just go over them quick


New Arithmetic Operators (Continued)
------------------------------------

- ``$pow``: Raise a number to an exponent
- ``$exp``: Raise e to a power
- ``$trunc``: Truncate a number to its integer
- ``$ceil``: Round up to an integer
- ``$floor``: Round down to an integer

.. include:: /includes/student-notes.rst


Example: ``$trunc``
-------------------

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 58-64
  :emphasize-lines: 62-63

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - We just selected one arithmetic operator to show
    - They can go to the manual for syntax


New Array Operators
-------------------

- ``$slice``: returns a portion of an array
- ``$arrayElemAt``: Returns an element at the index
- ``$concatArrays``: Concatenates two or more arrays
- ``$isArray``: Determines if the operand is an array or not
- ``$filter``: Selects a subset of the array, based on the filter

.. include:: /includes/student-notes.rst


Example: ``$filter``
--------------------

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 68-83

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Here we're filtering based on the round_code found in documents in the funding_rounds array.
    - Just grabbing the subdocuments that match!
    - Notice that the "cond" field of the ``$filter`` document requires an expression.
    - The use of ``$$`` is because there's a variable, "series_e_funding", which we're creating in this stage of aggregation.
    - It doesn't yet exist as a field, because the ``$project`` round isn't done, yet.


Changes to ``$unwind`` Behavior
-------------------------------

- ``$unwind`` no longer errors on non-array operands.

  - Returned an error prior to ``3.2``
  - Keeps document as-is for non-array values in ``3.2``

    - But drops nullish values

      - An array,
      - Missing
      - null
      - An empty array

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Nullish values are ``null``, ``undefined``, empty array, and missing fields


``$unwind`` with a Document Operand
-----------------------------------

``$unwind`` also supports this form:

.. code-block:: javascript

   {
     $unwind:
       {
         path: <field path>,
         includeArrayIndex: <string>,
         preserveNullAndEmptyArrays: <boolean>
       }
   }


Document Operand Semantics
--------------------------

- ``path`` -- field path to an array field
- ``includeArrayIndex``	-- the name of a new field to hold the array index of the element (optional)
- ``preserveNullAndEmptyArrays`` -- output a document only if ``true`` and the path is null, missing, or an empty array


Using Accumulators with ``$project``
------------------------------------

For array fields, the following accumulators can be used in the project stage starting in 3.2:

- ``$avg``: Averages over values
- ``$sum``: Sums the values
- ``$min``: Finds the minimum value
- ``$max``: finds the maximum value
- ``$stdDevPop``, ``$stdDevSamp``

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

     Unsupported accumulators:

      - ``$first``, ``$last``
      - ``$push``
      - ``$addToSet``
      - That's literally all of them


Example: ``$project`` Accumulators
----------------------------------

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 87-100

.. only:: instructor

  .. note::

    - The example is simple enough that students can see everything
    - One document out per document in

.. include:: /includes/student-notes.rst


``$project`` ing Arrays
-----------------------

You can now use ``$project`` to create arrays from existing non-array fields:

.. literalinclude:: /includes/aggregation_scripts.js
  :language: javascript
  :lines: 104-109

.. include:: /includes/student-notes.rst
