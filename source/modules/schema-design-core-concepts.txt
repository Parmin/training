===========================
Schema Design Core Concepts
===========================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- Basic schema design principles for MongoDB
- Tradeoffs for embedded documents in a schema
- Tradeoffs for linked documents in a schema
- The use of array fields as part of a schema design

.. include:: /includes/student-notes.rst


What is a schema?
-----------------

- Maps concepts and relationships to data
- Sets expectations for the data
- Minimizes overhead of iterative modifications
- Ensures compatibility

.. include:: /includes/student-notes.rst


Example: Normalized Data Model
------------------------------

::

   User:           Book:           Author:
   - username      - title         - firstName
   - firstName     - isbn          - lastName
   - lastName      - language
                   - createdBy    
                   - author

.. include:: /includes/student-notes.rst


Example: Denormalized Version
-----------------------------

::

   User:           Book:          
   - username      - title        
   - firstName     - isbn         
   - lastName      - language
                   - createdBy
                   - author
                     - firstName
                     - lastName

.. include:: /includes/student-notes.rst


Schema Design in MongoDB
------------------------

- Schema is defined at the application-level
- Design is part of each phase in its lifetime
- There is no magic formula

.. include:: /includes/student-notes.rst


Three Considerations
--------------------

- The data your application needs
- Your application's read usage of the data
- Your application's write usage of the data

.. include:: /includes/student-notes.rst


Case Study
----------

- A Library Web Application
- Different schemas are possible.

.. include:: /includes/student-notes.rst


Author Schema
-------------

.. code-block:: javascript

   {   "_id": int,
       "firstName": string,
       "lastName": string
   }

.. include:: /includes/student-notes.rst


User Schema
-----------

.. code-block:: javascript

   {   "_id": int,
       "username": string,
       "password": string
   }

.. include:: /includes/student-notes.rst


Book Schema
-----------

.. code-block:: javascript

   {  "_id": int,
      "title": string,
      "slug": string,
      "author": int,
      "available": boolean,
      "isbn": string,
      "pages": int,
      "publisher": {
          "city": string,
          "date": date,
          "name": string
      },
      "subjects": [ string, string ],
      "language": string,
      "reviews": [ { "user": int, "text": string },
                   { "user": int, "text": string } ]
  }

.. include:: /includes/student-notes.rst


Example Documents: Author
-------------------------

.. code-block:: javascript

   {   _id: 1,
       firstName: "F. Scott",
       lastName: "Fitzgerald"
   }

.. include:: /includes/student-notes.rst


Example Documents: User
-----------------------

.. code-block:: javascript

   {   _id: 1,
       username: "emily@10gen.com",
       password: "slsjfk4odk84k209dlkdj90009283d"
   }

.. include:: /includes/student-notes.rst


Example Documents: Book
-----------------------

.. code-block:: javascript

   {   _id: 1,
       title: "The Great Gatsby",
       slug: "9781857150193-the-great-gatsby",
       author: 1,
       available: true,
       isbn: "9781857150193",
       pages: 176,
       publisher: {
           name: "Everyman's Library",
           date: ISODate("1991-09-19T00:00:00Z"),
           city: "London"
       },
       subjects: ["Love stories", "1920s", "Jazz Age"],
       language: "English",
       reviews: [ { user: 1, text: "One of the best…" },
                  { user: 2, text: "It's hard to…" } ]
   }

.. include:: /includes/student-notes.rst


Embedded Documents
------------------

- AKA sub-documents or embedded objects
- What advantages do they have?
- When should they be used?

.. include:: /includes/student-notes.rst


Example: Embedded Documents
---------------------------

.. code-block:: javascript
  
   {   _id: 1,
       title: "The Great Gatsby",
       slug: "9781857150193-the-great-gatsby",
       author: 1,
       available: true,
       isbn: "9781857150193",
       pages: 176,
       publisher: {
           name: "Everyman's Library",
           date: ISODate("1991-09-19T00:00:00Z"),
           city: "London"
       },
       subjects: ["Love stories", "1920s", "Jazz Age"],
       language: "English",
       reviews: [ { user: 1, text: "One of the best…" },
                  { user: 2, text: "It's hard to…" } ]
   }

.. include:: /includes/student-notes.rst


Embedded Documents: Pros and Cons
---------------------------------

- Great for read performance
- One seek to find the document
- At most, one sequential read to retrieve from disk
- Writes can be slow if constantly adding to objects

.. include:: /includes/student-notes.rst


Linked Documents
----------------

- What advantages does this approach have?
- When should they be used?

.. include:: /includes/student-notes.rst


Example: Linked Documents
-------------------------

.. code-block:: javascript
   :emphasize-lines: 4, 14, 16

   {   _id: 1,
       title: "The Great Gatsby",
       slug: "9781857150193-the-great-gatsby",
       author: 1,
       available: true,
       isbn: "9781857150193",
       pages: 176,
       publisher: {
           name: "Everyman's Library",
           date: ISODate("1991-09-19T00:00:00Z"),
           city: "London"
       },
       subjects: ["Love stories", "1920s", "Jazz Age"],
       language: "English",
       reviews: [ { user: 1, text: "One of the best…" },
                  { user: 2, text: "It's hard to…" } ]
   }

.. include:: /includes/student-notes.rst


Linked Documents: Pros and Cons
-------------------------------

- More, smaller documents
- Can make queries by ID very simple
- Accessing linked documents requires extra seeks + reads. 
- What effect does this have on the system?

.. include:: /includes/student-notes.rst


Arrays
------

- Array of scalars
- Array of documents

.. include:: /includes/student-notes.rst


Array of Scalars
----------------

.. code-block:: javascript
   :emphasize-lines: 13

   {   _id: 1,
       title: "The Great Gatsby",
       slug: "9781857150193-the-great-gatsby",
       author: 1,
       available: true,
       isbn: "9781857150193",
       pages: 176,
       publisher: {
           name: "Everyman's Library",
           date: ISODate("1991-09-19T00:00:00Z"),
           city: "London"
       },
       subjects: ["Love stories", "1920s", "Jazz Age"],
       language: "English",
       reviews: [ { user: 1, text: "One of the best…" },
                  { user: 2, text: "It's hard to…" } ]
   }

.. include:: /includes/student-notes.rst


Array of Documents
------------------

.. code-block:: javascript
   :emphasize-lines: 15-16

   {   _id: 1,
       title: "The Great Gatsby",
       slug: "9781857150193-the-great-gatsby",
       author: 1,
       available: true,
       isbn: "9781857150193",
       pages: 176,
       publisher: {
           name: "Everyman's Library",
           date: ISODate("1991-09-19T00:00:00Z"),
           city: "London"
       },
       subjects: ["Love stories", "1920s", "Jazz Age"],
       language: "English",
       reviews: [ { user: 1, text: "One of the best…" },
                  { user: 2, text: "It's hard to…" } ]
   }

.. include:: /includes/student-notes.rst


Exercise: Users and Book Reviews
--------------------------------

Design a schema for users and their book reviews. Usernames are immutable.

- Users

  - username (string)
  - email (string)

- Reviews

  - text (string)
  - rating (integer)
  - created_at (date)


.. include:: /includes/student-notes.rst



Solution A: Users and Book Reviews
----------------------------------

Reviews may be queried by user or book

.. code-block:: javascript

   // db.users (one document per user)
   {   _id: ObjectId("…"),
       username: "bob",
       email: "bob@example.com"
   }

   // db.reviews (one document per review)
   {   _id: ObjectId("…"),
       user: ObjectId("…"),
       book: ObjectId("…"),
       rating: 5,
       text: "This book is excellent!",
       created_at: ISODate("2012-10-10T21:14:07.096Z")
   }

.. include:: /includes/student-notes.rst


Solution B: Users and Book Reviews
----------------------------------

Optimized to retrieve reviews by user

.. code-block:: javascript

   // db.users, one document per user with all reviews
   {   _id: ObjectId("…"),
       username: "bob",
       email: "bob@example.com",
       reviews: [
         {   book: ObjectId("…"),
             rating: 5,
             text: "This book is excellent!",
             created_at: ISODate("2012-10-10T21:14:07.096Z")
         }
       ]
   }

.. include:: /includes/student-notes.rst


Solution C: Users and Book Reviews
----------------------------------

Optimized to retrieve reviews by book

.. code-block:: javascript

   // db.users (one document per user)
   {   _id: ObjectId("…"),
       username: "bob",
       email: "bob@example.com"
   }

   // db.books, one document per book with all reviews
   {   _id: ObjectId("…"),
       // Other book fields…
       reviews: [
         {   user: ObjectId("…"),
             rating: 5,
             text: "This book is excellent!",
             created_at: ISODate("2014-11-10T21:14:07.096Z")
         }
       ]
   }

.. include:: /includes/student-notes.rst

