============================
Query Operators (C++ Driver)
============================


Learning Objectives
-------------------

Upon completing this module students should understand the following types of MongoDB query operators:

- Comparison operators
- Logical operators
- Element query operators
- Operators on arrays

.. include:: /includes/student-notes.rst


Comparison Query Operators
--------------------------

- ``$lt``: Exists and is less than
- ``$lte``: Exists and is less than or equal to
- ``$gt``: Exists and is greater than
- ``$gte``: Exists and is greater than or equal to
- ``$ne``: Does not exist or does but is not equal to
- ``$in``: Exists and is in a set
- ``$nin``: Does not exist or is not in a set

.. include:: /includes/student-notes.rst


Example: Comparison Operators (Setup)
--------------------------------------

.. code-block:: javascript

  // insert sample data
  db.movies.insert( [
    {
      "title" : "Batman",
      "category" : [ "action", "adventure" ],
      "imdb_rating" : 7.6,
      "budget" : 35
    },
    {
      "title" : "Godzilla",
      "category" : [ "action",
      "adventure", "sci-fi" ],
      "imdb_rating" : 6.6
    },
    {
      "title" : "Home Alone",
      "category" : [ "family", "comedy" ],
      "imdb_rating" : 7.4
    }
  ] )

.. include:: /includes/student-notes.rst


Example: Comparison Operators
------------------------------

.. code-block:: cpp

  // db.movies.find()
  coll.find( {} );

  // db.movies.find( { "imdb_rating" : { $gte : 7 } } )
  query << "imdb_rating" << open_document << "$gte" << 7 << close_document;

  // db.movies.find( { "category" : { $ne : "family" } } )
  query << "category" << open_document << "$ne" << "family" << close_document;

  // db.movies.find( { "title" : { $in : [ "Batman", "Godzilla" ] } } )
  query << "title" << open_document << "$in"
    << open_array << "Batman" << "Godzilla" << close_array<< close_document;

  // db.movies.find( { "title" : { $nin : [ "Batman", "Godzilla" ] } } )
  query << "title" << open_document << "$nin"
    << open_array << "Batman" << "Godzilla" << close_array<< close_document;

  coll.find( query.view() );

.. include:: /includes/student-notes.rst


Logical Query Operators
-----------------------

- ``$or``: Match either of two or more values
- ``$not``: Used with other operators
- ``$nor``: Match neither of two or more values
- ``$and``: Match both of two or more values

  - This is the default behavior for queries specifying more than one condition.
  - Use ``$and`` if you need to include the same operator more than once in a query.

.. include:: /includes/student-notes.rst


Example: Logical Operators
---------------------------

.. code-block:: cpp

   /* db.movies.find( { $or : [
   { "category" : "sci-fi" }, { "imdb_rating" : { $gte : 7 } }] } )
   */
   query << "$or"
     << open_array
       << open_document << "category" << "sci-fi" << close_document
       << open_document << "imdb_rating"
         << open_document << "$gte" << 7 << close_document
       << close_document
     << close_array;

.. include:: /includes/student-notes.rst


Example: Logical Operators
---------------------------

.. code-block:: cpp

  // more complex $or, really good sci-fi movie or medicore family movie
  /* db.movies.find( { $or : [
      { "category" : "sci-fi", "imdb_rating" : { $gte : 8 } },
      { "category" : "family", "imdb_rating" : { $gte : 7 } }] } )
  */
  document category_scifi, category_family;
  category_scifi << "category" << "sci-fi"
    << "imdb_rating" << open_document  << "$gte" << 8 << close_document;
  category_family << "category" << "sci-fi"
    << "imdb_rating" << open_document  << "$gte" << 7 << close_document;

  b_document or1{category_scifi.view()};
  b_document or2{category_family.view()};

  query << "$or"
    << open_array
      << or1 << or2
    << close_array;

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    In this example we should highlight the composability of documents using
    ``bsoncxx::types::b_document``.


Example: Logical Operators
---------------------------

.. code-block:: cpp

   // find bad movies
   //db.movies.find( { "imdb_rating" : { $not : { $gt : 7 } } } )
   query << "imdb_rating"
     << open_document << "$not"
       << open_document << "$gt" << 7 << close_document
     << close_document;

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``{ "imdb_rating" : { $not : { $gt : 7 } } }`` also returns everything
      that doesn't have an "imdb_rating"



Element Query Operators
-----------------------

- ``$exists``: Select documents based on the existence of a particular field.
- ``$type``: Select documents based on their type.
- See :manual:`BSON types</reference/bson-types>` for reference on types.

.. include:: /includes/student-notes.rst


Example: Element Operators
---------------------------

.. code-block:: cpp

   using namespace builder::basic;
   //db.movies.find( { "budget" : { $exists : true } } )
   builder::basic::document query;
   query.append(kvp("budget", [](sub_document sd) {
                 sd.append(kvp("$exists", true));}));

   // type 1 is Double
   //db.movies.find( { "budget" : { $type : 1 } } )
   builder::basic::document query;
   query.append(kvp("budget", [](sub_document sd) {
                 sd.append(kvp("$type", 1));}));

   // type 3 is Object (embedded document)
   //db.movies.find( { "budget" : { $type : 3 } } )
   builder::basic::document query;
   query.append(kvp("budget", [](sub_document sd) {
                 sd.append(kvp("$type", 3));}));


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - In this example we are using ``builder::basic`` to build the query documents

Array Query Operators
---------------------

- ``$all``: Array field must contain all values listed.
- ``$size``: Array must have a particular size. E.g., ``$size : 2`` means 2 elements in the array
- ``$elemMatch``: All conditions must be matched by at least one element in the array

.. include:: /includes/student-notes.rst


Example: Array Operators
-------------------------

.. code-block:: cpp

   //db.movies.find( { "category" : { $all : [ "sci-fi", "action" ] } } )
   builder::basic::document query;
   query.append(kvp("category", [](sub_document sd) {
                 sd.append(kvp("$all",[](sub_array sa) {
                   sa.append("sci-fi", "action"); }));}
               ));

   //db.movies.find( { "category" : { $size : 3 } } )
   query.append(kvp("category", [](sub_document sd) {
                 sd.append(kvp("$size", 3));}));

.. include :: /includes/student-notes.rst


Example: $elemMatch
--------------------

Let's assume we have the following document:

.. code-block:: javascript

  db.movies.insert( {
      "title" : "Raiders of the Lost Ark",
      "filming_locations" : [
        { "city" : "Los Angeles", "state" : "CA", "country" : "USA" },
        { "city" : "Rome", "state" : "Lazio", "country" : "Italy" },
        { "city" : "Florence", "state" : "SC", "country" : "USA" }
      ] } )

.. include:: /includes/student-notes.rst

Example: $elemMatch
--------------------

If we want to find a movie that was shoot in the city of Florence, country Italy

.. code-block:: cpp

  document query;
  //db.movies.find( {"filming_locations.city" : "Florence","filming_locations.country" : "Italy"} )
  query << "filming_locations.city" << "Florence"
  << "filming_locations.country" << "Italy";
  // This query is incorrect, it won't return what we want


  // $elemMatch is needed, now there are no results, this is expected
  //db.movies.find( { "filming_locations" : { $elemMatch : { "city" : "Florence", "country" : "Italy"} } } )
  query << "filming_locations"
  << open_document << "$elemMatch"
    << open_document
      << "city" << "Florence" << "country" << "Italy"
    << close_document
  << close_document


.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Comparing the last two queries demonstrates ``$elemMatch``.

.. raw:: latex

   \newpage
