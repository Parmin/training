===============
Query Operators
===============


Learning Objectives
-------------------

Upon completing this module students should understand the following types of MongoDB query operators:

- Comparison operators
- Logical operators
- Element query operators
- Operators on arrays

.. include:: /includes/student-notes.rst


Comparison Query Operators
--------------------------

- ``$lt``: Exists and is less than
- ``$lte``: Exists and is less than or equal to
- ``$gt``: Exists and is greater than
- ``$gte``: Exists and is greater than or equal to
- ``$ne``: Does not exist or does but is not equal to
- ``$in``: Exists and is in a set
- ``$nin``: Does not exist or is not in a set

.. include:: /includes/student-notes.rst


Exercise: Comparison Operators
------------------------------

Experiment with the following.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1;i<=5;i++) { db.testcol.insert( { a : i } ) };
   db.testcol.insert( { } )                        // No "a" field
   db.testcol.find()                               

   db.testcol.find( { a : { $gte : 2 } } )         

   db.testcol.find( { a : { $ne : 2 } } )          

   db.testcol.find( { a : { $in : [ 3, 2 ] } } )   

   db.testcol.find( { a : { $nin : [ 3, 2 ] } } )  

.. include:: /includes/student-notes.rst


Logical Query Operators
-----------------------

- ``$or``: Match either of two or more values
- ``$not``: Used with other operators
- ``$nor``: Match neither of two or more values
- ``$and``: Match both of two or more values 

  - This is the default behavior for queries specifying more than one condition.
  - Use ``$and`` if you need to include the same operator more than once in a query.

.. include:: /includes/student-notes.rst


Exercise: Logical Operators (Setup)
----------------------------------

Create a collection we can experiment with.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=3; i++) { 
       for (j=1; j<=3; j++) { 
           db.testcol.insert( { a : i, b : j } ) 
       } 
   };
   db.testcol.insert( { b : 10 } )  // No "a" field
   db.testcol.find()                                          

.. include:: /includes/student-notes.rst


Exercise: Logical Operators
---------------------------

Experiment with the following.

.. code-block:: javascript

   db.testcol.find( { $or : [ { a : 1 }, { b : 2 } ] } )      

   db.testcol.find( { a : { $not : { $gt : 3 } } } )          

   db.testcol.find( { $nor : [ { a : 3 } , { b : 3 } ] } )    

   db.testcol.find( { b : { $gt : 2 , $lte : 10 } } )  // and is implicit

   db.testcol.find( { $and : [ { $or : [ { a : 1 }, { a : 2 } ] }, 
                               { $or : [ { b : 2 }, { b : 3 } ] } ] } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``db.testcol.find( { a : { $not : { $gt : 3 } } } )``

        - Different from ``db.testcol.find( { a : { $lte : 3 } } )``
        - Returns all documents where ``a`` is less than or equal to 3
        - Also returns documents for which ``a`` does not exist

      - Without the use of ``$and`` in the last query above:
   
        - The second ``$or`` would replace the first.
        - The second ``$or`` would be the only condition evaluated in the query.



Element Query Operators
-----------------------

- ``$exists``: Select documents based on the existence of a particular field.
- ``$type``: Select documents based on their type.
- See :manual:`BSON types</reference/bson-types>` for reference on types.

.. include:: /includes/student-notes.rst


Exercise: Element Operators
---------------------------

Experiment with the following.

.. code-block:: javascript

   db.testcol.drop()
   // by default, the mongo shell treats numbers as floating-point values
   db.testcol.insert( [ { a : 1 }, { b : 1 }, { a : NumberInt(2) }, 
                        { b : "b" } ] )

   db.testcol.find( { a : { $exists : true } } )   

   // type 1 is Double
   db.testcol.find( { b : { $type : 1 } } )        

   // type 2 is String
   db.testcol.find( { b : { $type : 2 } } )        

   // type 16 is 32-bit integer 
   // use NumberInt(), NumberLong() to handle integers in the mongo shell
   db.testcol.find( { a : { $type : 16 } } )       

.. include:: /includes/student-notes.rst



Array Query Operators
---------------------

- ``$all``: Array field must contain all values listed.
- ``$size``: Array must have a particular size. E.g., ``$size : 2`` means 2 elements in the array
- ``$elemMatch``: All conditions must be matched by at least one element in the array

.. include:: /includes/student-notes.rst


Exercise: Array Operators
-------------------------

Experiment with the following.

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.insert( [ { a : [ 1, 2, 3, 4, 5 ] }, 
                        { a : [ 1, 5 ] }, 
                        { a : [ 1, 3, 5 ] } ] )

   db.testcol.find( { a : { $all : [ 1, 2 ] } } )  

   db.testcol.find( { a : { $size : 3 } } )  

   // at least one element must match both conditions
   db.testcol.find( { a : { $elemMatch : { $gte : 2, $lte : 4 } } } )  

   // at least one element must match either condition
   // does not need to be the same element
   db.testcol.find( { a : { $gte : 2, $lte : 4 } } )  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Comparing the last two queries demonstrates ``$elemMatch``.
      - For the query using ``$elemMatch`` at least one element must match both conditions.
      - For the last query, there must be at least one element that matches each of the conditions. One element can match the ``$gte`` condition and another element can match the ``$lte`` condition.







