===============
Query Operators
===============


Learning Objectives
-------------------

Upon completing this module students should understand the following types of MongoDB query operators:

- Comparison operators
- Logical operators
- Element query operators
- Operators on arrays

.. include:: /includes/student-notes.rst


Comparison Query Operators
--------------------------

- ``$lt``: Exists and is less than
- ``$lte``: Exists and is less than or equal to
- ``$gt``: Exists and is greater than
- ``$gte``: Exists and is greater than or equal to
- ``$ne``: Does not exist or does but is not equal to
- ``$in``: Exists and is in a set
- ``$nin``: Does not exist or is not in a set

.. include:: /includes/student-notes.rst


Exercise: Comparison Operators
------------------------------

Experiment with the following.

.. code-block:: javascript

  // insert sample data
  db.movies.insert( [ { "title" : "Batman", "category" : [ "action", "adventure" ], "imdb_rating" : 7.6, "budget" : 35 },
                      { "title" : "Godzilla", "category" : [ "action", "adventure", "sci-fi" ], "imdb_rating" : 6.6 },
                      { "title" : "Home Alone", "category" : [ "family", "comedy" ], "imdb_rating" : 7.4 }
                    ] )

  db.movies.find()

  db.movies.find( { "imdb_rating" : { $gte : 7 } } )         

  db.movies.find( { "category" : { $ne : "family" } } )          

  db.movies.find( { "title" : { $in : [ "Batman", "Godzilla" ] } } )   

  db.movies.find( { "title" : { $nin : [ "Batman", "Godzilla" ] } } )  

.. include:: /includes/student-notes.rst


Logical Query Operators
-----------------------

- ``$or``: Match either of two or more values
- ``$not``: Used with other operators
- ``$nor``: Match neither of two or more values
- ``$and``: Match both of two or more values 

  - This is the default behavior for queries specifying more than one condition.
  - Use ``$and`` if you need to include the same operator more than once in a query.

.. include:: /includes/student-notes.rst


Exercise: Logical Operators (Setup)
----------------------------------

Create a collection we can experiment with.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=3; i++) { 
       for (j=1; j<=3; j++) { 
           db.testcol.insert( { a : i, b : j } ) 
       } 
   };
   db.testcol.insert( { b : 10 } )  // No "a" field
   db.testcol.find()                                          

.. include:: /includes/student-notes.rst


Exercise: Logical Operators
---------------------------

Experiment with the following.

.. code-block:: javascript

   db.movies.find( { $or : [ { "category" : "sci-fi" }, { "imdb_rating" : { $gte : 7 } } ] } )      

   // more complex $or, really good sci-fi movie or medicore family movie
   db.movies.find( { $or : [ { "category" : "sci-fi", "imdb_rating" : { $gte : 8 } }, 
                             { "category" : "family", "imdb_rating" : { $gte : 7 } } ] } )

   // find bad movies
   db.movies.find( { "imdb_rating" : { $not : { $gt : 7 } } } )          

   // find movies within an imdb_rating range
   db.movies.find( { "imdb_rating" : { $gt : 5 , $lte : 7 } } )  // and is implicit

   // queries can be nested
   db.movies.find( { $and : [ { $or : [ { "category" : "sci-fi", "imdb_rating" : { $gte : 8 } }, 
                                        { "category" : "family", "imdb_rating" : { $gte : 7 } } ] } , 
                              { $or : [ { "category" : "action", "imdb_rating" : { $gte : 6 } } ] } ] } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - ``db.movies.find( { "imdb_rating" : { $not : { $gt : 7 } } } )``

        - Different from ``db.movies.find( { "imdb_rating" : { $lte : 7 } } )``
        - Returns all documents where ``imdb_rating`` is less than or equal to 7
        - Also returns documents for which ``imdb_rating`` does not exist


Element Query Operators
-----------------------

- ``$exists``: Select documents based on the existence of a particular field.
- ``$type``: Select documents based on their type.
- See :manual:`BSON types</reference/bson-types>` for reference on types.

.. include:: /includes/student-notes.rst


Exercise: Element Operators
---------------------------

Experiment with the following.

.. code-block:: javascript

   db.movies.find( { "budget" : { $exists : true } } )   

   // type 1 is Double
   db.movies.find( { "budget" : { $type : 1 } } )        

   // type 3 is Object (embedded document)
   db.movies.find( { "budget" : { $type : 3 } } )        


.. include:: /includes/student-notes.rst



Array Query Operators
---------------------

- ``$all``: Array field must contain all values listed.
- ``$size``: Array must have a particular size. E.g., ``$size : 2`` means 2 elements in the array
- ``$elemMatch``: All conditions must be matched by at least one element in the array

.. include:: /includes/student-notes.rst


Exercise: Array Operators
-------------------------

Experiment with the following.

.. code-block:: javascript

   db.movies.find( { "category" : { $all : [ "sci-fi", "action" ] } } )  

   db.movies.find( { "category" : { $size : 3 } } )  

.. include :: /includes/student-notes.rst







