============
Text Indexes
============

Learning Objectives
-------------------

Upon completing this module, students should understand:

- The purpose of a text index
- How to create text indexes
- How to order text indexes by priority


What is a Text Index?
---------------------

- A text index is based on the tokens (words, etc.) used in a selection of string fields.
- MongoDB supports text search for various languages.
- Text indexes drop language-specific stop words (e.g. in English "the", "an", "a", "and", etc.)
- And use simple, language-specific suffix stemming (e.g., "running" to "run")

Creating a Text Index
---------------------

- You create a text index a little bit differently than you create a standard index 

  - db.collection.ensureIndex( { <field name> : "text" } )

.. include:: /exercises/indexes-text-creation.text

Querying a Text Index
---------------------

- At this point, you can treat the "dialog" field as a multikey index with all of the words in the index as values. You can, at some later point, query the field with the $text operator. Let's add some documents to our collection.

.. include:: /exercises/indexes-text-inserting.txt

- Next, let's query it. The format is:

.. code-block:: javascript

    db.collection.find( { $text : { $search : "Words go here" } } )

.. include:: /exercises/indexes-text-query-1.txt

- If you query on two words, the query will return return any document with either word.

.. include:: /exercises/indexes-text-query-2.txt

Text Search Score
-----------------

- The search algorithm has a score that it assigns.
- The documents can be ordered by that score so that the ones with the most matching words will be highest.
- The score is generated by a vector ranking algorithm. 
- Format is:

.. code-block:: javascript

    db.collection.find({ $text : {$search: "swallow coconut"}}, {textScore: {$meta: "textScore"}}).sort({textScore: {$meta: "textScore"}})
