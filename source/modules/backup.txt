===================
Backup and Recovery
===================


Disasters Do Happen
-------------------

.. include:: disasters-happen.txt

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Human Disasters
---------------

.. include:: human-disasters.txt

.. include:: /includes/student-notes.rst


Terminology: RPO vs. RTO
------------------------

- **Recovery Point Objective (RPO)**: How much data can you afford to lose?

- **Recovery Time Objective (RTO)**: How long can you afford to be off-line?

.. include:: /includes/student-notes.rst


Terminology: DR vs. HA
----------------------

- **Disaster Recovery** (DR)
- **High Availability** (HA)
- Distinct business requirements
- Technical solutions may converge

.. include:: /includes/student-notes.rst


Quiz
----

- Q: What's the hardest thing about backups?
- A: Restoring them!
- **Regularly test that restoration works!**

.. include:: /includes/student-notes.rst


Backup Options
--------------

- Document Level

  - Logical
  - ``mongodump``, ``mongorestore``

- File system level

  - Physical
  - Copy files
  - Volume/disk snapshots

.. include:: /includes/student-notes.rst


Document Level: ``mongodump``
-----------------------------

- Dumps collection to BSON files
- Mirrors your structure
- Does not include indexes (rebuilt during restore)
- ``--oplog`` to record oplog while backing up
- ``--query/filter`` selective dump

.. include:: /includes/student-notes.rst


``mongodump``
-------------

.. code-block:: bash

    $ mongodump --help
    Usage:
      mongodump <options>

    Export the content of a running server into .bson files.

    Specify a database with -d and a collection with -c to only dump that database or collection.

    See http://docs.mongodb.org/manual/reference/program/mongodump/ for more information.

    general options:
          --help                                                print usage
          --version                                             print the tool version and exit

    verbosity options:
      -v, --verbose=<level>                                     more detailed log output (include multiple times for more verbosity, e.g. -vvvvv, or specify a numeric value, e.g. --verbose=N)
          --quiet                                               hide all log output

    connection options:
      -h, --host=<hostname>                                     mongodb host to connect to (setname/host1,host2 for replica sets)
          --port=<port>                                         server port (can also use --host hostname:port)

    authentication options:
      -u, --username=<username>                                 username for authentication
      -p, --password=<password>                                 password for authentication
          --authenticationDatabase=<database-name>              database that holds the user\`s credentials
          --authenticationMechanism=<mechanism>                 authentication mechanism to use

    namespace options:
      -d, --db=<database-name>                                  database to use
      -c, --collection=<collection-name>                        collection to use

    query options:
      -q, --query=                                              query filter, as a JSON string, e.g., '{x:{$gt:1}}'
          --queryFile=                                          path to a file containing a query filter (JSON)
          --readPreference=<string>|<json>                      specify either a preference name or a preference json object
          --forceTableScan                                      force a table scan

    output options:
      -o, --out=<directory-path>                                output directory, or '-' for stdout (defaults to 'dump')
          --gzip                                                compress archive our collection output with Gzip
          --repair                                              try to recover documents from damaged data files (not supported by all storage engines)
          --oplog                                               use oplog for taking a point-in-time snapshot
          --archive=<file-path>                                 dump as an archive to the specified path. If flag is specified without a value, archive is written to stdout
          --dumpDbUsersAndRoles                                 dump user and role definitions for the specified database
          --excludeCollection=<collection-name>                 collection to exclude from the dump (may be specified multiple times to exclude additional collections)
          --excludeCollectionsWithPrefix=<collection-prefix>    exclude all collections from the dump that have the given prefix (may be specified multiple times to exclude additional prefixes)
      -j, --numParallelCollections=                             number of collections to dump in parallel (4 by default) (default: 4)
          --viewsAsCollections

.. include:: /includes/student-notes.rst


File System Level
-----------------

- **Must use journaling!**
- Copy ``/data/db`` files
- Or snapshot volume (e.g., LVM, SAN, EBS)
- *Seriously, always use journaling!*

.. include:: /includes/student-notes.rst

Ensure Consistency
------------------

Flush RAM to disk and stop accepting writes:

- ``db.fsyncLock()``
- Copy/Snapshot
- ``db.fsyncUnlock()``

.. include:: /includes/student-notes.rst


File System Backups: Pros and Cons
----------------------------------

- All databases together
- Fastest way to create a backup
- Fastest way to restore a backup

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        With mmapv1, individual databases' files actually *can* be backed up/restored independently, but not with wiredTiger


Document Level: ``mongorestore``
--------------------------------

- ``mongorestore``
- ``--oplogReplay`` replay oplog to point-in-time

.. include:: /includes/student-notes.rst


File System Restores
--------------------

- All database files
- Replay Oplog

.. include:: /includes/student-notes.rst


Backup Sharded Cluster
----------------------

1. Stop Balancer (and wait) or no balancing window.
2. Lock one secondary member of each replica set and CSRS.
3. Backup Data (shards, config)
4. Unlock replica set members and CSRS.
5. Resume Balancer

.. include:: /includes/student-notes.rst

.. only:: instructor

    .. note::

        - Stopping one config server is sufficient even with a CSRS

        While in the past, you would stop a config server and backup the 3 of
        them due to consistency concerns.

        With CSRS, you only need to stop one, and backup this instance as its
        data will be in sync with the locked replicas.

Restore Sharded Cluster
-----------------------

1. Dissimilar # shards to restore to
2. Different shard keys?
3. Selective restores
4. Consolidate shards
5. Changing addresses of config/shards

.. include:: /includes/student-notes.rst


Tips and Tricks
---------------

- ``mongodump/mongorestore``

  - ``--oplog[Replay]``
  - ``--objcheck/--repair``
  - ``--query/--filter``

- ``bsondump``

  - inspect data at console

- LVM snapshot time/space tradeoff

  - Multi-EBS (RAID) backup
  - clean up snapshots

.. include:: /includes/student-notes.rst


Backup Options
--------------

- You can do it yourself as outlined in this section so far
- Or have the people who created MongoDB run your backups

.. include:: /includes/student-notes.rst


Ops Manager Backup
------------------

.. include:: mms-backup.txt

.. include:: /includes/student-notes.rst


Sharded Clusters
----------------

- Balancer paused every 6 hours
- A no-op token is inserted across all shards, mongos instances, and config servers
- Oplog applied to replica sets until point in which token was inserted
- Provides a consistent state of database across shards

.. include:: /includes/student-notes.rst


Under the Hood
--------------

- From the initial sync, we rebuild your data in our datacenters and take a snapshot
- We take snapshots every 6 hours
- Oplog is stored for 48 hours

.. include:: /includes/student-notes.rst


Key Benefits
------------

- Point in time backups
- Easy to restore
- Unlimited resources
- Fully managed

.. include:: /includes/student-notes.rst


Point in Time Backups
---------------------

- Oplog stored for 48 hours
- Restore your replica set to any point-in-time in the last 48 hours by creating a custom snapshot

.. include:: /includes/student-notes.rst


Easy to Restore
---------------

- Pull from custom URL
- Push via scp

.. include:: /includes/student-notes.rst


Unlimited Restores
------------------

- Confidence in your restore process
- Build development, QA, analytics environments without impacting production

.. include:: /includes/student-notes.rst


Fully Managed
-------------

- Created by the engineers that build MongoDB
- No need to write or maintain custom backup scripts

.. include:: /includes/student-notes.rst


Getting Started
---------------

- Go to https://mms.mongodb.com and sign up

.. include:: /includes/student-notes.rst
