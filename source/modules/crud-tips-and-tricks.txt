======================
CRUD - TIPS AND TRICKS
======================

.. topic:: Learning objectives

    Students should understand:

        - How to use bulk writes
        - When document movement occurs
            - How powerOfTwoSizes works
        - The costs and benefits of journaling
        - SQL to MongoDB terminology and concepts

Bulk Operations
===============

- Bulk operations are used to perform many operations at once
- A result is returned once the entire bulk operation set has been executed
    - No results are returned until the bulk operation is done
- Bulk operations are a way of increasing speed for writes
- Bulk ops can have up to 1000 operations at a time
    - Larger bulk operations will be broken down into groups of 1000 operations
      at a time

Bulk Operations: Syntax
-----------------------

- Bulk operations are created using one of two commands:
    - db.collection.initializeOrderedBulkOp()
        - Ordered bulk operations are done one after another, and if one fails,
          all subsequent writes fail (though previous ones are performed)
    - db.collection.initializeUnorderedBulkOp()
        - Unordered bulk operations are done in no particular order, and if one
          fails, all others will still be attempted
- You then use the find() method to add the query portion, and 
  insert/update/remove to add a write portion.

Exercise: Bulk Operations
~~~~~~~~~~~~~~~~~~~~~~~~~

- First, open a second window and run mongostat
- Look at the rate of inserts during the following.

.. code-block:: javascript

    orderedBulk = db.ordered.initializeOrderedBulkOp()
    for (i=0; i<10000; i++) { for (j=0; j<1000; j++) {
            orderedBulk.insert( { _id : i + 10000 * j,
                                  a : i + 10000 * j,
                                  b : i + 10000 * j } ) }; 
        orderedBulk.execute() }
    // execute 1000 at a time; 10 million total ordered inserts
    unorderedBulk = db.ordered.initializeUnorderedBulkOp()
    for (i=0; i<10000; i++) { for (j=0; j<1000; j++) {
            unorderedBulk.insert( { _id : i + 10000 * j,
                                    a : i + 10000 * j,
                                    b : i + 10000 * j } ) }; 
        unorderedBulk.execute() }
    // execute 1000 at a time; 10 million total unrdered inserts
    for (i=0; i<10000; i++) { for (j=0; j<1000; j++) {
        db.noBulk.insert( { _id : i + 10000 * j,
                            a : i + 10000 * j,
                            b : i + 10000 * j } ) }; bulk.execute() }
    // Pretty slow
