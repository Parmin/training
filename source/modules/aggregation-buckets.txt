=====================
Aggregation - Buckets
=====================


Learning Objectives
-------------------

- How to use ``$bucket``
- How to use ``$bucketAuto``

The ``$bucket`` stage
---------------------

- Groups documents based on a specified expression and bucket boundaries.
- Each bucket is represented as a document in the output.
- Each output document contains an _id field, whose value specifies the inclusive lower bound
- The count field is included by default when the output is not specified.


``$bucket`` Form
----------------

.. code-block:: js

   {
     $bucket: {
        groupBy: <expression>,
        boundaries: [ <lowerbound1>, <lowerbound2>, ... ],
        default: <literal>,
        output: {
           <output1>: { <$accumulator expression> },
           ...
           <outputN>: { <$accumulator expression> }
        }
     }
   }


``$bucket`` Exercise
--------------------

- Using our twitter dataset, let's group users by their tweet/retweet activity
- The bounds should be 0, 100, 500, 2000, 5000, 10000, and 25000
- Produce the following results

.. code-block:: js

   { "_id" : 0, "count" : 5036 }
   { "_id" : 100, "count" : 7711 }
   { "_id" : 500, "count" : 12205 }
   { "_id" : 2000, "count" : 9916 }
   { "_id" : 5000, "count" : 7229 }
   { "_id" : 10000, "count" : 6679 }
   { "_id" : 25000, "count" : 2652 }

.. only:: instructor

   .. note::

      - Can be read as 0-99, 100-499, ...
      - Lower bound is inclusive, upper bound is exclusive

      .. code-block:: js

         db.tweets.aggregate([
           {
             $bucket: {
               groupBy: "$user.statuses_count",
               boundaries: [0, 100, 500, 2000, 5000, 10000, 25000, Infinity],
               default: "Other",
               output: { "count": { $sum: 1 } }
             }
           }
         ])

``$bucketAuto``
---------------

- Groups documents into buckets much like ``$bucket``
- Bucket boundaries are determined by MongoDB in an attempt to evenly distribute the data


``$bucketAuto`` Exercise
------------------------

- Using our twitter dataset, use ``$bucketAuto`` to group documents into the following result

.. code-block:: js

   { "_id" : { "min" : 1, "max" : 342 }, "count" : 10287 }
   { "_id" : { "min" : 342, "max" : 1300 }, "count" : 10293 }
   { "_id" : { "min" : 1300, "max" : 3492 }, "count" : 10287 }
   { "_id" : { "min" : 3492, "max" : 9075 }, "count" : 10286 }
   { "_id" : { "min" : 9075, "max" : 518702 }, "count" : 10275 }

.. only:: instructor

   .. note::

      db.tweets.aggregate([
        {
          $bucketAuto: {
            groupBy: "$user.statuses_count",
            buckets: 5,
            output: {
              count: { $sum: 1 }
            }
          }
        }
      ])
