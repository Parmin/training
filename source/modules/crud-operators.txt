================
find() Operators
================

.. topic:: Upon completing this module, students should know about
           and be able to:

    - Use common operators
        - Comparison Operators
            - $lt, $lte, $gt, $gte, $ne, $in, $nin
        - Logical Operators
            - $or, $and, $not, $nor
        - Element operators
            - $exists, $type
        - Array Operators
            - $all, $elemMatch, $size
        - Array Projection Operators
            - $, $elemMatch, $slice
    - Find information about uncommon operators
        - Geospatial Operators
        - $regex
        - $text

Common Operators
================

    - Logical Operators, to perform multiple queries at once
    - Comparison Operators, to compare values
    - Element Operators, to look at the properties of fields
    - Array Operators, to work with arrays.
    - Array Projection Operators, to project results of arrays

Comparison Operators
--------------------

    - $lt: Exists and is less than
    - $lte: Exists and is less than or equal to
    - $gt: Exists and is greater than
    - $gte: Exists and is greater than or equal to
    - $ne: Does not exist, or does but is not equal to
    - $in: Exists and is in a set
    - $nin: Does not exist, or is not in a set

Exercise: Comparison Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    for (i=1;i<=5;i++) { db.comparison.insert( { a : i } ) };
    db.comparison.insert( { } )  // No "a" field, for comparison
    db.comparison.find()  // 6 docs
    db.comparison.find( { a : { $lt : 2 } } )  // 1 document
    db.comparison.find( { a : { $lte : 2 } } )  // 2 docs
    db.comparison.find( { a : { $gt : 2 } } )  // 3 docs
    db.comparison.find( { a : { $gte : 2 } } )  // 4 docs
    db.comparison.find( { a : { $ne : 2 } } )  // 5 docs
    db.comparison.find( { a : { $in : [ 3, 2 ] } } )  // 2 docs
    db.comparison.find( { a : { $nin : [ 3, 2 ] } } )  // 4 docs


Logical Operators
-----------------

    - $or: Match either of two or more values
    - $not: Used with other operators
    - $nor: Match neither of two or more values
    - $and: Match both of two or more values
        - This is the default behavior of the shell


Exercise: Querying with Logical Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    for (i=1;i<=3;i++) { for(j=1;j<=3;j++) { db.logic.insert( { a : i, b : j } ) } };
    db.logic.find()  // 9 documents
    db.logic.find( { $or : [ { a : 1 }, { b : 2 } ] } )  // 5 docs
    db.logic.find( { a : { $not : { $gte : 3 } } } )  // 6 documents
    db.logic.find( { $nor : [ { a : 3 } , { b : 3 } ] } )  // 4 docs
    db.logic.find( { $and : [ { a : { $gte : 2 } }, 
                              { a : { $lte : 2 } } ] } )  // 3 docs
    db.logic.find( { a : { $lte : 2 , $gte : 2 } } )  // same 3 docs

Element Operators
-----------------

    - $exists: Returns the document if the field is present or not
    - $type: Returns the document if the field is of the given type
      or not
        - You can find the documents here: 
          http://docs.mongodb.org/manual/reference/bson-types/


Exercise: Element Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    db.element.insert( [ { a : 1 }, { b : 1 }, { a : "a" }, { b : "b" } ] )
    db.element.find( { a : { $exists : true } } )  // 2 docs
    db.element.find( { a : { $exists : false } } )  // the other 2 docs
    db.element.find( { b : { $type : 2 } } )  // 1 doc; type 2 is string
    db.element.find( { a : { $type : 16 } } )  // 1 doc; type 16 is 32-bit int

Array Operators
---------------

    - Used when you're querying on a field that contains arrays
    - $all: Array field must contain all values listed
    - $size: Array must have a particular size (e.g., $size : 2 means 2
      elements in the array)
    - $elemMatch: All conditions must be matched by at least one element in the
      array

Exercise: Array Operators
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    db.array.insert( [ { a : [ 1, 2, 3, 4, 5 ] },
                       { a : [ 1, 5 ] },
                       { a : [ 1, 3, 5 ] } ] )
    db.array.find( { a : { $all : [ 1, 2 ] } } )  // 1 doc
    db.array.find( { a : { $size : 3 } } )  // 1 doc
    db.array.find( { a : { $elemMatch : { $gte : 2, 
                                          $lte : 2 } } } )  // 1 doc
    db.array.find( { a : { $lte : 2 , $gte : 2 } } )  // 3 docs
    // that last query didn't use $elemMatch, so at least one 
    // element matched each of the two conditions for all 3 docs.

Array Projection Operators
--------------------------

    - $: We've already done this; picks out the first element that
      matches the query
    - $elemMatch: projects the first element of the array that matches
      the $elemMatch query
    - $slice: Takes only some of the elements to form a new array


Exercise: Array Projection Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: javascript

    db.ap.insert( [ { a : [ { b : 1 } , { b : 2 } , { b : 3 } ] },
                    { a : [ { b : 4 } , { b : 5 } , { b : 6 } ] },
                    { a : [ { b : 7 } , { b : 8 } , { b : 9 } ] } ] )

    db.array.find( { a : { $gt : 3 } }, { _id : 0, "a.$": 1 } )  
    // 4, 5, 5
fix:    db.array.find( { a : 3 }, { _id : 0, a : { $elemMatch: 5 } } )
    // Just the 5 for all 3 documents
    db.array.find( { } , { a : { $slice : 2 } } )  // first 2 elements
    db.array.find( { } , { a : { $slice : -2 } } )  // last 2 elements
