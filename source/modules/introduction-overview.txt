================
MongoDB Overview
================


Learning Objectives 
-------------------

Upon completing this module students should understand:

- MongoDB vs. relational databases and key/value stores
- Vertical vs. horizontal scaling
- The role of MongoDB in the development stack
- The structure of documents in MongoDB
- Array fields
- Embedded documents
- Fundamentals of BSON

.. include:: /includes/student-notes.rst


MongoDB is a Document Database
------------------------------

Documents are associative arrays like:

- Python dictionaries
- Ruby hashes 
- PHP arrays
- JSON objects

.. include:: /includes/student-notes.rst

.. include:: /includes/np.rst

An Example MongoDB Document
---------------------------

A MongoDB document expressed using JSON syntax.

.. code-block:: javascript

   {
       "a" : 3,
       "b" : [3, 2, 7], 
       "c" : { 
           "d" : 4 , 
           "e" : "asdf",
           "f" : true,
           "h" : ISODate("2014-10-23T01:19:40.732Z")
       }
   }   

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Where relational databases store rows, MongoDB stores documents.
      - Documents are hierarchical data structures.
      - This is a fundamental departure from relational databases where rows are flat.


.. include:: /includes/np.rst

Vertical Scaling
----------------

.. figure:: /images/vertical-scaling.png
   :width: 700px
   :align: center

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Another difference is in terms of scalability. With an RDBMS:

      - If you need to support a larger workload, you buy bigger machine. 
      - The problem is, machines are not priced linearly. 
      - The largest machines cost much more than commodity hardware. 
      - If your application is successful, you may find you simply cannot buy a large enough a machine to support your workload. 

    

.. include:: /includes/np.rst

Scaling with MongoDB
--------------------

.. figure:: /images/sharded-collection.png
   :width: 500px
   :align: center

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - MongoDB is designed to be horizontally scalable.
      - MongoDB scales by enabling you to shard your data.
      - When you need more performance, you just buy another machine and add it to your cluster. 
      - MongoDB is highly performant on commodity hardware.	


.. include:: /includes/np.rst

Database Landscape
------------------

.. figure:: /images/database-landscape.png
   :width: 700px
   :align: center

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - We've plotted each technology by scalability and functionality. 
      - At the top left, are key/value stores like memcached. 
      - These scale well, but lack features that make developers productive. 
      - At the far right we have traditional RDBMS technologies. 
      - These are full featured, but will not scale easily. 
      - Joins and transactions are difficult to run in parallel.
      - MongoDB has nearly as much scalability as key-value stores.
      - Gives up only the features that prevent scaling. 
      - We have compensating features that mitigate the impact of that design decision.


.. include:: /includes/np.rst

MongoDB Deployment Models
-------------------------

.. figure:: /images/deployments.png
   :width: 700px
   :align: center

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - MongoDB supports high availability through automated failover. 
      - Typical deployments use replica sets of 3 or more nodes.

        - The primary node will accept all writes, and possibly all reads. 
        - Each secondary will replicate from another node.
        - If the primary fails, a secondary will automatically step up.
        - Replica sets provide redundancy and high availability.

      - In production, you typically build a fully sharded cluster:

        - Your data is distributed across several shards.
        - The shards are themselves replica sets. 
        - This provides high availability and redundancy at scale.




