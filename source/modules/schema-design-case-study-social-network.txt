==========================
Case Study: Social Network
==========================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- Design considerations for building a social network with MongoDB
- Maintaining relationships between users
- Creating a feed service (similar to FaceBook's newsfeed)

.. include:: /includes/student-notes.rst


Design Considerations
---------------------

- User relationships (followers, followees)
- Newsfeed
   
.. include:: /includes/student-notes.rst

User Relationships
------------------

What are the problems with this approach:

.. code-block:: javascript

  {
    "_id" : "bigbird",
    "fullname" : "Big Bird",
    "followers" : [ "oscar", "elmo"],
    "following" : [ "elmo", "bert"]
  }
   
.. include:: /includes/student-notes.rst

User Relationships
------------------

Relationship must be split into separate documents:

- Celebrity users may have millions of followers
- Performance improvements
- Flexibility in relationship description (work group vs school, etc.)

.. include:: /includes/student-notes.rst


User Relationships
------------------

.. code-block:: javascript

  > db.followers.find()
  { "_id" : ObjectId(), "user" : "bigbird", "following" : "elmo" }
  { "_id" : ObjectId(), "user" : "bigbird", "following" : "bert" }
  { "_id" : ObjectId(), "user" : "oscar", "following" : "bigbird" }
  { "_id" : ObjectId(), "user" : "elmo”", "following" : "bigbird" }
   
.. include:: /includes/student-notes.rst


Improving User Relationships
----------------------------

Now meta-data about the relationship can be added:

.. code-block:: javascript

  > db.followers.find()
  { 
    "_id" : ObjectId(), 
    "user" : "bigbird", 
    "following" : "elmo", 
    "group" : "work",
    "follow_start_date" : ISODate("2015-05-19T06:01:17.171Z")
  }
   
.. include:: /includes/student-notes.rst

Counting User Relationships
---------------------------

- Counts across a large number of documents may be slow
- May want to maintain an active count in the user profile 
- An active count of followers and folowees will be more expensive for creating relationships
  
.. include:: /includes/student-notes.rst

Counting User Relationships
---------------------------

.. code-block:: javascript

  {
    "_id" : "bigbird",
    "fullname" : "Big Bird",
    "followers" : 2,
    "following" : 2
  }

  
.. include:: /includes/student-notes.rst

User Relationship Traversal
---------------------------

- Index needed on (followers.user, followers.following)
- For reverse lookups, index needed on (followers.following, followers.user)
- Covered queries should be used in graph lookups (via projection)
- May also want to maintain two separate collections: followers, followees
  
.. include:: /includes/student-notes.rst

User Relationships
------------------

- We've created a simple, scalable model for storing user relationships
  
.. include:: /includes/student-notes.rst

Building a Feed Service
-----------------------

- Newsfeed similar to Facebook
- Show latest posts by followed users
- Newsfeed queries must be extremely fast
  
.. include:: /includes/student-notes.rst


Feed Service Design Considerations
----------------------------------

- Fanout on Read
- Fanout on Write
  
.. include:: /includes/student-notes.rst


Fanout on Read
--------------

- Newsfeed is generated in real-time, when page is loaded
- Simple to implement
- Space efficient
- Reads can be very expensive (e.g. if you follow 1 million users)
  
.. include:: /includes/student-notes.rst

When to Use Fanout on Read
--------------------------

- Newsfeed is viewed less often than posts are made
- Small scale system, users follow few people
- Historic timeline information is commonly viewed
 
.. include:: /includes/student-notes.rst

Fanout on Write
---------------

- Modify every users timeline: when a new post or activity is created
- Extremely fast page loads
- Optimized for case where there are far less posts than feed views
- Scales better for large systems than fanout on read

.. include:: /includes/student-notes.rst

Fanout on Write
---------------

.. code-block:: javascript

  > db.feed.find({"user : "bigbird"}).sort({"date" : -1})
  {
    "_id" : ObjectId(),
    "user" : "bigbird",
    "date" : ISODate("2015-05-19T06:01:17.171Z"),
    "content" : {
      "user" : "cookiemonster",
      "post" : "I love cookies!"
    }
  }


.. include:: /includes/student-notes.rst


Fanout on Write
---------------

- What happens when Cookie Monster adds a post to 1 million followers?
- What happens when posts are edited or updated?

.. include:: /includes/student-notes.rst


Fanout on Write (Non-embedded content)
--------------------------------------

.. code-block:: javascript

  > db.feed.find({"user : "bigbird"}).sort({"date" : -1})
  {
    "_id" : ObjectId(),
    "user" : "bigbird",
    "date" : ISODate("2015-05-19T06:01:17.171Z"),
    "content_id" : ObjectId("...de1")
  }

  > db.content.find({"_id" : ObjectId("...de1")"})


.. include:: /includes/student-notes.rst


Fanout on Write Considerations
------------------------------

- Content can be embedded or referenced
- Feed items may be organized in buckets per user per day
- Feed items can also be bucketed in batches (such as 100 posts per document)

.. include:: /includes/student-notes.rst

Fanout on Write
---------------

When newsfeed views are smaller than content posts, and the number of users to the system is large, Fanout on write provides a very efficient way to maintain fast performance as the system grows large.

.. include:: /includes/student-notes.rst


Class Exercise
--------------

Look through a Twitter timeline.  E.g. http://twitter.com/mongodb

- Design a schema for the user graph
- Design a schema for a Twitter user's newsfeed (including retweets, favorites, and replies)


.. include:: /includes/student-notes.rst


