================
Multikey Indexes
================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- What a multikey index is
- When MongoDB will use a multikey index to satisfy a query
- How multikey indexes work
- How multikey indexes handle sorting
- Some limitations on multikey indexes

.. include:: /includes/student-notes.rst


Introduction to Multikey Indexes
--------------------------------

- A multikey index is an index on an array.
- An index entry is created on each value found in the array.
- Multikey indexes can support primitives, documents, or sub-arrays.
- There is nothing special that you need to do to create a multikey index. 
- You created them using ``ensureIndex()`` just as you would with an ordinary single-field index.
- If there is an array as a value for an indexed field, the index will be multikey on that field.

.. include:: /includes/student-notes.rst


Example: Array of Numbers
-------------------------

.. code-block:: javascript

    db.testcol.drop()
    db.testcol.ensureIndex( { x : 1 } )
    a = [ { x : [ 1, 2, 3 ], y : [ "a", "b" ] },
          { x : [ 3, 4 ], y : [ "a", "b" ] },
          { x : [ 4, 5 ], y : [ "a", "b" ] },
          { x : 3, y : [ "a", "b" ] }, { x : 4, y : [ "a", "b" ] } ]
    db.testcol.insert( a )        
    db.testcol.find( { x : 3 } )  
    db.testcol.find( { x : 3 } ).explain()  
    db.testcol.find( { "x.2" : 3 } )  
    db.testcol.find( { "x.2" : 3 } ).explain()  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // Used the index
         db.testcol.find( { x : 3 } ).explain()  

         // One document found.
         // Index not used, because it is naive to position.
         db.testcol.find( { "x.2" : 3 } )  


Exercise: Array of Documents, Part 1
------------------------------------

Create a collection and add an index on the ``x`` field:

.. code-block:: javascript

   db.testcol.drop()
   b = [ { x : [ { name : "Alice", number : 1 }, { name : "Bob", number : 2 },
                 { name : "Cherry", number : 3 } ] },
         { x : [ { name : "Cherry", number : 3 },
                 { name : "Dan", number : 4 } ] },
         { x : [ { name : "Dan", number : 4 },
                 { name : "Erica", number : 5 } ] },
         { x : { name : "Cherry", number : 3 } },
               { name : "Dan", number : 4 } ]
   db.testcol.insert(b)
   db.testcol.ensureIndex( { x : 1 } )
   db.testcol.find()

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - In this collection there are four documents. 
      - In each document is an array, ``x``, containing subdocuments.
      - Each subdocument has a name and number in it 
      - Always the same number for each name.


Exercise: Array of Documents, Part 2
------------------------------------

For each of the three queries below:

- How many documents will be returned?
- Will it use our multi-key index? Why or why not?
- If a query will not use the index, which index will it use?

.. code-block:: javascript

   db.testcol.find( { x : { name : "Cherry", number : 3 } } )
   db.testcol.find( { x : { number : 3 } } )
   db.testcol.find( { "x.number" : 3 } )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

     .. code-block:: javascript

        // 3 documents
        db.testcol.find( { x : { name : "Cherry", number : 3 } } )  
        // Used the multi-key index. We pass a complete document for ``x``.
        db.testcol.find( { x : { name : "Cherry", number : 3 } } ).explain()  

        // 3 documents
        db.testcol.find( { "x.number" : 3 } )  
        // Does not use the multi-key index.
        // ``x.number`` is only part of the document that is indexed.
        db.testcol.find( { "x.number" : 3 } ).explain()
     
        // We would need to add an index such as this.
        db.testcol.ensureIndex( { "x.number" : 1 } )
        db.testcol.find( { "x.number" : 3 } ).explain()  


Exercise: Array of Arrays, Part 1
---------------------------------

Add some documents and create an index:

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.ensureIndex( { x : 1 } )
   c = [ { x : [ [ 1, 2 ], [ 2, 3 ], [ 3, 4] ] }, 
         { x : [ [ 3, 4 ], [ 4, 5 ] ] },
         { x : [ [ 4, 5 ], [ 5, 6 ] ] },
         { x : [ 3, 4 ] },
         { x : [ 4, 5 ] } ] 
   db.testcol.insert(c)
   db.testcol.find()

.. include:: /includes/student-notes.rst



Exercise: Array of Arrays, Part 2
---------------------------------

For each of the queries below:

- How many documents will be returned? 
- Does the query use the multi-key index? Why or why not?
- If the query does not use the index, what is an index it could use?

.. code-block:: javascript

   db.testcol.find( { x : [ 3, 4 ] } )  
   db.testcol.find( { x : 3 } )
   db.testcol.find( { "x.1" : [ 4, 5 ] } )
   db.testcol.find( { "x.1" : 4 } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // 3 documents
         db.testcol.find( { x : [ 3, 4 ] } )  
         // Uses the multi-key index
         db.testcol.find( { x : [ 3, 4 ] } ).explain()  

         // One document found, where the element of x is just a number.
         db.testcol.find( { x : 3 } )  
         // Used the index
         db.testcol.find( { x : 3 } ).explain()  

         db.testcol.find( { "x.1" : [ 4, 5 ] } ).explain() 
         // Does not use the multi-key index, because it is naive to position.
         db.testcol.find( { "x.1" : 4 } ).explain()


How Multikey Indexes Work
-------------------------

- Each array element is given one entry in the index.
- So an array with 17 elements will have 17 entries -- one for each element.
- Multikey indexes can take up much more space than standard indexes.

.. include:: /includes/student-notes.rst



Multikey Indexes and Sorting
----------------------------

- If you sort using a multikey index:

  - A document will appear at the first position where a value would place the document. 
  - It does not appear multiple times.

- This applies to array values generally.
- It is not a specific property of multikey indexes.

.. include:: /includes/student-notes.rst


.. include:: /exercises/indexes-multikey-sorting.txt


Limitations on Multikey Indexes
-------------------------------

- You cannot create a compound index using more than one array-valued field.
- This is because of the combinatorics.
- For a compound index on two array-valued fields you would end up with N * M entries for one document.
- You cannot have a hashed multikey index.
- You cannot have a shard key use a multikey index 
- We discuss shard keys in another module.
- The index on the _id field cannot become a multikey index.

.. include:: /includes/student-notes.rst


Example: Multikey Indexes on Multiple Fields
--------------------------------------------

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.ensureIndex( { x : 1, y : 1 } )

   // no problems yet
   db.testcol.insert( { _id : 1, x : 1, y : 1 } )  

   // still OK
   db.testcol.insert( { _id : 2, x : [ 1, 2 ], y : 1 } )  

   // still OK
   db.testcol.insert( { _id : 3, x : 1, y : [ 1, 2 ] } )  

   // Won't work
   db.testcol.insert( { _id : 4, x : [ 1, 2 ], y : [ 1, 2 ] } )

.. include:: /includes/student-notes.rst

