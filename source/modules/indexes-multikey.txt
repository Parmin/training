================
Multikey Indexes
================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- What a multikey index is
- When MongoDB will use a multikey index to satisfy a query
- How multikey indexes work
- How multikey indexes handle sorting
- Some limitations on multikey indexes

.. include:: /includes/student-notes.rst


Introduction to Multikey Indexes
--------------------------------

- A multikey index is an index on an array.
- An index entry is created on each value found in the array.
- Multikey indexes can support primitives, documents, or sub-arrays.
- There is nothing special that you need to do to create a multikey index. 
- You create them using ``createIndex()`` just as you would with an ordinary single-field index.
- If there is an array as a value for an indexed field, the index will be multikey on that field.

.. include:: /includes/student-notes.rst


Example: Array of Numbers
-------------------------

.. code-block:: javascript

    db.race_results.drop()
    db.race_results.createIndex( { "lap_times" : 1 } )
    a = [ { "lap_times" : [ 3, 5, 2, 8 ] },
          { "lap_times" : [ 1, 6, 4, 2 ] },
          { "lap_times" : [ 6, 3, 3, 8 ] } ]
    db.race_results.insert( a )        

    // Used the index
    db.race_results.find( { lap_times : 1 } ).explain()  

    // One document found.
    // Index not used, because it is naive to position.
    db.race_results.find( { "lap_times.2" : 3 } ).explain()  

.. include:: /includes/student-notes.rst


Exercise: Array of Documents, Part 1
------------------------------------

Create a collection and add an index on the ``x`` field:

.. code-block:: javascript

   db.blog.drop()
   b = [ { "comments" : [ 
            { "name" : "Bob", "rating" : 1 }, 
            { "name" : "Frank", "rating" : 5.3 },
            { "name" : "Susan", "rating" : 3 } ] },
         { "comments" : [ 
            { name : "Megan", "rating" : 1 } ] },
         { "comments" : [ 
            { "name" : "Luke", "rating" : 1.4 }, 
            { "name" : "Matt", "rating" : 5 },
            { "name" : "Sue", "rating" : 7 } ] }]
   db.blog.insert(b)

   db.blog.createIndex( { "comments" : 1 } )
   // vs
   db.blog.createIndex( { "comments.rating" : 1 } )

   // for this query
   db.blog.find( { "comments.rating" : 5 })

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Note: JSON is a dictionary and doesn't guarantee order, indexing the top level array (comments array) won't work


Exercise: Array of Documents, Part 2
------------------------------------

For each of the three queries below:

- How many documents will be returned?
- Will it use our multi-key index? Why or why not?
- If a query will not use the index, which index will it use?

.. code-block:: javascript

   db.blog.find( { "comments" : { "name" : "Bob", "rating" : 1 } } )
   db.blog.find( { "comments" : { "rating" : 1 } } )
   db.blog.find( { "comments.rating" : 1 } )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

     .. code-block:: javascript

        // Never do this, won't give you the results expected
        // JSON is a dictionary, and won't preserve ordering, second query will return no results

        db.blog.find( { "comments" : { "name" : "Bob", "rating" : 1 } } )
        db.blog.find( { "comments" : { "rating" : 1 } } )


Exercise: Array of Arrays, Part 1
---------------------------------

Add some documents and create an index simulating a player in a game moving on an X,Y grid.

.. code-block:: javascript

   db.player.drop()
   db.player.createIndex( { "last_moves" : 1 } )
   c = [ { "last_moves" : [ [ 1, 2 ], [ 2, 3 ], [ 3, 4] ] }, 
         { "last_moves" : [ [ 3, 4 ], [ 4, 5 ] ] },
         { "last_moves" : [ [ 4, 5 ], [ 5, 6 ] ] },
         { "last_moves" : [ [ 3, 4 ] ] },
         { "last_moves" : [ [ 4, 5 ] ] } ] 
   db.player.insert(c)
   db.player.find()

.. include:: /includes/student-notes.rst



Exercise: Array of Arrays, Part 2
---------------------------------

For each of the queries below:

- How many documents will be returned? 
- Does the query use the multi-key index? Why or why not?
- If the query does not use the index, what is an index it could use?

.. code-block:: javascript

   db.player.find( { "last_moves" : [ 3, 4 ] } )  
   db.player.find( { "last_moves" : 3 } )
   db.player.find( { "last_moves.1" : [ 4, 5 ] } )
   db.player.find( { "last_moves.2" : [ 2, 3 ] } )

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // 3 documents
         db.player.find( { "last_moves" : [ 3, 4 ] } )  
         // Uses the multi-key index
         db.player.find( { "last_moves" : [ 3, 4 ] } ).explain()  

         // No documents
         db.player.find( { "last_moves" : 3 } )

         // Does not use the multi-key index, because it is naive to position.
         db.player.find( { "last_moves.1" : [ 4, 5 ] } )
         db.player.find( { "last_moves.2" : [ 2, 3 ] } )


How Multikey Indexes Work
-------------------------

- Each array element is given one entry in the index.
- So an array with 17 elements will have 17 entries -- one for each element.
- Multikey indexes can take up much more space than standard indexes.

.. include:: /includes/student-notes.rst



Multikey Indexes and Sorting
----------------------------

- If you sort using a multikey index:

  - A document will appear at the first position where a value would place the document. 
  - It will not appear multiple times.

- This applies to array values generally.
- It is not a specific property of multikey indexes.

.. include:: /includes/student-notes.rst


.. include:: /exercises/indexes-multikey-sorting.txt


Limitations on Multikey Indexes
-------------------------------

- You cannot create a compound index using more than one array-valued field.
- This is because of the combinatorics.
- For a compound index on two array-valued fields you would end up with N * M entries for one document.
- You cannot have a hashed multikey index.
- You cannot have a shard key use a multikey index. 
- We discuss shard keys in another module.
- The index on the ``_id`` field cannot become a multikey index.

.. include:: /includes/student-notes.rst


Example: Multikey Indexes on Multiple Fields
--------------------------------------------

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.createIndex( { x : 1, y : 1 } )

   // no problems yet
   db.testcol.insert( { _id : 1, x : 1, y : 1 } )  

   // still OK
   db.testcol.insert( { _id : 2, x : [ 1, 2 ], y : 1 } )  

   // still OK
   db.testcol.insert( { _id : 3, x : 1, y : [ 1, 2 ] } )  

   // Won't work
   db.testcol.insert( { _id : 4, x : [ 1, 2 ], y : [ 1, 2 ] } )

.. include:: /includes/student-notes.rst

