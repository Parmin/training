========
Security
========


Learning Objectives
-------------------

Upon completing this module students should understand:

- Security options for MongoDB
- Basics of native auth for MongoDB
- User roles in MongoDB
- How to manage user roles in MongoDB


Overview
--------

.. include:: /images/auth-workflow.rst

.. only:: instructor

  .. note::

    - You should only run MongoDB in a trusted environment.
    - However, MongoDB offers security features from several angles:
    
      - Authentication: Is the client who they say they are?
      - Authorization: Is the client allowed to do this?
      - Network Exposure: Is this query or login coming from the place we expect?
    
    - You are welcome to use any features you desire, or none.
    - All security is off by default.


Authentication Options
----------------------

- MONGODB-CR Authentication (username & password)
- x.509 Authentication (using x.509 Certificates)
- Kerberos (through an Enterprise subscription)
- LDAP


Authorization via MongoDB
-------------------------

- Each user has a set of potential roles

  - read, readWrite, dbAdmin, etc.

- Each role applies to *one* database

  - A single user can have roles on each database
  - Some roles apply to all databases
  - You can also create custom roles.


Network Exposure Options
------------------------

- bindIp limits the ip addresses the server listens on.
- Using a non-standard port can provide a layer of obscurity.
- MongoDB should still be run only in a trusted environment.


Encryption (SSL)
----------------

- MongoDB can be configured at build time to run with SSL.
- To get it, build from the source code with --ssl.
- Alternatively, use MongoDB Enterprise.
- Allows you to use public key encryption.
- You can also validate with x.509 certificates.


Native MongoDB Auth
-------------------

- Uses the Challenge/Response mechanism
- Sometimes called MongoDB-CR
- Start a mongod instance with ``--auth`` to enable this feature
- You can initially login using localhost
  
  - Called the "localhost exception".
  - Stops working when you create a user.

.. only:: instructor

  .. note::
     
    - Be careful to create a user who can create other users.
    - Otherwise you'll be stuck with the users you initially create.

.. include:: /exercises/security-create-useradmin.txt


Using MongoDB Roles
-------------------

- Each user logs in on *one* database.
- The user inputs their password on login.

  - Use the -u flag for username.
  - Use the -p flag to enter the password.

- userAdmins may create other users
- But they cannot read/write without other roles.

.. only:: instructor

  .. note::

    - Users must specify the db when logging in.
    - Trying to log into another db won't work
    - Users may follow ``-p`` with the password
    - They may also enter the password after hitting enter. 
    - The ``mongo`` command will prompt for the password before launching the shell.

.. include:: /exercises/security-create-readwrite.txt


MongoDB Custom User Roles
-------------------------

- You can create custom user roles in MongoDB.
- You do this by modifying the system.roles collection.
- You can also inherit privileges from other roles into a given role.
- You won't remember how to do this, so if you need it, consult the :manual:`docs </core/security-introduction/>`.
