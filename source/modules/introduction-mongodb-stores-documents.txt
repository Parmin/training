========================
MongoDB Stores Documents
========================


JSON
----

- JavaScript Object Notation
- Objects are associative arrays.
- They are composed of name/value pairs.

Example
-------

.. code-block:: javascript

   .. only:: instructor

      { 
          "firstname" : "Thomas",
          "lastname" : "Smith",
          "age" : 29
      }



JSON Field Names and Values
---------------------------

- Field names must be strings.
- Values may be any of the following:

  - string (e.g., "Thomas")
  - number (e.g., 29, 3.7)
  - true / false
  - null
  - array (e.g., [88.5, 91.3, 67.1])
  - object (See above.)

- The elements of an array may be any of the values specified above.
- More detail at json.org_.

.. _json.org: http://json.org/


Example
-------

.. code-block:: javascript

   {
       "first key" : "value" , 
       "second key : {
	   "first nested key" : "first nested value", 
	   "second nested key" : "second nested value"
	}, 
	"third_key" : [ 
	    "first array element", 
	    "second element",
	    { "nested key" : "nested value" } , 
	    [ "nested array element 1", "nested array element 2"] 
	]
   }


BSON
----

- MongoDB stores documents in a format known as "Binary JSON" (BSON).
- MongoDB drivers (client libraries) send and receive data in this format.
- The drivers abstract this fact away.
- Within your code you will work with native mappable data structures such as dictionaries. 
- BSON provides support for all JSON data types and several others. They are as follows:

  - ISODate
  - Int32
  - Int64
  - Double
  - ObjectId
  - Binary
- See bsonspec.org_.

.. _bsonspec.org: http://bsonspec.org/#/specification


BSON Hello World
----------------

.. code-block:: javascript

   // JSON
   { "hello" : "world" }

   // BSON
   "\x16\x00\x00\x00\x02hello\x00 
    \x06\x00\x00\x00world\x00\x00"


.. only:: instructor

   .. note::

      - \\x16\\x00\\x00\\x00 (document size) 
      - \\x02 = string (data type of field value)
      - hello\\x00 (key/field name, \\x00 is null and delimits the end of the name)
      - \\x06\\x00\\x00\\x00 (size of field value including end null)
      - world\\x00 (field value) 
      - \\x00 (end of the document)


A More Complex BSON Example
---------------------------

.. code-block:: javascript

   // JSON
   { "favoriteThings" : [ "awesome", 5.05, 1986 ] }

   // BSON
   "\x3b\x00\x00\x00\x04BSON\x00\x26\x00 
    \x00\x00\x020\x00\x08\x00\x00 
    \x00awesome\x00\x011\x00\x33\x33\x33\x33\x33\x33 
    \x14\x40\x102\x00\xc2\x07\x00\x00 
    \x00\x00"


Documents, Collections, and Databases
-------------------------------------

- Documents are stored in collections.
- Collections are contained in a database. 
- Example:

  - Database: products
  - Collections: books, movies, music

- Each database-collection combination defines a namespace, e.g.:

  - products.books 
  - products.movies
  - products.music


The ``_id`` Field
-----------------



- All documents must have an ``_id`` field.
- The ``_id`` is immutable.
- If no ``_id`` is specified when a document is inserted, MongoDB will add the _id field.
- MongoDB assigns a unique ObjectId as the value of _id.
- Most drivers will actually create the ObjectId if no _id is specified.
- The ``_id`` field is unique to a collection (namespace).


ObjectIds
---------

TODO: REPLACE WITH FIGURE.

.. figure:: /figures/figure_id_values.jpg
    :width: 500px

.. only:: instructor

   .. note::

      - An ObjectId is a 12-byte value. 
      - The first 4 bytes will be a datetime reflecting when the ObjectID was created. 
      - The next 3 bytes will be a MAC address.
      - Then a 2-byte process ID
      - And, finally, 3 bytes that are monotonically increasing for each new ObjectId created within a collection. 


Storing BSON Documents
----------------------

- Each document may be a different size from the others.
- Documents are physically adjacent to each other on disk and in memory.
- If a document is updated in a way that makes it larger, MongoDB may move the document. 
- This may cause fragmentation, resulting in unnecessary I/O.  
- We have strategies to reduce the effects of document growth:
  - Padding factor
  - usePowerOf2Sizes


Padding Factor
--------------  

- MongoDB will pad a document with extra bytes if documents in a collection have been observed to grow.  
- The ``padding factor`` is a multiplier that defaults to 1 (no padding).
- As documents in a collection grow and need to be moved, MongoDB will begin to add padding.
- At a padding factor of 2, the document will be inserted at twice its actual size.
- Padding provides room for documents to grow into.
- With padding, documents will not be as likely to move after update operations providing room to grow into.  
- This setting is not tunable; it is updated automatically.

TODO: Insert a figure that illustrates padding factor.


``usePowerOf2Sizes``
--------------------

- When a document must move to a new location this leaves a fragment.  
- MongoDB will attempt to fill this fragment with a new document eventually.  
- As of MongoDB 2.6, collections have a setting called "usePowerOf2Sizes" enabled by default.  
- This setting will round the size of the document up to the next power of 2. 
- For example, a document that 118 bytes will be allocated 128 bytes. 
- Power of two sizes make it easier for MongoDB to find new document to fill fragmented space. 
- This results in less overall fragmentation.  

.. only:: instructor

   .. note::

      - This is analogous to a building a wall from stone vs. brick.  
      - If a stone crumbled it would prove difficult to find a new stone to fill the space. Replacing a brick, however, is easy.
      - Power of two sizing was introduced in MongoDB 2.4, but must be enabled using the colMod operation.  
      - If a collection is read only, users should disable usePowerof2Sizes in MongoDB 2.6 and above. 

TODO: Insert a figure that illustrates usePowerOf2Sizes


