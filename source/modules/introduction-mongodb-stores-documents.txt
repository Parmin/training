========================
MongoDB Stores Documents
========================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- JSON
- BSON basics
- That documents are organized into collections
- ObjectIds
- Padding Factor

.. include:: /includes/student-notes.rst


JSON
----

- JavaScript Object Notation
- Objects are associative arrays.
- They are composed of key-value pairs.

.. include:: /includes/student-notes.rst


A Simple JSON Object
--------------------

.. code-block:: javascript

      {
          "firstname" : "Thomas",
          "lastname" : "Smith",
          "age" : 29
      }

.. include:: /includes/student-notes.rst



JSON Keys and Values
--------------------

- Keys must be strings.
- Values may be any of the following:

  - string (e.g., "Thomas")
  - number (e.g., 29, 3.7)
  - true / false
  - null
  - array (e.g., [88.5, 91.3, 67.1])
  - object

- More detail at json.org_.

.. _json.org: http://json.org/

.. include:: /includes/student-notes.rst



Example Field Values
--------------------

.. code-block:: javascript

  {
    "headline" : "Apple Reported Second Quarter Revenue Today",
    "date" : ISODate("2015-03-24T22:35:21.908Z"),
    "views" : 1234,
    "author" : {
      "name" : "Bob Walker",
      "title" : "Lead Business Editor"
    },
    "tags" : [
      "AAPL",
      23,
      { "name" : "city", "value" : "Cupertino" },
      [ "Electronics", "Computers" ]
    ]
  }

.. include:: /includes/student-notes.rst


BSON
----

- MongoDB stores data as Binary JSON (BSON).
- MongoDB drivers send and receive data in this format.
- They map BSON to native data structures.
- BSON provides support for all JSON data types and several others.
- BSON was designed to be lightweight, traversable and efficient.
- See bsonspec.org_.

.. _bsonspec.org: http://bsonspec.org/#/specification

.. only:: instructor

   .. note::

      E.g., a BSON object will be mapped to a dictionary in Python.

.. include:: /includes/student-notes.rst


BSON Hello World
----------------

.. code-block:: javascript

   // JSON
   { "hello" : "world" }

   // BSON
   "\x16\x00\x00\x00\x02hello\x00
    \x06\x00\x00\x00world\x00\x00"

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - \\x16\\x00\\x00\\x00 (document size)
      - \\x02 = string (data type of field value)
      - hello\\x00 (key/field name, \\x00 is null and delimits the end of the name)
      - \\x06\\x00\\x00\\x00 (size of field value including end null)
      - world\\x00 (field value)
      - \\x00 (end of the document)


A More Complex BSON Example
---------------------------

.. code-block:: javascript

   // JSON
   { "BSON" : [ "awesome", 5.05, 1986 ] }

   // BSON
   "\x3b\x00\x00\x00\x04BSON\x00\x26\x00
    \x00\x00\x020\x00\x08\x00\x00
    \x00awesome\x00\x011\x00\x33\x33\x33\x33\x33\x33
    \x14\x40\x102\x00\xc2\x07\x00\x00
    \x00\x00"

.. include:: /includes/student-notes.rst


Documents, Collections, and Databases
-------------------------------------

- Documents are stored in collections.
- Collections are contained in a database.
- Example:

  - Database: products
  - Collections: books, movies, music

- Each database-collection combination defines a namespace.

  - products.books
  - products.movies
  - products.music

.. include:: /includes/student-notes.rst


The ``_id`` Field
-----------------

- All documents must have an ``_id`` field.
- The ``_id`` is immutable.
- If no ``_id`` is specified when a document is inserted, MongoDB will add the ``_id`` field.
- MongoDB assigns a unique ObjectId as the value of ``_id``.
- Most drivers will actually create the ObjectId if no ``_id`` is specified.
- The ``_id`` field is unique to a collection (namespace).

.. include:: /includes/student-notes.rst


ObjectIds
---------

.. include:: /images/objectId.rst

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - An ObjectId is a 12-byte value.
      - The first 4 bytes are a datetime reflecting when the ObjectID was created.
      - The next 3 bytes are the MAC address of the server.
      - Then a 2-byte process ID
      - Finally, 3 bytes that are monotonically increasing for each new ObjectId created within a collection.


