========================
MongoDB Stores Documents
========================


Learning Objectives
-------------------

Upon completing this module, students should understand:

- JSON
- BSON basics
- That documents are organized into collections
- ObjectIds
- Padding Factor

.. include:: /includes/student-notes.rst


JSON
----

- JavaScript Object Notation
- Objects are associative arrays.
- They are composed of key-value pairs.

.. include:: /includes/student-notes.rst


A Simple JSON Object
--------------------

.. code-block:: javascript

      { 
          "firstname" : "Thomas",
          "lastname" : "Smith",
          "age" : 29
      }

.. include:: /includes/student-notes.rst



JSON Keys and Values
--------------------

- Keys must be strings.
- Values may be any of the following:

  - string (e.g., "Thomas")
  - number (e.g., 29, 3.7)
  - true / false
  - null
  - array (e.g., [88.5, 91.3, 67.1])
  - object

- More detail at json.org_.

.. _json.org: http://json.org/

.. include:: /includes/student-notes.rst



Example Field Values
--------------------

.. code-block:: javascript

   {
       "first key" : "value" , 
       "second key" : {
	   "first embedded key" : "first embedded value", 
	   "second embedded key" : "second embedded value"
	}, 
	"third key" : [ 
	    "first array element", 
	    "second element",
	    { "embedded key" : "embedded value" }, 
	    [ 1, 2 ] 
	]
   }

.. include:: /includes/student-notes.rst


BSON
----

- MongoDB stores data as Binary JSON (BSON).
- MongoDB drivers send and receive data in this format.
- They map BSON to native data structures.
- BSON provides support for all JSON data types and several others.
- BSON was designed to be lightweight, traversable and efficient.
- See bsonspec.org_.

.. _bsonspec.org: http://bsonspec.org/#/specification

.. only:: instructor

   .. note::

      E.g., a BSON object will be mapped to a dictionary in Python.      

.. include:: /includes/student-notes.rst


BSON Hello World
----------------

.. code-block:: javascript

   // JSON
   { "hello" : "world" }

   // BSON
   "\x16\x00\x00\x00\x02hello\x00 
    \x06\x00\x00\x00world\x00\x00"

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - \\x16\\x00\\x00\\x00 (document size) 
      - \\x02 = string (data type of field value)
      - hello\\x00 (key/field name, \\x00 is null and delimits the end of the name)
      - \\x06\\x00\\x00\\x00 (size of field value including end null)
      - world\\x00 (field value) 
      - \\x00 (end of the document)


A More Complex BSON Example
---------------------------

.. code-block:: javascript

   // JSON
   { "BSON" : [ "awesome", 5.05, 1986 ] }

   // BSON
   "\x3b\x00\x00\x00\x04BSON\x00\x26\x00 
    \x00\x00\x020\x00\x08\x00\x00 
    \x00awesome\x00\x011\x00\x33\x33\x33\x33\x33\x33 
    \x14\x40\x102\x00\xc2\x07\x00\x00 
    \x00\x00"

.. include:: /includes/student-notes.rst


Documents, Collections, and Databases
-------------------------------------

- Documents are stored in collections.
- Collections are contained in a database. 
- Example:

  - Database: products
  - Collections: books, movies, music

- Each database-collection combination defines a namespace.

  - products.books 
  - products.movies
  - products.music

.. include:: /includes/student-notes.rst


The ``_id`` Field
-----------------

- All documents must have an ``_id`` field.
- The ``_id`` is immutable.
- If no ``_id`` is specified when a document is inserted, MongoDB will add the ``_id`` field.
- MongoDB assigns a unique ObjectId as the value of ``_id``.
- Most drivers will actually create the ObjectId if no ``_id`` is specified.
- The ``_id`` field is unique to a collection (namespace).

.. include:: /includes/student-notes.rst


ObjectIds
---------

.. figure:: /images/objectId.png
   :width: 800
   :align: center

.. include:: /includes/student-notes.rst
   

.. only:: instructor

   .. note::

      - An ObjectId is a 12-byte value. 
      - The first 4 bytes are a datetime reflecting when the ObjectID was created. 
      - The next 3 bytes are the MAC address of the server.
      - Then a 2-byte process ID
      - Finally, 3 bytes that are monotonically increasing for each new ObjectId created within a collection. 


Storing BSON Documents
----------------------

- Each document may be a different size from the others.
- The maximum BSON document size is 16 megabytes.
- Documents are physically adjacent to each other on disk and in memory.
- If a document is updated in a way that makes it larger, MongoDB may move the document. 
- This may cause fragmentation, resulting in unnecessary I/O.  
- Strategies to reduce the effects of document growth:

  - Padding factor
  - ``usePowerOf2Sizes``

.. include:: /includes/student-notes.rst


Padding Factor
--------------  

.. figure:: /images/padding.png
   :width: 800
   :align: center

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. notes::

      - Padding provides room for documents to grow into.
      - As documents in a collection grow and need to be moved, MongoDB will begin to add padding.
      - With padding, documents will not be as likely to move after update operations.
      - The ``padding factor`` is a multiplier that defaults to 1 (no padding).
      - At a padding factor of 2, the document will be inserted at twice its actual size.
      - This setting is not tunable; it is updated automatically.


``usePowerOf2Sizes``
--------------------

- When a document must move to a new location this leaves a fragment.  
- MongoDB will attempt to fill this fragment with a new document eventually.  
- As of MongoDB 2.6, collections have a setting called ``usePowerOf2Sizes`` enabled by default for newly created collections.  
- This setting will round the size of the document up to the next power of 2. 
- E.g, a document that 118 bytes will be allocated 128 bytes. 
- If moved, the space can be filled with two 64-byte documents, four 32-byte documents, etc.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Power of two sizes makes it easier for MongoDB to find new document to fill fragmented space. 
      - Power of two sizing was introduced in MongoDB 2.4, but must be enabled using the colMod operation.  
      - If a collection is read only, users should disable ``usePowerof2Sizes`` in MongoDB 2.6 and above. 
