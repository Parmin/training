======================================
The Oplog: Statement Based Replication
======================================

Learning Objectives
-------------------

Upon completing this module students should understand:

- Binary vs. statement-based replication.
- How the oplog is used to support replication.
- How operations in MongoDB are translated into operations written to the oplog.
- Why oplog operations are idempotent.
- That the oplog is a capped collection and the implications this holds for syncing members.


Binary Replication
------------------

- MongoDB replication is statement based.
- Contrast that with binary replication.
- With binary replication we would keep track of:

  - The data files
  - The offsets
  - How many bytes were written for each change

- In short, we would keep track of actual bytes and very specific locations.
- We would simply replicate these changes across secondaries.

Tradeoffs
---------

- The good thing is that figuring out where to write, etc. is very efficient.
- But we must have a byte-for-byte match of our data files on the primary and secondaries.
- The problem is that this couples our replica set members in ways that are inflexible.

.. only:: instructor

   .. note::

      - Some deployments might need to run different versions of MongoDB on different nodes.
      - Different versions of MongoDB might write to different file offsets.
      - We might need to run a compaction or repair on a secondary.
      - In many cases we want to do these types of maintenance tasks independently of other nodes.


Statement-Based Replication
---------------------------

- Statement-based replication facilitates greater independence among members of a replica set.
- MongoDB stores a statement for every operation in a capped collection called the ``oplog``.
- Secondaries do not simply apply exactly the operation that was issued on the primary.

Example
-------

Suppose the following remove is issued and it deletes 100 documents:

.. code-block:: javascript

   db.foo.remove({ age : 30 })

This will be represented in the oplog with records such as the following:

.. code-block:: javascript

   { "ts" : Timestamp(1407159845, 5), "h" : NumberLong("-704612487691926908"),  "v" : 2, "op" : "d", "ns" : "bar.foo", "b" : true, "o" : { "_id" : 65 } }
   { "ts" : Timestamp(1407159845, 1), "h" : NumberLong("6014126345225019794"),  "v" : 2, "op" : "d", "ns" : "bar.foo", "b" : true, "o" : { "_id" : 333 } }
   { "ts" : Timestamp(1407159845, 4), "h" : NumberLong("8178791764238465439"),  "v" : 2, "op" : "d", "ns" : "bar.foo", "b" : true, "o" : { "_id" : 447 } }
   { "ts" : Timestamp(1407159845, 3), "h" : NumberLong("-1707391001705528381"), "v" : 2, "op" : "d", "ns" : "bar.foo", "b" : true, "o" : { "_id" : 1033 } }
   { "ts" : Timestamp(1407159845, 2), "h" : NumberLong("-6814297392442406598"), "v" : 2, "op" : "d", "ns" : "bar.foo", "b" : true, "o" : { "_id" : 9971 } }


Replication Based on the Oplog
------------------------------

- One statement per document affected by each write: insert, update, or delete.
- Provides a level of abstraction that enables independence among the members of a replica set:

  - With regard to MongoDB version.
  - In terms of how data is stored on disk.
  - Freedom to do maintenance without the need to bring the entire set down.

.. only:: instructor

   .. note::

      - In the next exercise, we will see that the oplog is designed so that each statement is idempotent.
      - This feature has several benefits for independent operation of nodes in replica sets.


.. include:: /exercises/replica-set-oplog.txt


Operations in the Oplog are Idempotent
--------------------------------------

- Each operation in the oplog is idempotent.
- Whether applied once or multiple times it produces the same result.
- Necessary if you want to be able to copy data while simultaneously accepting writes.

.. only:: instructor

   .. notes::

      We need to be able to copy while accepting writes when:

      - Doing an initial sync for a new replica set member.
      - When a member rejoins a replica set after a network partition a member might end up writing operations it had already received prior to the partition.


The Oplog Window
----------------

- Oplogs are capped collections.
- Capped collections are fixed-size.
- They guarantee preservation of insertion order.
- They support high-throughput operations.
- Like circular buffers, once a collection fills its allocated space:

  - It makes room for new documents.
  - By overwriting the oldest documents in the collection.


Sizing the Oplog
----------------
- The oplog should be sized to account for latency among members.
- The default size oplog is usually sufficient.
- But you want to make sure that your oplog is large enough:

  - So that the oplog window is large enough to support replication
  - To give you a large enough history for any diagnostics you might wish to run.

