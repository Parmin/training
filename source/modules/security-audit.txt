========
Auditing
========


Learning Objectives
-------------------

Upon completing this module, you should be able to:

- Outline the auditing capabilities of MongoDB
- Enable auditing
- Summarize auditing configuration options

.. include:: /includes/student-notes.rst


Auditing
--------

- MongoDB Enterprise includes an auditing capability for mongod and mongos instances.
- The auditing facility allows administrators and users to track system activity
- Important for deployments with multiple users and applications.

.. include:: /includes/student-notes.rst

Audit Events
------------

Once enabled, the auditing system can record the following operations:

- Schema
- Replica set and sharded cluster
- Authentication and authorization
- CRUD operations (DML, off by default)


Auditing Configuration
----------------------

The following are command-line parameters to ``mongod``/``mongos`` used to configure auditing. Enable auditing with ``--auditDestination``.

- ``--auditDestination``: where to write the audit log

  - syslog
  - console
  - file

- ``--auditPath``: audit log path in case we define "file" as the destination
- ``--auditFormat``: the output format of the emitted event messages

  - BSON
  - JSON

- ``--auditFilter``: an expression that will filter the types of events the system records

By default we only audit DDL operations but we can also enable DML (requires auditAuthorizationSuccess set to true)

.. only:: instructor

  .. note::

    - Explain what DML and DDL operations are:

      - DML means data manipulation language (inserts, updates, removes, grant user role ...)
      - DDL means data definition language (create collection, index, drop database ...)

    - Q: Why do we not enable DML by default?
    - A: Due to the performance impact of logging all write operations
    - Q: In what circumstances might we want to enable DML?
    - A: On highly sensitive namespaces or for given set of users.

.. include:: /includes/student-notes.rst


Auditing Message
----------------

The audit facility will launch a message every time an auditable event occurs:

.. code-block:: json

  {
    atype: <String>,
    ts : { "$date": <timestamp> },
    local: { ip: <String>, port: <int> },
    remote: { ip: <String>, port: <int> },
    users : [ { user: <String>, db: <String> }, ... ],
    roles: [ { role: <String>, db: <String> }, ... ],
    param: <document>,
    result: <int>
  }

.. include:: /includes/student-notes.rst


Auditing Configuration
----------------------

If we want to configure our audit system to generate a `JSON` file we would
need express the following command:

.. code-block:: bash

  mongod --auditDestination file --auditPath /some/dir/audit.log --auditFormat JSON

If we want to capture events from a particular user `myUser`:

.. code-block:: bash

  mongod --auditDestination syslog --auditFilter '{"users.user": "myUser"}'

To enable DML we need to set a specific parameter:

.. code-block:: bash

  mongod --auditDestination console --setParameter auditAuthorizationSuccess=true

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - We can define filters on any particular field of the audit message
    - These will work as regular MongoDB query filter expressions, but not all operators will apply.
    - Be creative and ask students to set different filters based on roles or incoming connections.
