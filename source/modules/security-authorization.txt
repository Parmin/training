=============
Authorization
=============


Learning Objectives
-------------------

Upon completing this module, students should be able to:

- Outline MongoDB's authorization model
- List authorization resources
- Describe actions users can take in relation to resources
- Create roles
- Create privileges
- Outline MongoDB built-in roles
- Grant roles to users
- Explain LDAP authorization 

.. include:: /includes/student-notes.rst


Authorization vs Authentication
-------------------------------

Authorization and Authentication are generally confused and misinterpreted
concepts:

- Authorization defines the rules by which users can interact with a given
  system:

  - Which operations can they perform
  - Over which resources

- Authentication is the mechanism by which users identify and are granted access
  to a system:

  - Validation of credentials and identities
  - Controls access to the system and operational interfaces

.. include:: /includes/student-notes.rst


Authorization Basics
--------------------

- MongoDB enforces a role-based authorization model.
- A user is granted roles that determine the user's access to database resources
  and operations.

The model determines:
  - Which roles are granted to users
  - Which privileges are associated with roles
  - Which actions can be performed over different resources

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - You can bring up the following questions:

      - What are privileges?
      - What kind of resources can be found on a typical database?

    - Have some open discussion about what defines an action.
    - Also you can take the opportunity to give examples of different roles in a
      company and how they are organized in terms of procedures and resources.


What is a resource?
-------------------

- Databases?
- Collections?
- Documents?
- Users?
- Nodes?
- Shard?
- Replica Set?

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - A resource is a database, collection, set of collections, or the cluster.
      - If the resource is the cluster, the affiliated actions affect the state
        of the system rather than a specific database or collection.


Authorization Resources
-----------------------

- Databases
- Collections
- Cluster

.. include:: /includes/student-notes.rst

Cluster Resources
-----------------

.. include:: /images/sharded-cluster-production-architecture.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Given the distributed nature of our database, MongoDB includes the cluster
      resource in the authorization module.
    - Replica sets and shards comprise the cluster domain.


Types of Actions
----------------

Given a resource, we can consider the available actions:

- Query and write actions
- Database management actions
- Deployment management actions
- Replication actions
- Sharding actions
- Server administration actions
- Diagnostic actions
- Internal actions

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    - Actions are the operations that one can perform on database resources.
    - The actions above are grouped by purpose.
    - This organization is logical, not operational.
    - Here we can ask the students which common operations they are familiar
      with while operating with a database and how those translate to MongoDB
      operations.


Specific Actions of Each Type
-----------------------------

.. list-table::
   :header-rows: 1
   :widths: 50 50 50

   * - Query / Write
     - Database Mgmt
     - Deployment Mgmt
   * - find
     - enableProfiler
     - planCacheRead
   * - insert
     - createIndex
     - storageDetails
   * - remove
     - createCollection
     - authSchemaUpgrade
   * - update
     - changeOwnPassword
     - killop
   * -
     - ...
     - ...

See the `complete list of actions <https://docs.mongodb.com/manual/reference/privilege-actions/>`_
in the MongoDB documentation.

.. include:: /includes/student-notes.rst

.. only:: instructor

 .. note::

   These are just a few examples of the list of actions available.
   The full list is available in MongoDB docs:
   https://docs.mongodb.org/v3.0/reference/privilege-actions/#privilege-actions


Authorization Privileges
------------------------

A privilege defines a pairing between a resource as a set of permitted actions.

Resource:

.. code-block:: javascript

  {"db": "yourdb", "collection": "mycollection"}

Action: ``find``

Privilege:

.. code-block:: javascript

  {
    resource: {"db": "yourdb", "collection": "mycollection"},
    actions: ["find"]
  }

.. only:: instructor

   .. note::

      - We want to explain that we can set a privilege that enables multiple
        actions on a given resource.
      - Also important to highlight that we can set `loose` resources like
        ``all databases`` or ``all collections``

     .. code-block:: javascript

       {
         resource: {"db": "", "collection": ""},
         actions: ["find", "insert"]
       }

.. include:: /includes/student-notes.rst


Authorization Roles
-------------------

MongoDB grants access to data through a role-based authorization system:

  - Built-in roles: pre-canned roles that cover the most common sets of
    privileges users may require

  - User-defined roles: if there is a specific set of privileges not covered by
    the existing built-in roles you are able to create your own roles

.. include:: /includes/student-notes.rst


Built-in Roles
--------------

.. list-table::
   :header-rows: 1
   :widths: 30 30 30

   * - Database Admin
     - Cluster Admin
     - All Databases
   * - dbAdmin
     - clusterAdmin
     - readAnyDatabase
   * - dbOwner
     - clusterManager
     - readWriteAnyDatabase
   * - userAdmin
     - clusterMonitor
     - userAdminAnyDatabase
   * -
     - hostManager
     - dbAdminAnyDatabase

.. list-table::
  :header-rows: 1
  :widths: 30 30

  * - Database User
    - Backup & Restore
  * - read
    - backup
  * - readWrite
    - restore

.. list-table::
  :header-rows: 1
  :widths: 30 30

  * - Superuser
    - Internal
  * - root
    - __system

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    Built-in roles have been created given the generic users that interact
    with a database and their respective tasks.

    - Database user roles: should be granted to application-side users;
    - Database administrators: roles conceived for system administrator, DBAs
      and security officers
    - Cluster Administrator roles: mostly for system administrators and DBAs;
      individuals that will deal with the overall administration of deployments
    - Backup and Restore: for applications that perform only backup and restore
      operations (for example: Cloud and Ops Manager)
    - All Database Roles: for global administrators of a deployment. If you want
      to avoid granting the same role for every single database
    - Superuser: root level operations. Generally the first user that you create
      on any give system should probably have a root role and then add other
      specific users.
    - Internal: it’s documented, it’s public but don’t mention it too much. This
      a backdoor that only the cluster members (other replica set members, or a
      mongos) should have access to. Do not assign this role to user objects
      representing applications or human administrators.


Built-in Roles
--------------

To grant roles while creating an user:

.. code-block:: javascript

  use admin
  db.createUser(
    {
      user: "myUser",
      pwd: "$up3r$3cr7",
      roles: [
        {role: "readAnyDatabase", db: "admin"},
        {role: "dbOwner", db: "superdb"},
        {role: "readWrite", db: "yourdb"}
      ]
    }
  )

.. include:: /includes/student-notes.rst


Built-in Roles
--------------

To grant roles to existing user:

.. code-block:: javascript

  use admin
  db.grantRolesToUser(
    "reportsUser",
    [
      { role: "read", db: "accounts" }
    ]
  )

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    ``grantRolesToUser`` also allows to specify a ``writeConcern`` to ensure the
    durability of the operation, as any of the remaining authz methods.

    .. code-block:: javascript

      db.grantRolesToUser(
        "reportsUser",
        [
          { role: "read", db: "accounts" }
        ],
        { w: "majority" , wtimeout: 4000 }
      )

User-defined Roles
------------------

- If no suitable built-in role exists, we can can create a role.
- Define:

  - Role name
  - Set of privileges
  - List of inherit roles (optional)

.. code-block:: javascript

  use admin
  db.createRole({
    role: "insertAndFindOnlyMyDB",
    privileges: [
      {resource: { db: "myDB", collection: "" }, actions: ["insert", "find"]}
    ],
    roles: []})

.. include:: /includes/student-notes.rst


Role Privileges
---------------

To check the privileges of any particular role we can get that information using
the ``getRole`` method:

.. code-block:: javascript

  db.getRole("insertAndFindOnlyMyDB", {showPrivileges: true})


.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    There are many other authorization and user management commands and options
    that you should get your students acquainted with. All of those can be found
    in the `security reference <https://docs.mongodb.org/manual/reference/security/>`_

    The output of this slide command is should be similar to the following:

    .. code-block:: javascript

      {
      "role": "insertAndFindOnlyMyDB",
      "db": "admin",
      "isBuiltin": false,
      "roles": [ ],
      "inheritedRoles": [ ],
      "privileges": [
        {
          "resource": {
            "db": "myDB",
            "collection": ""
          },
          "actions": [
            "find",
            "insert"
          ]
        }
      ],
      "inheritedPrivileges": [
        {
          "resource": {
            "db": "myDB",
            "collection": ""
          },
          "actions": [
            "find",
            "insert"
          ]
        }
       ]
      }


LDAP Authorization
------------------

As of MongoDB 3.4, MongoDB supports *authorization* with LDAP.

**How it works:**

1. User authenticates via an external mechanism
2. Username is tranformed into LDAP query

   .. code-block:: javascript

     [
       {
         match: "(.+)@ENGINEERING",
         substitution: "cn={0},ou=engineering,dc=example,dc=com"
       }, {
         match: "(.+)@DBA", 
         substitution:"cn={0},ou=dba,dc=example,dc=com"
       }
     ]

.. include:: /includes/student-notes.rst

LDAP Authorization
------------------

3. MongoDB queries the LDAP server

   - A single entity's attributes are treated as the user's roles
   - Multiple entitiy's distinguished names are treated as the user's roles

.. include:: /includes/student-notes.rst

Mongoldap
---------

``mongoldap`` can be used to test configurations between MongoDB and an LDAP
server

.. code-block:: bash

  $ mongoldap -f mongod.conf \
              --user "uid=alice,ou=Users,dc=example,dc=com" \
              --password secret

.. include:: /includes/student-notes.rst
