=================
Reading Documents
=================

Learning Objectives
-------------------

Upon completing this module students should understand:

- The query-by-example paradigm of MongoDB
- How to query on array elements
- How to query embedded documents using dot notation
- How the mongo shell and drivers use cursors
- Projections
- Cursor methods: ``.count()``, ``.sort()``, ``.skip()``, ``.limit()``

.. include:: /includes/student-notes.rst


The ``find()`` Method
---------------------

- This is the fundamental method by which we read data from MongoDB.
- We have already used it in its basic form.
- ``find()`` returns a cursor that enables us to iterate through all documents matching a query.
- We will discuss cursors later.

.. include:: /includes/student-notes.rst


Query by Example
----------------

- To query MongoDB, specify a document containing the key / value pairs you want to match
- You need only specify values for fields you care about.
- Other fields will not be used to exclude documents.
- The result set will include all documents in a collection that match.

.. include:: /includes/student-notes.rst


Exercise: Querying by Example
-----------------------------

Experiment with the following sequence of commands.

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.insert( [ { _id : 1, a : 5, b : 3 },
                        { _id : 3, b : 5, c : 12 },
                        { a : 7, b : 3 },
                        { c : 5, b : 7 } ] )
   db.testcol.find()

   db.testcol.find( { a : 5 } )

   db.testcol.find( { b : 3, a : 7 } )

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      Matching Rules:

      - Any field specified in the query must be in each document returned.
      - Values for returned documents must match the conditions specified in the query document.
      - If multiple fields are specified, all must be present in each document returned.
      - Think of it as a logical AND for all fields.



Querying Arrays
---------------

- In MongoDB you may query array fields.
- Specify a single value you expect to find in that array in desired documents.
- Alternatively, you may specify an entire array in the query document.
- As we will see later, there are also several operators that enhance our ability to query array fields.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Students might find it helpful to think of an array field as having multiple values -- one for each of its elements.


Exercise: Querying Arrays
-------------------------

Experiment with the following sequence of commands.

.. code-block:: javascript

   db.testcol.drop()
   db.testcol.insert( [ { a : [ 1, 2, 3 ] },
                        { a : [ 3, 4, 5 ] },
                        { a : [ 5, 6, 7 ] } ] )

    // These match documents where a contains the value specified
    db.testcol.find( { a : 3 } )
    db.testcol.find( { a : 5 } )

    // These match documents where a equals the value specified
    db.testcol.find( { a : [ 3, 5 ] } )  // no documents
    db.testcol.find( { a : [ 3, 4, 5 ] } )  // only the second document

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      Later, we'll see operators that will allow us to do things like match all documents where an array field contains any of a set of values.


Querying with Dot Notation
--------------------------

- Dot notation is used to query on fields in embedded documents.
- The syntax is:

  .. code-block:: javascript 

     "field1.field2" : value

- Put quotes around the field name when using dot notation.

.. include:: /includes/student-notes.rst


Exercise: Querying with Dot Notation
------------------------------------

.. code-block:: javascript

   db.buildings.insert( 
       [ { 
             type : "house", 
             location : { streetNumber : 123, 
                          street : "7th Ave" } },
         { 
             type : "office", 
             location : { streetNumber : 234, 
                          street : "7th Ave", 
                          floor : 7 } }, 
         { 
             type : "apartment", 
             location : { streetNumber : 335, 
                          street : "43rd Street", 
                          number : 745 } } ] )

   db.buildings.find( { "location.street" : "7th Ave" } ) // Two matches 

.. include:: /includes/student-notes.rst


Exercise: Arrays and Dot Notation
---------------------------------

Experiment with the following commands.

.. code-block:: javascript

   db.things.insert( [ 
       { type : "fruit", 
         examples : [ { type : "banana", color : "yellow" },
                      { type : "apple", color : "red" }, 
                      { type : "mango", color : "red" } ] },
       { type : "cars", 
         examples : [ { model : "Camaro", color : "red" },
                      { model : "Pinto", color : "yellow" },
                      { model : "Tacoma", color : "blue" } ] },
       { type : "planets", 
         examples : [ { name : "Mars", color : "red" },
                      { name : "Venus", color : "blue" }, 
                      { name : "Earth", color : "blue" } ] } ] )

    db.things.find( { "examples.color" : "blue" } ) // two documents

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - This query finds documents where:

        - There is an ``examples`` field.
        - The ``examples`` field contains one or more embedded documents.
        - At least one embedded document has a field ``color``.
        - The field ``color`` has the specified value ("blue").

      - In this collection, ``examples`` is actually an array field.
      - The embedded documents we are matching are held within these arrays.


Projections
-----------

- You may choose to have only certain fields appear in result documents.
- This is called projection.
- You specify a projection by passing a second parameter to ``find()``.

.. include:: /includes/student-notes.rst


Projection: Example
-------------------

.. code-block:: javascript

   db.people.findOne( { price : { $lt : 300 } } )
   {
	   "_id" : 1,
	   "product" : "ePod",
	   "price" : 200,
	   "reviews" : [
		   {
			   "user" : "fred",
			   "comment" : "OK!",
			   "rating" : 5
		   }
	   ]
   }     

   db.people.findOne( { price : { $lt : 300 } }, { product : 1, price : 1 } )
   {
	   "_id" : 1,
	   "product" : "ePod",
	   "price" : 200,
   }     

.. include:: /includes/student-notes.rst


Projection Documents
--------------------   
  
- Include fields with ``fieldName: 1``.

  - Any field not named will be excluded
  - except _id, which must be explicitly excluded.

- Exclude fields with ``fieldName: 0``. 

  - Any field not named will be included.

.. include:: /includes/student-notes.rst


Exercise: Projections
---------------------

.. code-block:: javascript

   for (i=1; i<=20; i++) { 
       db.proj.insert( { _id : i, a : i, b : i, c: i } )
   }
   db.proj.find()
   db.proj.find( { _id : 3 }, { a : 1, b : 1 } ) // no c
   db.proj.find( { _id : { $gte : 10 } }, { b : 0 } ) // no b
   db.proj.find( { _id : 4 }, { _id : 0, a : 1 } ) // just a
   db.proj.find( { _id : 5 }, { _id : 0, a : 0 } ) // just b, c
   db.proj.find( { _id : 6 }, { a : 1, b : 0 } ) // illegal
   db.proj.drop()

.. only:: instructor

   The last ``find()`` fails because MongoDB cannot determine how to handle unnamed fields such as ``c``.

.. include:: /includes/student-notes.rst


Cursors
-------

- When you use ``find()``, MongoDB returns a cursor.
- A cursor is a pointer to the result set
- You can get iterate through documents in the result using ``next()``.
- By default, the mongo shell will iterate through 20 documents at a time.

.. include:: /includes/student-notes.rst


Exercise: Introducing Cursors
-----------------------------

Experiment with the following commands.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=10000; i++) { 
       db.testcol.insert( { a : Math.floor( Math.random() * 100 + 1 ),
                            b : Math.floor( Math.random() * 100 + 1 ) } )
   }
   db.testcol.find()  
    
   it  
   it  

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - With the ``find()`` above, the shell iterates over the first 20 documents. 
      - ``it`` causes the shell to iterate over the next 20 documents.
      - Can continue issuing ``it`` commands until all documents are seen.


Exercise: Cursor Objects in the Mongo Shell
-------------------------------------------

.. code-block:: javascript

   // Assigns the cursor returned by find() to a variable x
   var x = db.testcol.find()

   // Displays the first document in the result set.
   x.next()

   // True because there are more documents in the result set.
   x.hasNext()

   // Assigns the next document in the result set to the variable y.
   y = x.next()

   // Return value is the value of the a field of this document.
   y.a

   // Displaying a cursor prints the next 20 documents in the result set.
   x

.. include:: /includes/student-notes.rst


Cursor Methods
--------------

- ``count()``: Returns the number of documents in the result set.
- ``limit()``: Limits the result set to the number of documents specified.
- ``skip()``: Skips the number of documents specified.

.. include:: /includes/student-notes.rst


Exercise: Using ``count()``
---------------------------

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=100; i++) { db.testcol.insert( { a : i } ) }

   // all 100 
   db.testcol.count()   

   // just 41 docs
   db.testcol.count( { a : { $lt : 42 } } )  

   // Another way of writing the same query
   db.testcol.find( { a : { $lt : 42 } } ).count(  )  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - You may pass a query document like you would to ``find()``.
      - ``count()`` will count only the documents matching the query.
      - Will return the number of documents in the collection if you do not specify a query document.
      - The last query in the above achieves the same result because it operates on the cursor returned by ``find()``.



Exercise: Using ``sort()``
--------------------------

Experiment with the following sort commands.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=20; i++) { 
       db.testcol.insert( { a : Math.floor( Math.random() * 10 + 1 ), 
                            b : Math.floor( Math.random() * 10 + 1 ) } ) 
   }

   db.testcol.find()                            

   // sort descending; use 1 for ascending
   db.testcol.find().sort( { a : -1 } )         

   // sort by b, then a
   db.testcol.find().sort( { b : 1, a : 1 } )   

   // $natural order is just the order on disk.
   db.testcol.find().sort( { $natural : 1 } )  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Sort can be executed on a cursor until the point where the first document is actually read.
      - If you never delete any documents or change their size, this will be the same order in which you inserted them.
      - Sorting two or more fields breaks the convention of javascript objects that key / value pairs are unordered.
      - In some drivers you may need to take special care with this.
      - For example, in Python, you would usually query with a dictionary. 
      - But dictionaries are unordered in Python, so you would use an array of tuples instead.


The ``skip()`` Method
---------------------

- Skips the specified number of documents in the result set.
- The returned cursor will begin at the first document beyond the number specified.
- Regardless of the order in which you specify ``skip()`` and ``sort()`` on a cursor, ``sort()`` happens first.

.. include:: /includes/student-notes.rst


The ``limit()`` Method
----------------------

- Limits the number of documents in a result set to the first ``k``.
- Specify ``k`` as the argument to ``limit()``
- Regardless of the order in which you specify ``limit()``, ``skip()``, and ``sort()`` on a cursor, ``sort()`` happens first.
- Helps reduce resources consumed by queries.

.. include:: /includes/student-notes.rst


The ``distinct()`` Method
-------------------------

- Returns all values for a field found in a collection.
- Only works on one field at a time.
- Input is a string (not a document)

.. include:: /includes/student-notes.rst


Exercise: Using ``distinct()``
------------------------------

Experiment with the following commands and note what ``distinct()`` returns.

.. code-block:: javascript

   db.testcol.drop()    
   db.testcol.insert( [ { a : 2 , b : 3 },
                        { a : 2 },
                        { a : "hello" },
                        { a : "hello" },
                        { a : { hello : "world" } } ] )
   db.testcol.distinct( "a" )

.. include:: /includes/student-notes.rst


