=================
Reading Documents
=================

Learning Objectives
-------------------

Upon completing this module students should understand:

- The query-by-example paradigm of MongoDB
- How to query on array elements
- How to query embedded documents using dot notation
- How the mongo shell and drivers use cursors
- Cursor methods: ``.count()``, ``.sort()``, ``.skip()``, ``.limit()``

.. include:: /includes/student-notes.rst


The ``find()`` Method
---------------------

- This is the fundamental method by which we read data from MongoDB.
- We have already used it in its basic form.
- ``find()`` returns a cursor that enables us to iterate through all documents matching a query.
- We will discuss cursors later.

.. include:: /includes/student-notes.rst


Query by Example
----------------

- To query MongoDB, specify a document containing the field / value pairs you want to match
- You need only specify values for fields you care about.
- Other fields will not be used to exclude documents.
- The result set will include all documents in a collection that match.

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-querying-by-example.txt


Querying Arrays
---------------

- In MongoDB you may query array fields.
- Specify a single value you expect to find in that array in desired documents.
- Alternatively, you may specify an entire array in the query document.
- As we will see later, there are also several operators that enhance our ability to query array fields.

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Students might find it helpful to think of an array field as having multiple values -- one for each of its elements.


.. include:: /exercises/crud-querying-arrays.txt


Querying with Dot Notation
--------------------------

- Dot notation is used to query on fields in embedded documents.
- The format is ``"field1.field2" : value``.
- Put quotes around the field name when using dot notation.
- An example follows.

.. include:: /includes/student-notes.rst

Exercise: Dot Notation, Part 1
------------------------------

Insert a few documents as follows.

.. code-block:: javascript

   db.buildings.insert( 
       [ { 
             type : "house", 
             location : { streetNumber : 123, 
                          street : "7th Ave" } },
         { 
             type : "office", 
             location : { streetNumber : 234, 
                          street : "7th Ave", 
                          floor : 7 } }, 
         { 
             type : "apartment", 
             location : { streetNumber : 335, 
                          street : "43rd Street", 
                          number : 745 } } ] )

.. include:: /includes/student-notes.rst


Exercise: Dot Notation, Part 2
------------------------------

Experiment with the following queries.

.. code-block:: javascript

   // Two matches
   db.buildings.find( { "location.street" : "7th Ave" } )  

   // One match
   db.buildings.find( { "location.street" : "7th Ave", 
                        "location.floor" : 7 } )

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-querying-in-arrays-with-dot-notation.txt


Cursors
-------

- When you use ``find()``, MongoDB returns a cursor.
- A cursor is a pointer to the result set
- You can get iterate through documents in the result using ``next()``.
- By default, the mongo shell will iterate through 20 documents at a time.

.. include:: /includes/student-notes.rst


Exercise: Introducing Cursors, Part 1
-------------------------------------

Experiment with the following commands.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=10000; i++) { 
       db.testcol.insert( { a : Math.floor( Math.random() * 100 + 1 ),
                            b : Math.floor( Math.random() * 100 + 1 ) } )
   }
   db.testcol.find()  
    
   it  
   it  

.. include:: /includes/student-notes.rst


.. only:: instructor

   .. note::

      - With the ``find()`` above, the shell iterates over the first 20 documents. 
      - ``it`` causes the shell to iterate over the next 20 documents.
      - Can continue issuing ``it`` commands until all documents are seen.


Exercise: Introducing Cursors, Part 2
-------------------------------------

Experiment with the following commands.

.. code-block:: javascript

   var x = db.testcol.find()

   x.next()                 

   x.hasNext()              

   y = x.next()             

   y.a                       

   x 

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      .. code-block:: javascript

         // Assigns the cursor returned by find() to a variable x
	 var x = db.testcol.find()

         // Displays the first document in the result set.
	 x.next()                 

         // True because there are more documents in the result set.
	 x.hasNext()              

         // Assigns the next document in the result set to the variable y.
         y = x.next()             

         // Return value is the value of the a field of this document.
	 y.a 
          
         // Displaying a cursor prints the next 20 documents in the result set.            
	 x 



Cursor Methods
--------------

- ``count()``: Returns the number of documents in the result set.
- ``limit()``: Limits the result set to the number of documents specified.
- ``skip()``: Skips the number of documents specified.

.. include:: /includes/student-notes.rst


.. include:: /exercises/crud-using-count.txt


Exercise: Using ``sort()``
--------------------------

Experiment with the following sort commands.

.. code-block:: javascript

   db.testcol.drop()
   for (i=1; i<=20; i++) { 
       db.testcol.insert( { a : Math.floor( Math.random() * 10 + 1 ), 
                            b : Math.floor( Math.random() * 10 + 1 ) } ) 
   }

   db.testcol.find()                            

   // sort descending; use 1 for ascending
   db.testcol.find().sort( { a : -1 } )         

   // sort by b, then a
   db.testcol.find().sort( { b : 1, a : 1 } )   

   // $natural order is just the order on disk.
   db.testcol.find().sort( { $natural : 1 } )  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Sort can be executed on a cursor until the point where the first document is actually read.
      - If you never delete any documents or change their size, this will be the same order in which you inserted them.
      - Sorting two or more fields breaks the convention of javascript objects that key / value pairs are unordered.
      - In some drivers you may need to take special care with this.
      - For example, in Python, you would usually query with a dictionary. 
      - But dictionaries are unordered in Python, so you would use an array of tuples instead.


The ``skip()`` Method
---------------------

- Skips the specified number of documents in the result set.
- The returned cursor will begin at the first document beyond the number specified.
- Regardless of the order in which you specify ``skip()`` and ``sort()`` on a cursor, ``sort()`` happens first.

.. include:: /includes/student-notes.rst


The ``limit()`` Method
----------------------

- Limits the number of documents in a result set to the first ``k``.
- Specify ``k`` as the argument to ``limit()``
- Regardless of the order in which you specify ``limit()``, ``skip()``, and ``sort()`` on a cursor, ``sort()`` happens first.
- Helps reduce resources consumed by queries.

.. include:: /includes/student-notes.rst


The ``distinct()`` Method
-------------------------

- Returns all values for a field found in a collection.
- Only works on one field at a time.
- Input is a string (not a document)

.. include:: /includes/student-notes.rst


Exercise: Using ``distinct()``
------------------------------

Experiment with the following commands and note what ``distinct()`` returns.

.. code-block:: javascript

   db.testcol.drop()    
   db.testcol.insert( [ { a : 2 , b : 3 },
                        { a : 2 },
                        { a : "hello" },
                        { a : "hello" },
                        { a : { hello : "world" } } ] )
   db.testcol.distinct( "a" )

.. include:: /includes/student-notes.rst


