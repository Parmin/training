=============
Write Concern
=============

.. default-domain:: mongodb

Learning Objectives
-------------------

Upon completing this module students should understand:

- How and when rollback occurs in MongoDB.
- The tradeoffs between durability and performance.
- Write concern as a means of ensuring durability in MongoDB.
- The different levels of write concern.

.. include:: /includes/student-notes.rst


What happens to the write?
--------------------------

- A write is sent to a primary.
- The primary acknowledges the write to the client.
- The primary then becomes unavailable before a secondary can replicate the write

.. include:: /includes/student-notes.rst


Answer
------

- Another member might be elected primary.
- It will not have the last write that occurred before the previous primary became unavailable.
- When the previous primary becomes available again:

  - It will note it has writes that were not replicated.
  - It will put these writes into a ``rollback file``.
  - A human will need to determine what to do with this data.

- This is default behavior in MongoDB and can be controlled using ``write concern``.

.. include:: /includes/student-notes.rst


Balancing Durability with Performance
-------------------------------------

- The previous scenario is a specific instance of a common distributed systems problem.
- For some applications it might be acceptable for writes to be rolled back.
- Other applications may have varying requirements with regard to durability.
- Tunable write concern:

  - Make critical operations persist to an entire MongoDB deployment.
  - Specify replication to fewer nodes for less important operations.

.. only:: instructor

   .. note::

      - MongoDB provides tunable write concern to better address the specific needs of applications.
      - Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment.
      - For other less critical operations, clients can adjust write concern to ensure faster performance.

.. include:: /includes/student-notes.rst


Defining Write Concern
----------------------

- Clients may define the write concern per write operation, if necessary.
- Standardize on specific levels of write concerns for different classes of writes.
- In the discussion that follows we will look at increasingly strict levels of write concern.

.. include:: /includes/student-notes.rst


Write Concern: ``{ w : 1 }``
----------------------------

.. include:: /images/crud-write-concern-ack.rst

.. only:: instructor

   .. note::

      - We refer to this write concern as "Acknowledged".
      - This is the default.
      - The primary sends an acknowledgement back to the client that it received the write operation (in RAM).
      - Allows clients to catch network, duplicate key, and other write errors.

.. include:: /includes/student-notes.rst


Example: ``{ w : 1 }``
----------------------

.. code-block:: cpp

   //db.edges.insert( { from : "tom185", to : "mary_p" }, { writeConcern : { w : 1 } } )
   client conn{mongocxx::uri{}};
   collection coll = conn["sample"]["messages"];

   document doc;
   doc << "from" << "bryan" << "to" << "meghan";

   write_concern wc{};
   wc.nodes(1);

   options::insert opts;
   opts.write_concern(wc);

   coll.insert_one( doc.view(), opts);


.. include:: /includes/student-notes.rst


Write Concern: ``{ w : 2 }``
----------------------------

.. include:: /images/crud-write-concern-w2.rst

.. only:: instructor

   .. note::

      - Called "Replica Acknowledged"
      - Ensures the primary completed the write.
      - Ensures at least one secondary replicated the write.

.. include:: /includes/student-notes.rst


Example: ``{ w : 2 }``
----------------------

.. code-block:: cpp

    client conn{mongocxx::uri{}};
    collection coll = conn["sample"]["messages"];

    write_concern wc{};
    wc.nodes(2);
    //we can set the write concern at collection level
    coll.write_concern(wc);

    document doc;
    doc << "from" << "raul" << "to" << "john";

    coll.insert_one( doc.view(), opts);

.. include:: /includes/student-notes.rst


Other Write Concerns
--------------------

- You may specify any integer as the value of the ``w`` field for write concern.
- This guarantees that write operations have propagated to the specified number of members.
- E.g., ``{ w : 3 }``, ``{ w : 4}``, etc.

.. include:: /includes/student-notes.rst


Write Concern: ``{ w : "majority" }``
-------------------------------------

- Ensures the primary completed the write (in RAM).
- Ensures write operations have propagated to a majority of a replica set's **voting** members.
- Avoids hard coding assumptions about the size of your replica set into your application.
- Using majority trades off performance for durability.
- It is suitable for critical writes and to avoid rollbacks.

.. include:: /includes/student-notes.rst


Example: ``{ w : "majority" }``
-------------------------------

.. code-block:: cpp

    client conn{mongocxx::uri{}};
    write_concern wc{};
    // majority of nodes with confirmation within 100 milliseconds
    wc.majority(std::chrono::milliseconds(100));
    conn.write_concern(wc);

    collection coll = conn["sample"]["messages"];

    document criteria, update;
    criteria << "from" << "raul" ;
    update << "$set"
    << open_document << "from" << "raul marin" << close_document;

    coll.update_many( criteria.view(), update.view());

.. include:: /includes/student-notes.rst

.. only:: instructor

  .. note::

    The c++ driver requests a timeout value for the confirmation to be acknowledge by the majority of nodes.
    This only affects the confirmation, not the actual execution of the write operation.
    Make sure that students undertand that there will be no rollback of the operation it the timeout is exhausted.


Quiz: Which write concern?
--------------------------

Suppose you have a replica set with 7 data nodes. Your application has critical inserts for which you do not want rollbacks to happen. Secondaries may be taken down from to time for maintenance, leaving you with a potential 4 server replica set. Which write concern is best suited for these critical inserts?

- { w : 1 }
- { w : 2 }
- { w : 3 }
- { w : 4 }
- { w : "majority" }

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Answer: { w : "majority"}. This is the same as 4 for a 7 member replica set.


Further Reading
---------------

See :manual:`Write Concern Reference</reference/write-concern>` for more details on write concern configurations, including setting timeouts and identifying specific replica set members that must acknowledge writes (i.e. :manual:`tag sets</tutorial/configure-replica-set-tag-sets/#replica-set-configuration-tag-sets>`).

.. include:: /includes/np.rst
