=============
Write Concern
=============

.. default-domain:: mongodb

What happens to the write?
--------------------------

Scenario
~~~~~~~~

- A write is sent to a primary.
- The primary acknowledges the write to the client.
- And then the primary becomes unavailable before a secondary can replicate the write

Answer
~~~~~~

- Another member might be elected primary.
- It will not have the last write that occured before the previous primary became unavailable.
- The data is not lost, however.
- When the previous primary becomes available again:
  
  - It will note it has writes that were not replicated.
  - It will put these writes into a ``rollback file``.  
  - A human will need to determine what to do with this data.

This is default behavior in MonogDB and can be controlled using ``write concern``.


Balancing Durability with Performance
-------------------------------------

- The previous scenario is a specific instance of a common distributed systems problem.
- For some applications it might be acceptable for writes to be rolled back in the relatively rare instances this will occur. 
- Other applications may have varying requirements with regard to durability.
- MongoDB provides different levels of write concern to better address the specific needs of applications. 
- Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment. 
- For other less critical operations, clients can adjust write concern to ensure faster performance.


Defining Write Concern
----------------------

- Clients may define ``write concern`` per operation.
- If necessary, ``write concern`` can be different for every write.
- Usually, applications standardize on a specific level of ``write concern`` for different classes of writes.
- In the discussion that follows we will look at increasingly strict levels of write concern.


Write Concern: Acknowledged
---------------------------

- { w : 1 }
- This is the default.
- The primary sends an acknowledgement back to the client that it received the write operation.
- Allows clients to catch network, duplicate key, and other write errors.

Example
~~~~~~~

.. code-block:: javascript

   db.edges.insert( { "from" : "tom185", "to" : "mary_p" }, 
                    { w : 1 } )

.. figure:: /images/crud-write-concern-ack.png
   :width: 400px

Write Concern: Replica Acknowledged
-----------------------------------

- { w : 2 }
- Ensures the primary completed the write.
- Ensures at least one secondary replicated the write.  

Example
~~~~~~~

.. code-block:: javascript

   db.customer.update( { user : "mary_p" }, 
                       { $push : { shoppingCart : { _id : 335443, 
                                                    name : "Brew-a-cup",
                                                    price : 45.79 } } },
                       { w : 2 } )
 
.. figure:: /images/crud-write-concern-w2.png
   :width: 400px


Other Write Concerns
--------------------

- You may specify any integer as the value of the w field for write concern.
- This guarantees that write operations have propagated to the specified number of members.
- E.g., { w : 3 }, { w : 4}, etc.


Write Concern: Majority
-----------------------

- { w : "majority" }
- Ensures the primary completed the write.
- Ensures write operations have propagated to a majority of a replica set's members.
- This allows you to avoid hard coding assumptions about the size of your replica set into your application.
- In general, using majority will sacrifice performance for durability.
- It is suitable for critical writes.

Example
~~~~~~~

.. code-block:: javascript

   db.products.update( { _id : 335443 },
                       { $inc : { inStock : -1 } },
                       { w : "majority" } )


Quiz: Write Concern Principals
------------------------------

Which write concern is best suited?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Suppose you have a replica set with seven data-bearing members. Your application has critical inserts for which you do not want rollback to happen. Secondaries may be taken down from to time for maintenance leaving you with a potential 4-server replica set. Which write concern is best suited for these critical inserts?

Choices
~~~~~~~

- 1
- 2
- 3
- 4
- "majority"

Answer
~~~~~~

"majority"



Further Reading
---------------

See :manual:`Write Concern Reference</reference/write-concern>` for more details on write concern configurations, including setting timeouts and identifying specific replica set members that must acknowledge writes ( i.e. :manual:`tag sets</tutorial/configure-replica-set-tag-sets/#replica-set-configuration-tag-sets>` ).
