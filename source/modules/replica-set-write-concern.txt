=============
Write Concern
=============

.. default-domain:: mongodb

Learning Objectives
-------------------

Upon completing this module students should understand:

- How and when rollback occurs in MongoDB.
- The tradeoffs between durability and performance.
- Write concern as a means of ensuring durability in MongoDB.
- The different levels of write concern.

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

What happens to the write?
--------------------------

- A write is sent to a primary.
- The primary acknowledges the write to the client.
- And then the primary becomes unavailable before a secondary can replicate the write

.. include:: /includes/student-notes.rst


Answer
------

- Another member might be elected primary.
- It will not have the last write that occurred before the previous primary became unavailable.
- When the previous primary becomes available again:

  - It will note it has writes that were not replicated.
  - It will put these writes into a ``rollback file``.
  - A human will need to determine what to do with this data.

- This is default behavior in MongoDB and can be controlled using ``write concern``.

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Balancing Durability with Performance
-------------------------------------

- The previous scenario is a specific instance of a common distributed systems problem.
- For some applications it might be acceptable for writes to be rolled back.
- Other applications may have varying requirements with regard to durability.
- Tunable write concern:

  - Make critical operations persist to an entire MongoDB deployment.
  - Specify replication to fewer nodes for less important operations.

.. only:: instructor

   .. note::

      - MongoDB provides tunable write concern to better address the specific needs of applications.
      - Clients may adjust write concern to ensure that the most important operations persist successfully to an entire MongoDB deployment.
      - For other less critical operations, clients can adjust write concern to ensure faster performance.

.. include:: /includes/student-notes.rst


Defining Write Concern
----------------------

- Clients may define the write concern per write operation, if necessary.
- Standardize on specific levels of write concerns for different classes of writes.
- In the discussion that follows we will look at increasingly strict levels of write concern.

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Write Concern: ``{ w : 1 }``
----------------------------

.. include:: /images/crud-write-concern-ack-print.rst

.. only:: instructor

   .. note::

      - We refer to this write concern as "Acknowledged".
      - This is the default.
      - The primary sends an acknowledgement back to the client that it received the write operation (in RAM).
      - Allows clients to catch network, duplicate key, and other write errors.

.. include:: /includes/student-notes.rst


Example: ``{ w : 1 }``
----------------------

.. code-block:: javascript

   db.edges.insert({ from : "tom185", to : "mary_p" }, { w : 1 })

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Write Concern: ``{ w : 2 }``
----------------------------

.. include:: /images/crud-write-concern-w2.rst

.. only:: instructor

   .. note::

      - Called "Replica Acknowledged"
      - Ensures the primary completed the write.
      - Ensures at least one secondary replicated the write.

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Example: ``{ w : 2 }``
----------------------

.. code-block:: javascript

   db.customer.update({ user : "mary_p" },
                      { $push : { shoppingCart:
                        { _id : 335443, name : "Brew-a-cup", 
                          price : 45.79 } } },
                      { w : 2 })

.. include:: /includes/student-notes.rst


Other Write Concerns
--------------------

- You may specify any integer as the value of the ``w`` field for write concern.
- This guarantees that write operations have propagated to the specified number of members.
- E.g., ``{ w : 3 }``, ``{ w : 4}``, etc.

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Write Concern: ``{ w : "majority" }``
------------------------------------

- Ensures the primary completed the write (in RAM).
- Ensures write operations have propagated to a majority of a replica set's members.
- Avoids hard coding assumptions about the size of your replica set into your application.
- Using majority trades off performance for durability.
- It is suitable for critical writes and to avoid rollbacks.

.. include:: /includes/student-notes.rst


Example: ``{ w : "majority" }``
-------------------------------

.. code-block:: javascript

   db.products.update({ _id : 335443 },
                      { $inc : { inStock : -1 } },
                      { w : "majority" })

.. include:: /includes/student-notes.rst


.. include:: /includes/np.rst

Quiz: Which write concern?
--------------------------

Suppose you have a replica set with 7 data nodes. Your application has critical inserts for which you do not want rollbacks to happen. Secondaries may be taken down from to time for maintenance, leaving you with a potential 4 server replica set. Which write concern is best suited for these critical inserts?

- { w : 1 }
- { w : 2 }
- { w : 3 }
- { w : 4 }
- { w : "majority" }

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Answer: { w : "majority"}. This is the same as 4 for a 7 member replica set.


Further Reading
---------------

See :manual:`Write Concern Reference</reference/write-concern>` for more details on write concern configurations, including setting timeouts and identifying specific replica set members that must acknowledge writes (i.e. :manual:`tag sets</tutorial/configure-replica-set-tag-sets/#replica-set-configuration-tag-sets>`).

