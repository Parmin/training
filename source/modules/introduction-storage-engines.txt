===============
Storage Engines
===============

Learning Objectives
-------------------

Upon completing this module, students should be familiar with:

- Available storage engines in MongoDB
- MongoDB journaling mechanics
- The default storage engine for MongoDB
- Common storage engine parameters
- The storage engine API

.. include:: /includes/student-notes.rst


What is a Database Storage Engine?
----------------------------------

A database storage engine is the underlying software component that a database management system uses to create, read, update, and delete data from a database. 

.. include:: /images/storage-engine-architecture.rst

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Talk through the diagram and how storage engines are used to abstract access to the data


How Storage Engines Affect Performance
--------------------------------------

- Writing and reading documents
- Concurrency
- Compression algorithms
- Index format and implementation
- On-disk format

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      Can use an extreme example, such as the difference between an in-memory storage engine and mmap/wiredtiger for write performance


Storage Engine Journaling
-------------------------

- Keep track of all changes made to data files
- Stage writes sequentially before they can be committed to the data files
- Crash recovery, writes from journal can be replayed to data files in the event of a failure

.. include:: /includes/student-notes.rst


MongoDB Storage Engines
-----------------------

With the release of MongoDB 3.0, two storage engine options are available:

- MMAPv1 (default)
- WiredTiger

.. include:: /includes/student-notes.rst


Specifying a MongoDB Storage Engine
-----------------------------------

Use the ``storageEngine`` parameter to specify which storage engine MongoDB should use. E.g.,

.. code-block:: javascript

  mongod --storageEngine wiredTiger

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - mmapv1 is used if storageEngine parameter isn't specified  


Specifying a Location to Store Data Files
-----------------------------------------

- Use the ``dbpath`` parameter

  .. code-block:: javascript

     mongod --dbpath /data/db
- Other files are also stored here. E.g.,

  - mongod.lock file
  - journal

- See the MongoDB docs for a complete list of :manual:`storage options</reference/program/mongod/#storage-options>`.

.. include:: /includes/student-notes.rst

      

MMAPv1 Storage Engine
---------------------

- MMAPv1 is MongoDB's original storage engine and currently the default.

  .. code-block:: javascript

     mongod

- This is equivalent to the following command:

  .. code-block:: javascript

     mongod --storageEngine mmapv1

- MMAPv1 is based on memory-mapped files, which map data files on disk into virtual memory.
- As of MongoDB 3.0, MMAPv1 supports collection-level concurrency.

.. include:: /includes/student-notes.rst


MMAPv1 Workloads
----------------

MMAPv1 excels at workloads where documents do not outgrow their original record size:

- High-volume inserts
- Read-only workloads
- In-place updates

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - None of the use cases above grow the documents (and potentially force them to move), one flaw with mmapv1


Power of 2 Sizes Allocation Strategy
------------------------------------

- MongoDB 3.0 uses power of 2 sizes allocation as the default record allocation strategy for MMAPv1.
- With this strategy, records include the document plus extra space, or padding.
- Each record has a size in bytes that is a power of 2 (e.g. 32, 64, 128, ... 2MB).
- For documents larger than 2MB, allocation is rounded up to the nearest multiple of 2MB.
- This strategy enables MongoDB to efficiently reuse freed records to reduce fragmentation. 
- In addition, the added padding gives a document room to grow without requiring a move.

  - Saves the cost of moving a document
  - Results in fewer updates to indexes

.. include:: /includes/student-notes.rst


Compression in MongoDB
----------------------

- Compression can significantly reduce the amount of disk space / memory required.
- The tradeoff is that compression requires more CPU.
- MMAPv1 does not support compression.
- WiredTiger does.

.. include:: /includes/student-notes.rst


WiredTiger Storage Engine
-------------------------

- The WiredTiger storage engine excels at all workloads, especially write-heavy and update-heavy workloads.  

- Notable features of the WiredTiger storage engine that do not exist in the MMAPv1 storage engine include:

  - Compression
  - Document-level concurrency

- Specify the use of the WiredTiger storage engine as follows.

  .. code-block:: javascript

     mongod --storageEngine wiredTiger

.. include:: /includes/student-notes.rst



WiredTiger Compression Options
-------------------------------

- ``snappy`` (default): less CPU usage than ``zlib``, less reduction in data size
- ``zlib``: greater CPU usage than ``snappy``, greater reduction in data size
- no compression

.. include:: /includes/student-notes.rst


Configuring Compression in WiredTiger
-------------------------------------

Use the ``wiredTigerCollectionBlockCompressor`` parameter. E.g., 

.. code-block:: javascript

   mongod --storageEngine wiredTiger 
          --wiredTigerCollectionBlockCompressor zlib

.. include:: /includes/student-notes.rst


Configuring Memory Usage in WiredTiger
--------------------------------------

Use the ``wiredTigerCacheSize`` parameter to designate the amount of RAM for the WiredTiger storage engine.

- By default, this value is set to the maximum of half of physical RAM or 1GB
- If the database server shares a machine with an application server, it is now easier to designate the amount of RAM the database server can use

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Unlike MMAPv1, WiredTiger can be configured to use a finite amount of RAM.  


Journaling in MMAPv1 vs. WiredTiger
-----------------------------------
- MMAPv1 uses write-ahead journaling to ensure consistency.
- WiredTiger uses a write-ahead transaction log in combination with checkpoints to ensure durability.
- With WiredTiger, the replication process may provide sufficient durability guarantees.


MMMAPv1 Journaling Mechanics
----------------------------

- Journal files in <DATA-DIR>/journal are append only
- 1GB per journal file
- Once MongoDB applies all write operations from a journal file to the database data files, it deletes the journal file (or re-uses it)
- Usually only a few journal files in the <DATA-DIR>/journal directory

.. include:: /includes/student-notes.rst


MMAPv1 Journaling Mechanics (Continued)
----------------------------------------

- Data is flushed from the shared view to data files every 60 seconds (configurable)
- The operating system may force a flush at a higher frequency than 60 seconds if the system is low on free memory
- Once a journal file contains only flushed writes, it is no longer needed for recovery and can be deleted or re-used

.. include:: /includes/student-notes.rst


WiredTiger Journaling Mechanics
-------------------------------
- WiredTiger will commit a checkpoint to disk every 60 seconds or when there are 2 gigabytes of data to write.
- Between and during checkpoints the data files are always valid.
- The WiredTiger journal persists all data modifications between checkpoints.
- If MongoDB exits between checkpoints, it uses the journal to replay all data modified since the last checkpoint. 
- By default, WiredTiger journal is compressed using snappy.


Storage Engine API
------------------

MongoDB 3.0 introduced a storage engine API:

- Abstracted storage engine functionality in the code base
- Easier for MongoDB to develop future storage engines
- Easier for third parties to develop their own MongoDB storage engines

.. include:: /includes/student-notes.rst


Conclusion
----------

- MongoDB 3.0 introduces pluggable storage engines.
- Current options include:

  - MMAPv1 (default)
  - WiredTiger

- WiredTiger introduces the following to MongoDB:

  - Compression
  - Document-level concurrency

- The storage engine API enables third parties to develop storage engines. Examples include:

  - RocksDB
  - An HDFS storage engine
  

.. include:: /includes/student-notes.rst

.. only:: instructor

   .. note::

      - Good time to draw what this replica set could look like on the board and talk through even more possibilities




