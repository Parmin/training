=================
Disaster Recovery
=================

Learning Objectives
-------------------

Upon completing this module, students should understand:

- FILL THIS IN!!


Disasters Do Happen
-------------------

.. include:: disasters_happen.png


Human Disasters
---------------

.. include:: human_disasters.png


Terminology: RPO vs. RTO
------------------------

- RPO: Recovery Point Objective

  - How much data can you afford to lose?

- RTO: Recovery Time Objective

  - How long can you afford to be off-line?


Terminology: DR vs. HA
----------------------

- DR: Disaster Recovery 
- HA: High Availability
- Distinct business requirements
- Technical solutions may converge

Quiz
----

- Q: What's the hardest thing about backups?
- A: Restoring them!
- *Regularly test that restoration works!*


Backup Options
--------------

- Document Level

  - Logical
  - mongodump, mongorestore

- File system level
 
  - Physical
  - Copy files
  - Volume/disk snapshots


Document Level Backups - Mongodump
----------------------------------

- Dumps collection to BSON files
- Mirrors your structure
- Can be run live or in offline mode
- Does not include indexes

  - They are rebuilt during restore

- _--dbpath_ for direct file access
- _--oplog_ to record oplog while backing up
- _--query/filter_ selective dump


File System Level
-----------------

- *Must use journaling!*
- Copy _/data/db_ files
- Or snapshot volume (e.g., LVM, SAN, EBS)
- Seriously, always use journaling!


Ensure Consistency
------------------

- Flush RAM to disk and stop accepting writes:
- _db.fsyncLock()_
- Copy/Snapshot
- _db.fsyncUnlock()_


File System Backups: Pros and Cons
----------------------------------

- Entire database
- Backup files will be large
- Fastest way to create a backup
- Fastest way to restore a backup


Document Level - mongorestore
-----------------------------

- _mongorestore_
- _--oplogReplay_ replay oplog to point-in-time


File System Restores
--------------------

- All database files
- Selected databases or collections
- Replay Oplog


Backup Sharded Cluster
----------------------

1. Stop Balancer (and wait)
2. or no balancing window
3. Stop one config server (data R/O)
4. Backup Data (shards, config)
5. Restart config server
6. Resume Balancer


Restore Sharded Cluster
-----------------------

1. Dissimilar # shards to restore to
2. Different shard keys?
3. Selective restores
4. Consolidate shards
5. Changing addresses of config/shards


Tips and Tricks
---------------

- mongodump/mongorestore
 
  - --oplog[Replay]
  - --objcheck/--repair
  - --dbpath
  - --query/--filter

- bsondump

  - inspect data at console

- LVM snapshot time/space tradeoff

  - Multi-EBS (RAID) backup
  - clean up snapshots


Options
-------

- You can do it yourself...
- Or have the people who created MongoDB run your backups


MMS Backup
----------

.. include:: mms_backup.png


Sharded Clusters
----------------

- Balancer paused every 6 hours
- A no-op token is inserted across all shards, mongoses and config servers
- Oplog applied to replica sets until point in which token was inserted
- Provides a consistent state of database across shards


Under the Hood
--------------

- From the initial sync, we rebuild your data in our datacenters and take a snapshot
- We take snapshots every 6 hours
- Oplog is stored for 48 hours


Key Benefit: Point in Time
--------------------------

- Oplog stored for 48 hours
- Restore your replica set to any point-in-time in the last 48 hours by creating a custom snapshot


Key Benefit: Easy to Restore
----------------------------

- Pull from custom URL
- Push via scp


Key Benefit: Unlimited Restores
-------------------------------

- Confidence in your restore process
- Build development, QA, analytics environments without impacting production


Key Benefit: Fully Managed
--------------------------

- Created by the engineers that build MongoDB
- No need to write or maintain custom backup scripts


Getting Started
---------------

- Go to mms.mongodb.com and sign up
